
BoatFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004018  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080041dc  080041dc  000051dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041fc  080041fc  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  080041fc  080041fc  000051fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004204  08004204  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004204  08004204  00005204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004208  08004208  00005208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800420c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  2000000c  08004218  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08004218  000062b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012df3  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c22  00000000  00000000  00018e2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  0001ba58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e1b  00000000  00000000  0001cc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023150  00000000  00000000  0001da5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001806f  00000000  00000000  00040bab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4927  00000000  00000000  00058c1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012d541  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b80  00000000  00000000  0012d584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00132104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080041c4 	.word	0x080041c4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080041c4 	.word	0x080041c4

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b96a 	b.w	8000500 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	460c      	mov	r4, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14e      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000250:	4694      	mov	ip, r2
 8000252:	458c      	cmp	ip, r1
 8000254:	4686      	mov	lr, r0
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	d962      	bls.n	8000322 <__udivmoddi4+0xde>
 800025c:	b14a      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 800025e:	f1c2 0320 	rsb	r3, r2, #32
 8000262:	4091      	lsls	r1, r2
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	fa0c fc02 	lsl.w	ip, ip, r2
 800026c:	4319      	orrs	r1, r3
 800026e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000272:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000276:	fa1f f68c 	uxth.w	r6, ip
 800027a:	fbb1 f4f7 	udiv	r4, r1, r7
 800027e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000282:	fb07 1114 	mls	r1, r7, r4, r1
 8000286:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028a:	fb04 f106 	mul.w	r1, r4, r6
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f104 30ff 	add.w	r0, r4, #4294967295
 800029a:	f080 8112 	bcs.w	80004c2 <__udivmoddi4+0x27e>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 810f 	bls.w	80004c2 <__udivmoddi4+0x27e>
 80002a4:	3c02      	subs	r4, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a59      	subs	r1, r3, r1
 80002aa:	fa1f f38e 	uxth.w	r3, lr
 80002ae:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b2:	fb07 1110 	mls	r1, r7, r0, r1
 80002b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ba:	fb00 f606 	mul.w	r6, r0, r6
 80002be:	429e      	cmp	r6, r3
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x94>
 80002c2:	eb1c 0303 	adds.w	r3, ip, r3
 80002c6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ca:	f080 80fc 	bcs.w	80004c6 <__udivmoddi4+0x282>
 80002ce:	429e      	cmp	r6, r3
 80002d0:	f240 80f9 	bls.w	80004c6 <__udivmoddi4+0x282>
 80002d4:	4463      	add	r3, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	1b9b      	subs	r3, r3, r6
 80002da:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa6>
 80002e2:	40d3      	lsrs	r3, r2
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xba>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb4>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa6>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x150>
 8000306:	42a3      	cmp	r3, r4
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xcc>
 800030a:	4290      	cmp	r0, r2
 800030c:	f0c0 80f0 	bcc.w	80004f0 <__udivmoddi4+0x2ac>
 8000310:	1a86      	subs	r6, r0, r2
 8000312:	eb64 0303 	sbc.w	r3, r4, r3
 8000316:	2001      	movs	r0, #1
 8000318:	2d00      	cmp	r5, #0
 800031a:	d0e6      	beq.n	80002ea <__udivmoddi4+0xa6>
 800031c:	e9c5 6300 	strd	r6, r3, [r5]
 8000320:	e7e3      	b.n	80002ea <__udivmoddi4+0xa6>
 8000322:	2a00      	cmp	r2, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x204>
 8000328:	eba1 040c 	sub.w	r4, r1, ip
 800032c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000330:	fa1f f78c 	uxth.w	r7, ip
 8000334:	2101      	movs	r1, #1
 8000336:	fbb4 f6f8 	udiv	r6, r4, r8
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb08 4416 	mls	r4, r8, r6, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb07 f006 	mul.w	r0, r7, r6
 800034a:	4298      	cmp	r0, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x11c>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 34ff 	add.w	r4, r6, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x11a>
 8000358:	4298      	cmp	r0, r3
 800035a:	f200 80cd 	bhi.w	80004f8 <__udivmoddi4+0x2b4>
 800035e:	4626      	mov	r6, r4
 8000360:	1a1c      	subs	r4, r3, r0
 8000362:	fa1f f38e 	uxth.w	r3, lr
 8000366:	fbb4 f0f8 	udiv	r0, r4, r8
 800036a:	fb08 4410 	mls	r4, r8, r0, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb00 f707 	mul.w	r7, r0, r7
 8000376:	429f      	cmp	r7, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x148>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x146>
 8000384:	429f      	cmp	r7, r3
 8000386:	f200 80b0 	bhi.w	80004ea <__udivmoddi4+0x2a6>
 800038a:	4620      	mov	r0, r4
 800038c:	1bdb      	subs	r3, r3, r7
 800038e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x9c>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a4:	fa04 f301 	lsl.w	r3, r4, r1
 80003a8:	ea43 030c 	orr.w	r3, r3, ip
 80003ac:	40f4      	lsrs	r4, r6
 80003ae:	fa00 f801 	lsl.w	r8, r0, r1
 80003b2:	0c38      	lsrs	r0, r7, #16
 80003b4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b8:	fbb4 fef0 	udiv	lr, r4, r0
 80003bc:	fa1f fc87 	uxth.w	ip, r7
 80003c0:	fb00 441e 	mls	r4, r0, lr, r4
 80003c4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c8:	fb0e f90c 	mul.w	r9, lr, ip
 80003cc:	45a1      	cmp	r9, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d90a      	bls.n	80003ea <__udivmoddi4+0x1a6>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003da:	f080 8084 	bcs.w	80004e6 <__udivmoddi4+0x2a2>
 80003de:	45a1      	cmp	r9, r4
 80003e0:	f240 8081 	bls.w	80004e6 <__udivmoddi4+0x2a2>
 80003e4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	eba4 0409 	sub.w	r4, r4, r9
 80003ee:	fa1f f983 	uxth.w	r9, r3
 80003f2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f6:	fb00 4413 	mls	r4, r0, r3, r4
 80003fa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000402:	45a4      	cmp	ip, r4
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x1d2>
 8000406:	193c      	adds	r4, r7, r4
 8000408:	f103 30ff 	add.w	r0, r3, #4294967295
 800040c:	d267      	bcs.n	80004de <__udivmoddi4+0x29a>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d965      	bls.n	80004de <__udivmoddi4+0x29a>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041a:	fba0 9302 	umull	r9, r3, r0, r2
 800041e:	eba4 040c 	sub.w	r4, r4, ip
 8000422:	429c      	cmp	r4, r3
 8000424:	46ce      	mov	lr, r9
 8000426:	469c      	mov	ip, r3
 8000428:	d351      	bcc.n	80004ce <__udivmoddi4+0x28a>
 800042a:	d04e      	beq.n	80004ca <__udivmoddi4+0x286>
 800042c:	b155      	cbz	r5, 8000444 <__udivmoddi4+0x200>
 800042e:	ebb8 030e 	subs.w	r3, r8, lr
 8000432:	eb64 040c 	sbc.w	r4, r4, ip
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	40cb      	lsrs	r3, r1
 800043c:	431e      	orrs	r6, r3
 800043e:	40cc      	lsrs	r4, r1
 8000440:	e9c5 6400 	strd	r6, r4, [r5]
 8000444:	2100      	movs	r1, #0
 8000446:	e750      	b.n	80002ea <__udivmoddi4+0xa6>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f103 	lsr.w	r1, r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa24 f303 	lsr.w	r3, r4, r3
 8000458:	4094      	lsls	r4, r2
 800045a:	430c      	orrs	r4, r1
 800045c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000460:	fa00 fe02 	lsl.w	lr, r0, r2
 8000464:	fa1f f78c 	uxth.w	r7, ip
 8000468:	fbb3 f0f8 	udiv	r0, r3, r8
 800046c:	fb08 3110 	mls	r1, r8, r0, r3
 8000470:	0c23      	lsrs	r3, r4, #16
 8000472:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000476:	fb00 f107 	mul.w	r1, r0, r7
 800047a:	4299      	cmp	r1, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x24c>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 36ff 	add.w	r6, r0, #4294967295
 8000486:	d22c      	bcs.n	80004e2 <__udivmoddi4+0x29e>
 8000488:	4299      	cmp	r1, r3
 800048a:	d92a      	bls.n	80004e2 <__udivmoddi4+0x29e>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1a5b      	subs	r3, r3, r1
 8000492:	b2a4      	uxth	r4, r4
 8000494:	fbb3 f1f8 	udiv	r1, r3, r8
 8000498:	fb08 3311 	mls	r3, r8, r1, r3
 800049c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a0:	fb01 f307 	mul.w	r3, r1, r7
 80004a4:	42a3      	cmp	r3, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x276>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b0:	d213      	bcs.n	80004da <__udivmoddi4+0x296>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d911      	bls.n	80004da <__udivmoddi4+0x296>
 80004b6:	3902      	subs	r1, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	1ae4      	subs	r4, r4, r3
 80004bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c0:	e739      	b.n	8000336 <__udivmoddi4+0xf2>
 80004c2:	4604      	mov	r4, r0
 80004c4:	e6f0      	b.n	80002a8 <__udivmoddi4+0x64>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e706      	b.n	80002d8 <__udivmoddi4+0x94>
 80004ca:	45c8      	cmp	r8, r9
 80004cc:	d2ae      	bcs.n	800042c <__udivmoddi4+0x1e8>
 80004ce:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7a8      	b.n	800042c <__udivmoddi4+0x1e8>
 80004da:	4631      	mov	r1, r6
 80004dc:	e7ed      	b.n	80004ba <__udivmoddi4+0x276>
 80004de:	4603      	mov	r3, r0
 80004e0:	e799      	b.n	8000416 <__udivmoddi4+0x1d2>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e7d4      	b.n	8000490 <__udivmoddi4+0x24c>
 80004e6:	46d6      	mov	lr, sl
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1a6>
 80004ea:	4463      	add	r3, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e74d      	b.n	800038c <__udivmoddi4+0x148>
 80004f0:	4606      	mov	r6, r0
 80004f2:	4623      	mov	r3, r4
 80004f4:	4608      	mov	r0, r1
 80004f6:	e70f      	b.n	8000318 <__udivmoddi4+0xd4>
 80004f8:	3e02      	subs	r6, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	e730      	b.n	8000360 <__udivmoddi4+0x11c>
 80004fe:	bf00      	nop

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	607b      	str	r3, [r7, #4]
 800050e:	4b0c      	ldr	r3, [pc, #48]	@ (8000540 <MX_DMA_Init+0x3c>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000512:	4a0b      	ldr	r2, [pc, #44]	@ (8000540 <MX_DMA_Init+0x3c>)
 8000514:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000518:	6313      	str	r3, [r2, #48]	@ 0x30
 800051a:	4b09      	ldr	r3, [pc, #36]	@ (8000540 <MX_DMA_Init+0x3c>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000526:	2200      	movs	r2, #0
 8000528:	2100      	movs	r1, #0
 800052a:	200e      	movs	r0, #14
 800052c:	f001 f821 	bl	8001572 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000530:	200e      	movs	r0, #14
 8000532:	f001 f83a 	bl	80015aa <HAL_NVIC_EnableIRQ>

}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40023800 	.word	0x40023800

08000544 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA10   ------> USART1_RX
*/
void MX_GPIO_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b08a      	sub	sp, #40	@ 0x28
 8000548:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054a:	f107 0314 	add.w	r3, r7, #20
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	613b      	str	r3, [r7, #16]
 800055e:	4b40      	ldr	r3, [pc, #256]	@ (8000660 <MX_GPIO_Init+0x11c>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000562:	4a3f      	ldr	r2, [pc, #252]	@ (8000660 <MX_GPIO_Init+0x11c>)
 8000564:	f043 0304 	orr.w	r3, r3, #4
 8000568:	6313      	str	r3, [r2, #48]	@ 0x30
 800056a:	4b3d      	ldr	r3, [pc, #244]	@ (8000660 <MX_GPIO_Init+0x11c>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	f003 0304 	and.w	r3, r3, #4
 8000572:	613b      	str	r3, [r7, #16]
 8000574:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000576:	2300      	movs	r3, #0
 8000578:	60fb      	str	r3, [r7, #12]
 800057a:	4b39      	ldr	r3, [pc, #228]	@ (8000660 <MX_GPIO_Init+0x11c>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057e:	4a38      	ldr	r2, [pc, #224]	@ (8000660 <MX_GPIO_Init+0x11c>)
 8000580:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000584:	6313      	str	r3, [r2, #48]	@ 0x30
 8000586:	4b36      	ldr	r3, [pc, #216]	@ (8000660 <MX_GPIO_Init+0x11c>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	4b32      	ldr	r3, [pc, #200]	@ (8000660 <MX_GPIO_Init+0x11c>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059a:	4a31      	ldr	r2, [pc, #196]	@ (8000660 <MX_GPIO_Init+0x11c>)
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a2:	4b2f      	ldr	r3, [pc, #188]	@ (8000660 <MX_GPIO_Init+0x11c>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	4b2b      	ldr	r3, [pc, #172]	@ (8000660 <MX_GPIO_Init+0x11c>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	4a2a      	ldr	r2, [pc, #168]	@ (8000660 <MX_GPIO_Init+0x11c>)
 80005b8:	f043 0302 	orr.w	r3, r3, #2
 80005bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005be:	4b28      	ldr	r3, [pc, #160]	@ (8000660 <MX_GPIO_Init+0x11c>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c2:	f003 0302 	and.w	r3, r3, #2
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2120      	movs	r1, #32
 80005ce:	4825      	ldr	r0, [pc, #148]	@ (8000664 <MX_GPIO_Init+0x120>)
 80005d0:	f001 fc84 	bl	8001edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80005da:	4823      	ldr	r0, [pc, #140]	@ (8000668 <MX_GPIO_Init+0x124>)
 80005dc:	f001 fc7e 	bl	8001edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005e6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005f0:	f107 0314 	add.w	r3, r7, #20
 80005f4:	4619      	mov	r1, r3
 80005f6:	481c      	ldr	r0, [pc, #112]	@ (8000668 <MX_GPIO_Init+0x124>)
 80005f8:	f001 fadc 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005fc:	2320      	movs	r3, #32
 80005fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000600:	2301      	movs	r3, #1
 8000602:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000608:	2300      	movs	r3, #0
 800060a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	4619      	mov	r1, r3
 8000612:	4814      	ldr	r0, [pc, #80]	@ (8000664 <MX_GPIO_Init+0x120>)
 8000614:	f001 face 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000618:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800061c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061e:	2301      	movs	r3, #1
 8000620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	2300      	movs	r3, #0
 8000628:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	4619      	mov	r1, r3
 8000630:	480d      	ldr	r0, [pc, #52]	@ (8000668 <MX_GPIO_Init+0x124>)
 8000632:	f001 fabf 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000636:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800063a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063c:	2302      	movs	r3, #2
 800063e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000644:	2303      	movs	r3, #3
 8000646:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000648:	2307      	movs	r3, #7
 800064a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	4619      	mov	r1, r3
 8000652:	4804      	ldr	r0, [pc, #16]	@ (8000664 <MX_GPIO_Init+0x120>)
 8000654:	f001 faae 	bl	8001bb4 <HAL_GPIO_Init>

}
 8000658:	bf00      	nop
 800065a:	3728      	adds	r7, #40	@ 0x28
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40023800 	.word	0x40023800
 8000664:	40020000 	.word	0x40020000
 8000668:	40020800 	.word	0x40020800

0800066c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000670:	4b12      	ldr	r3, [pc, #72]	@ (80006bc <MX_I2C1_Init+0x50>)
 8000672:	4a13      	ldr	r2, [pc, #76]	@ (80006c0 <MX_I2C1_Init+0x54>)
 8000674:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000676:	4b11      	ldr	r3, [pc, #68]	@ (80006bc <MX_I2C1_Init+0x50>)
 8000678:	4a12      	ldr	r2, [pc, #72]	@ (80006c4 <MX_I2C1_Init+0x58>)
 800067a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800067c:	4b0f      	ldr	r3, [pc, #60]	@ (80006bc <MX_I2C1_Init+0x50>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000682:	4b0e      	ldr	r3, [pc, #56]	@ (80006bc <MX_I2C1_Init+0x50>)
 8000684:	2200      	movs	r2, #0
 8000686:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000688:	4b0c      	ldr	r3, [pc, #48]	@ (80006bc <MX_I2C1_Init+0x50>)
 800068a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800068e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000690:	4b0a      	ldr	r3, [pc, #40]	@ (80006bc <MX_I2C1_Init+0x50>)
 8000692:	2200      	movs	r2, #0
 8000694:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000696:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <MX_I2C1_Init+0x50>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800069c:	4b07      	ldr	r3, [pc, #28]	@ (80006bc <MX_I2C1_Init+0x50>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a2:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <MX_I2C1_Init+0x50>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a8:	4804      	ldr	r0, [pc, #16]	@ (80006bc <MX_I2C1_Init+0x50>)
 80006aa:	f001 fc31 	bl	8001f10 <HAL_I2C_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006b4:	f000 f928 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000028 	.word	0x20000028
 80006c0:	40005400 	.word	0x40005400
 80006c4:	000186a0 	.word	0x000186a0

080006c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	@ 0x28
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d0:	f107 0314 	add.w	r3, r7, #20
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a19      	ldr	r2, [pc, #100]	@ (800074c <HAL_I2C_MspInit+0x84>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d12c      	bne.n	8000744 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
 80006ee:	4b18      	ldr	r3, [pc, #96]	@ (8000750 <HAL_I2C_MspInit+0x88>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	4a17      	ldr	r2, [pc, #92]	@ (8000750 <HAL_I2C_MspInit+0x88>)
 80006f4:	f043 0302 	orr.w	r3, r3, #2
 80006f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fa:	4b15      	ldr	r3, [pc, #84]	@ (8000750 <HAL_I2C_MspInit+0x88>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	f003 0302 	and.w	r3, r3, #2
 8000702:	613b      	str	r3, [r7, #16]
 8000704:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000706:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800070a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800070c:	2312      	movs	r3, #18
 800070e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000714:	2303      	movs	r3, #3
 8000716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000718:	2304      	movs	r3, #4
 800071a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	4619      	mov	r1, r3
 8000722:	480c      	ldr	r0, [pc, #48]	@ (8000754 <HAL_I2C_MspInit+0x8c>)
 8000724:	f001 fa46 	bl	8001bb4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000728:	2300      	movs	r3, #0
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	4b08      	ldr	r3, [pc, #32]	@ (8000750 <HAL_I2C_MspInit+0x88>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000730:	4a07      	ldr	r2, [pc, #28]	@ (8000750 <HAL_I2C_MspInit+0x88>)
 8000732:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000736:	6413      	str	r3, [r2, #64]	@ 0x40
 8000738:	4b05      	ldr	r3, [pc, #20]	@ (8000750 <HAL_I2C_MspInit+0x88>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800073c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000744:	bf00      	nop
 8000746:	3728      	adds	r7, #40	@ 0x28
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40005400 	.word	0x40005400
 8000750:	40023800 	.word	0x40023800
 8000754:	40020400 	.word	0x40020400

08000758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int i =0;
 800075e:	2300      	movs	r3, #0
 8000760:	613b      	str	r3, [r7, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000762:	f000 fd95 	bl	8001290 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000766:	f000 f861 	bl	800082c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076a:	f7ff feeb 	bl	8000544 <MX_GPIO_Init>
  MX_DMA_Init();
 800076e:	f7ff fec9 	bl	8000504 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000772:	f000 fcf1 	bl	8001158 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000776:	f000 fa89 	bl	8000c8c <MX_TIM2_Init>
  MX_TIM3_Init();
 800077a:	f000 fb01 	bl	8000d80 <MX_TIM3_Init>
  MX_TIM4_Init();
 800077e:	f000 fb79 	bl	8000e74 <MX_TIM4_Init>
  MX_SPI2_Init();
 8000782:	f000 f8c7 	bl	8000914 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000786:	f000 f8f7 	bl	8000978 <MX_SPI3_Init>
  MX_I2C1_Init();
 800078a:	f7ff ff6f 	bl	800066c <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  int x = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
  while (1)
  {

	  TIM2->CCR2 = x;
 8000792:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	6393      	str	r3, [r2, #56]	@ 0x38
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800079a:	2104      	movs	r1, #4
 800079c:	481d      	ldr	r0, [pc, #116]	@ (8000814 <main+0xbc>)
 800079e:	f002 fbbb 	bl	8002f18 <HAL_TIM_PWM_Start>
	  TIM3->CCR3 = x;
 80007a2:	4a1d      	ldr	r2, [pc, #116]	@ (8000818 <main+0xc0>)
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	63d3      	str	r3, [r2, #60]	@ 0x3c
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80007a8:	2108      	movs	r1, #8
 80007aa:	481c      	ldr	r0, [pc, #112]	@ (800081c <main+0xc4>)
 80007ac:	f002 fbb4 	bl	8002f18 <HAL_TIM_PWM_Start>
	  TIM4->CCR4 = x;
 80007b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000820 <main+0xc8>)
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	6413      	str	r3, [r2, #64]	@ 0x40
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80007b6:	210c      	movs	r1, #12
 80007b8:	481a      	ldr	r0, [pc, #104]	@ (8000824 <main+0xcc>)
 80007ba:	f002 fbad 	bl	8002f18 <HAL_TIM_PWM_Start>
//
	  HAL_Delay(250);
 80007be:	20fa      	movs	r0, #250	@ 0xfa
 80007c0:	f000 fdd8 	bl	8001374 <HAL_Delay>
	  x+=250;
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	33fa      	adds	r3, #250	@ 0xfa
 80007c8:	617b      	str	r3, [r7, #20]
	  if (x > 3500-1)
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	f640 52ab 	movw	r2, #3499	@ 0xdab
 80007d0:	4293      	cmp	r3, r2
 80007d2:	dd01      	ble.n	80007d8 <main+0x80>
	  {
		  x=0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
	  //sprintf(buf, "%d\r\n", i);

//	  strcpy((char*)buf, i);
//	  strcpy((char*)buf, "\r\n");

	  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff fd12 	bl	8000204 <strlen>
 80007e0:	4603      	mov	r3, r0
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	1d39      	adds	r1, r7, #4
 80007e6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ea:	480f      	ldr	r0, [pc, #60]	@ (8000828 <main+0xd0>)
 80007ec:	f003 f86c 	bl	80038c8 <HAL_UART_Transmit>
	  HAL_Delay(500);
 80007f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007f4:	f000 fdbe 	bl	8001374 <HAL_Delay>
	  HAL_UART_Receive(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff fd02 	bl	8000204 <strlen>
 8000800:	4603      	mov	r3, r0
 8000802:	b29a      	uxth	r2, r3
 8000804:	1d39      	adds	r1, r7, #4
 8000806:	f04f 33ff 	mov.w	r3, #4294967295
 800080a:	4807      	ldr	r0, [pc, #28]	@ (8000828 <main+0xd0>)
 800080c:	f003 f8e7 	bl	80039de <HAL_UART_Receive>
	  TIM2->CCR2 = x;
 8000810:	e7bf      	b.n	8000792 <main+0x3a>
 8000812:	bf00      	nop
 8000814:	2000018c 	.word	0x2000018c
 8000818:	40000400 	.word	0x40000400
 800081c:	200001d4 	.word	0x200001d4
 8000820:	40000800 	.word	0x40000800
 8000824:	2000021c 	.word	0x2000021c
 8000828:	20000264 	.word	0x20000264

0800082c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b094      	sub	sp, #80	@ 0x50
 8000830:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	2234      	movs	r2, #52	@ 0x34
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f003 fc96 	bl	800416c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000840:	f107 0308 	add.w	r3, r7, #8
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000850:	2300      	movs	r3, #0
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	4b2a      	ldr	r3, [pc, #168]	@ (8000900 <SystemClock_Config+0xd4>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000858:	4a29      	ldr	r2, [pc, #164]	@ (8000900 <SystemClock_Config+0xd4>)
 800085a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800085e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000860:	4b27      	ldr	r3, [pc, #156]	@ (8000900 <SystemClock_Config+0xd4>)
 8000862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000864:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800086c:	2300      	movs	r3, #0
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	4b24      	ldr	r3, [pc, #144]	@ (8000904 <SystemClock_Config+0xd8>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000878:	4a22      	ldr	r2, [pc, #136]	@ (8000904 <SystemClock_Config+0xd8>)
 800087a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800087e:	6013      	str	r3, [r2, #0]
 8000880:	4b20      	ldr	r3, [pc, #128]	@ (8000904 <SystemClock_Config+0xd8>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800088c:	2302      	movs	r3, #2
 800088e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000890:	2301      	movs	r3, #1
 8000892:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000894:	2310      	movs	r3, #16
 8000896:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000898:	2302      	movs	r3, #2
 800089a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800089c:	2300      	movs	r3, #0
 800089e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008a0:	2310      	movs	r3, #16
 80008a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008a4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80008a8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008aa:	2304      	movs	r3, #4
 80008ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008ae:	2302      	movs	r3, #2
 80008b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008b2:	2302      	movs	r3, #2
 80008b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4618      	mov	r0, r3
 80008bc:	f001 ffb6 	bl	800282c <HAL_RCC_OscConfig>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008c6:	f000 f81f 	bl	8000908 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ca:	230f      	movs	r3, #15
 80008cc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ce:	2302      	movs	r3, #2
 80008d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d2:	2300      	movs	r3, #0
 80008d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008e0:	f107 0308 	add.w	r3, r7, #8
 80008e4:	2102      	movs	r1, #2
 80008e6:	4618      	mov	r0, r3
 80008e8:	f001 fc56 	bl	8002198 <HAL_RCC_ClockConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80008f2:	f000 f809 	bl	8000908 <Error_Handler>
  }
}
 80008f6:	bf00      	nop
 80008f8:	3750      	adds	r7, #80	@ 0x50
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800
 8000904:	40007000 	.word	0x40007000

08000908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800090c:	b672      	cpsid	i
}
 800090e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <Error_Handler+0x8>

08000914 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi3;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000918:	4b15      	ldr	r3, [pc, #84]	@ (8000970 <MX_SPI2_Init+0x5c>)
 800091a:	4a16      	ldr	r2, [pc, #88]	@ (8000974 <MX_SPI2_Init+0x60>)
 800091c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800091e:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <MX_SPI2_Init+0x5c>)
 8000920:	2200      	movs	r2, #0
 8000922:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000924:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <MX_SPI2_Init+0x5c>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800092a:	4b11      	ldr	r3, [pc, #68]	@ (8000970 <MX_SPI2_Init+0x5c>)
 800092c:	2200      	movs	r2, #0
 800092e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000930:	4b0f      	ldr	r3, [pc, #60]	@ (8000970 <MX_SPI2_Init+0x5c>)
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000936:	4b0e      	ldr	r3, [pc, #56]	@ (8000970 <MX_SPI2_Init+0x5c>)
 8000938:	2200      	movs	r2, #0
 800093a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 800093c:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <MX_SPI2_Init+0x5c>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000942:	4b0b      	ldr	r3, [pc, #44]	@ (8000970 <MX_SPI2_Init+0x5c>)
 8000944:	2200      	movs	r2, #0
 8000946:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000948:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <MX_SPI2_Init+0x5c>)
 800094a:	2200      	movs	r2, #0
 800094c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800094e:	4b08      	ldr	r3, [pc, #32]	@ (8000970 <MX_SPI2_Init+0x5c>)
 8000950:	2200      	movs	r2, #0
 8000952:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000954:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <MX_SPI2_Init+0x5c>)
 8000956:	220a      	movs	r2, #10
 8000958:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	@ (8000970 <MX_SPI2_Init+0x5c>)
 800095c:	f002 fa04 	bl	8002d68 <HAL_SPI_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_SPI2_Init+0x56>
  {
    Error_Handler();
 8000966:	f7ff ffcf 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	2000007c 	.word	0x2000007c
 8000974:	40003800 	.word	0x40003800

08000978 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800097c:	4b17      	ldr	r3, [pc, #92]	@ (80009dc <MX_SPI3_Init+0x64>)
 800097e:	4a18      	ldr	r2, [pc, #96]	@ (80009e0 <MX_SPI3_Init+0x68>)
 8000980:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000982:	4b16      	ldr	r3, [pc, #88]	@ (80009dc <MX_SPI3_Init+0x64>)
 8000984:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000988:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800098a:	4b14      	ldr	r3, [pc, #80]	@ (80009dc <MX_SPI3_Init+0x64>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000990:	4b12      	ldr	r3, [pc, #72]	@ (80009dc <MX_SPI3_Init+0x64>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000996:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <MX_SPI3_Init+0x64>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800099c:	4b0f      	ldr	r3, [pc, #60]	@ (80009dc <MX_SPI3_Init+0x64>)
 800099e:	2200      	movs	r2, #0
 80009a0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <MX_SPI3_Init+0x64>)
 80009a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009a8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009aa:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <MX_SPI3_Init+0x64>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009b0:	4b0a      	ldr	r3, [pc, #40]	@ (80009dc <MX_SPI3_Init+0x64>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80009b6:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <MX_SPI3_Init+0x64>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009bc:	4b07      	ldr	r3, [pc, #28]	@ (80009dc <MX_SPI3_Init+0x64>)
 80009be:	2200      	movs	r2, #0
 80009c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80009c2:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <MX_SPI3_Init+0x64>)
 80009c4:	220a      	movs	r2, #10
 80009c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80009c8:	4804      	ldr	r0, [pc, #16]	@ (80009dc <MX_SPI3_Init+0x64>)
 80009ca:	f002 f9cd 	bl	8002d68 <HAL_SPI_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80009d4:	f7ff ff98 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	200000d4 	.word	0x200000d4
 80009e0:	40003c00 	.word	0x40003c00

080009e4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08c      	sub	sp, #48	@ 0x30
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a61      	ldr	r2, [pc, #388]	@ (8000b88 <HAL_SPI_MspInit+0x1a4>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	f040 808a 	bne.w	8000b1c <HAL_SPI_MspInit+0x138>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61bb      	str	r3, [r7, #24]
 8000a0c:	4b5f      	ldr	r3, [pc, #380]	@ (8000b8c <HAL_SPI_MspInit+0x1a8>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a10:	4a5e      	ldr	r2, [pc, #376]	@ (8000b8c <HAL_SPI_MspInit+0x1a8>)
 8000a12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a16:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a18:	4b5c      	ldr	r3, [pc, #368]	@ (8000b8c <HAL_SPI_MspInit+0x1a8>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a20:	61bb      	str	r3, [r7, #24]
 8000a22:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]
 8000a28:	4b58      	ldr	r3, [pc, #352]	@ (8000b8c <HAL_SPI_MspInit+0x1a8>)
 8000a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2c:	4a57      	ldr	r2, [pc, #348]	@ (8000b8c <HAL_SPI_MspInit+0x1a8>)
 8000a2e:	f043 0304 	orr.w	r3, r3, #4
 8000a32:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a34:	4b55      	ldr	r3, [pc, #340]	@ (8000b8c <HAL_SPI_MspInit+0x1a8>)
 8000a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a38:	f003 0304 	and.w	r3, r3, #4
 8000a3c:	617b      	str	r3, [r7, #20]
 8000a3e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a40:	2300      	movs	r3, #0
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	4b51      	ldr	r3, [pc, #324]	@ (8000b8c <HAL_SPI_MspInit+0x1a8>)
 8000a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a48:	4a50      	ldr	r2, [pc, #320]	@ (8000b8c <HAL_SPI_MspInit+0x1a8>)
 8000a4a:	f043 0302 	orr.w	r3, r3, #2
 8000a4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a50:	4b4e      	ldr	r3, [pc, #312]	@ (8000b8c <HAL_SPI_MspInit+0x1a8>)
 8000a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a54:	f003 0302 	and.w	r3, r3, #2
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	693b      	ldr	r3, [r7, #16]
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000a6c:	2307      	movs	r3, #7
 8000a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	4619      	mov	r1, r3
 8000a76:	4846      	ldr	r0, [pc, #280]	@ (8000b90 <HAL_SPI_MspInit+0x1ac>)
 8000a78:	f001 f89c 	bl	8001bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a7c:	2304      	movs	r3, #4
 8000a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a80:	2302      	movs	r3, #2
 8000a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a8c:	2305      	movs	r3, #5
 8000a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	4619      	mov	r1, r3
 8000a96:	483e      	ldr	r0, [pc, #248]	@ (8000b90 <HAL_SPI_MspInit+0x1ac>)
 8000a98:	f001 f88c 	bl	8001bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000a9c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000aae:	2305      	movs	r3, #5
 8000ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4836      	ldr	r0, [pc, #216]	@ (8000b94 <HAL_SPI_MspInit+0x1b0>)
 8000aba:	f001 f87b 	bl	8001bb4 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000abe:	4b36      	ldr	r3, [pc, #216]	@ (8000b98 <HAL_SPI_MspInit+0x1b4>)
 8000ac0:	4a36      	ldr	r2, [pc, #216]	@ (8000b9c <HAL_SPI_MspInit+0x1b8>)
 8000ac2:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8000ac4:	4b34      	ldr	r3, [pc, #208]	@ (8000b98 <HAL_SPI_MspInit+0x1b4>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000aca:	4b33      	ldr	r3, [pc, #204]	@ (8000b98 <HAL_SPI_MspInit+0x1b4>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ad0:	4b31      	ldr	r3, [pc, #196]	@ (8000b98 <HAL_SPI_MspInit+0x1b4>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ad6:	4b30      	ldr	r3, [pc, #192]	@ (8000b98 <HAL_SPI_MspInit+0x1b4>)
 8000ad8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000adc:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ade:	4b2e      	ldr	r3, [pc, #184]	@ (8000b98 <HAL_SPI_MspInit+0x1b4>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ae4:	4b2c      	ldr	r3, [pc, #176]	@ (8000b98 <HAL_SPI_MspInit+0x1b4>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8000aea:	4b2b      	ldr	r3, [pc, #172]	@ (8000b98 <HAL_SPI_MspInit+0x1b4>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000af0:	4b29      	ldr	r3, [pc, #164]	@ (8000b98 <HAL_SPI_MspInit+0x1b4>)
 8000af2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000af6:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000af8:	4b27      	ldr	r3, [pc, #156]	@ (8000b98 <HAL_SPI_MspInit+0x1b4>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000afe:	4826      	ldr	r0, [pc, #152]	@ (8000b98 <HAL_SPI_MspInit+0x1b4>)
 8000b00:	f000 fd6e 	bl	80015e0 <HAL_DMA_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 8000b0a:	f7ff fefd 	bl	8000908 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a21      	ldr	r2, [pc, #132]	@ (8000b98 <HAL_SPI_MspInit+0x1b4>)
 8000b12:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000b14:	4a20      	ldr	r2, [pc, #128]	@ (8000b98 <HAL_SPI_MspInit+0x1b4>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000b1a:	e031      	b.n	8000b80 <HAL_SPI_MspInit+0x19c>
  else if(spiHandle->Instance==SPI3)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a1f      	ldr	r2, [pc, #124]	@ (8000ba0 <HAL_SPI_MspInit+0x1bc>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d12c      	bne.n	8000b80 <HAL_SPI_MspInit+0x19c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	4b18      	ldr	r3, [pc, #96]	@ (8000b8c <HAL_SPI_MspInit+0x1a8>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2e:	4a17      	ldr	r2, [pc, #92]	@ (8000b8c <HAL_SPI_MspInit+0x1a8>)
 8000b30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b36:	4b15      	ldr	r3, [pc, #84]	@ (8000b8c <HAL_SPI_MspInit+0x1a8>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	4b11      	ldr	r3, [pc, #68]	@ (8000b8c <HAL_SPI_MspInit+0x1a8>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	4a10      	ldr	r2, [pc, #64]	@ (8000b8c <HAL_SPI_MspInit+0x1a8>)
 8000b4c:	f043 0304 	orr.w	r3, r3, #4
 8000b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b52:	4b0e      	ldr	r3, [pc, #56]	@ (8000b8c <HAL_SPI_MspInit+0x1a8>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	f003 0304 	and.w	r3, r3, #4
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000b5e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b70:	2306      	movs	r3, #6
 8000b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b74:	f107 031c 	add.w	r3, r7, #28
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4805      	ldr	r0, [pc, #20]	@ (8000b90 <HAL_SPI_MspInit+0x1ac>)
 8000b7c:	f001 f81a 	bl	8001bb4 <HAL_GPIO_Init>
}
 8000b80:	bf00      	nop
 8000b82:	3730      	adds	r7, #48	@ 0x30
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40003800 	.word	0x40003800
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020800 	.word	0x40020800
 8000b94:	40020400 	.word	0x40020400
 8000b98:	2000012c 	.word	0x2000012c
 8000b9c:	40026058 	.word	0x40026058
 8000ba0:	40003c00 	.word	0x40003c00

08000ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	4b10      	ldr	r3, [pc, #64]	@ (8000bf0 <HAL_MspInit+0x4c>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bb2:	4a0f      	ldr	r2, [pc, #60]	@ (8000bf0 <HAL_MspInit+0x4c>)
 8000bb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bba:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf0 <HAL_MspInit+0x4c>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	603b      	str	r3, [r7, #0]
 8000bca:	4b09      	ldr	r3, [pc, #36]	@ (8000bf0 <HAL_MspInit+0x4c>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bce:	4a08      	ldr	r2, [pc, #32]	@ (8000bf0 <HAL_MspInit+0x4c>)
 8000bd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bd6:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <HAL_MspInit+0x4c>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000be2:	2007      	movs	r0, #7
 8000be4:	f000 fcba 	bl	800155c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be8:	bf00      	nop
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40023800 	.word	0x40023800

08000bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <NMI_Handler+0x4>

08000bfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <HardFault_Handler+0x4>

08000c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <MemManage_Handler+0x4>

08000c0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <BusFault_Handler+0x4>

08000c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <UsageFault_Handler+0x4>

08000c1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c4a:	f000 fb73 	bl	8001334 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000c58:	4802      	ldr	r0, [pc, #8]	@ (8000c64 <DMA1_Stream3_IRQHandler+0x10>)
 8000c5a:	f000 fd6f 	bl	800173c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	2000012c 	.word	0x2000012c

08000c68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c6c:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <SystemInit+0x20>)
 8000c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c72:	4a05      	ldr	r2, [pc, #20]	@ (8000c88 <SystemInit+0x20>)
 8000c74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08a      	sub	sp, #40	@ 0x28
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c92:	f107 0320 	add.w	r3, r7, #32
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	611a      	str	r2, [r3, #16]
 8000caa:	615a      	str	r2, [r3, #20]
 8000cac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cae:	4b33      	ldr	r3, [pc, #204]	@ (8000d7c <MX_TIM2_Init+0xf0>)
 8000cb0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cb4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8000cb6:	4b31      	ldr	r3, [pc, #196]	@ (8000d7c <MX_TIM2_Init+0xf0>)
 8000cb8:	2253      	movs	r2, #83	@ 0x53
 8000cba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cbc:	4b2f      	ldr	r3, [pc, #188]	@ (8000d7c <MX_TIM2_Init+0xf0>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8000cc2:	4b2e      	ldr	r3, [pc, #184]	@ (8000d7c <MX_TIM2_Init+0xf0>)
 8000cc4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000cc8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cca:	4b2c      	ldr	r3, [pc, #176]	@ (8000d7c <MX_TIM2_Init+0xf0>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cd0:	4b2a      	ldr	r3, [pc, #168]	@ (8000d7c <MX_TIM2_Init+0xf0>)
 8000cd2:	2280      	movs	r2, #128	@ 0x80
 8000cd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000cd6:	4829      	ldr	r0, [pc, #164]	@ (8000d7c <MX_TIM2_Init+0xf0>)
 8000cd8:	f002 f8cf 	bl	8002e7a <HAL_TIM_PWM_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000ce2:	f7ff fe11 	bl	8000908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cee:	f107 0320 	add.w	r3, r7, #32
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4821      	ldr	r0, [pc, #132]	@ (8000d7c <MX_TIM2_Init+0xf0>)
 8000cf6:	f002 fd1b 	bl	8003730 <HAL_TIMEx_MasterConfigSynchronization>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000d00:	f7ff fe02 	bl	8000908 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d04:	2360      	movs	r3, #96	@ 0x60
 8000d06:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	2200      	movs	r2, #0
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4818      	ldr	r0, [pc, #96]	@ (8000d7c <MX_TIM2_Init+0xf0>)
 8000d1c:	f002 f9c4 	bl	80030a8 <HAL_TIM_PWM_ConfigChannel>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000d26:	f7ff fdef 	bl	8000908 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	2204      	movs	r2, #4
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4812      	ldr	r0, [pc, #72]	@ (8000d7c <MX_TIM2_Init+0xf0>)
 8000d32:	f002 f9b9 	bl	80030a8 <HAL_TIM_PWM_ConfigChannel>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000d3c:	f7ff fde4 	bl	8000908 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	2208      	movs	r2, #8
 8000d44:	4619      	mov	r1, r3
 8000d46:	480d      	ldr	r0, [pc, #52]	@ (8000d7c <MX_TIM2_Init+0xf0>)
 8000d48:	f002 f9ae 	bl	80030a8 <HAL_TIM_PWM_ConfigChannel>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8000d52:	f7ff fdd9 	bl	8000908 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	220c      	movs	r2, #12
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4807      	ldr	r0, [pc, #28]	@ (8000d7c <MX_TIM2_Init+0xf0>)
 8000d5e:	f002 f9a3 	bl	80030a8 <HAL_TIM_PWM_ConfigChannel>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8000d68:	f7ff fdce 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d6c:	4803      	ldr	r0, [pc, #12]	@ (8000d7c <MX_TIM2_Init+0xf0>)
 8000d6e:	f000 f931 	bl	8000fd4 <HAL_TIM_MspPostInit>

}
 8000d72:	bf00      	nop
 8000d74:	3728      	adds	r7, #40	@ 0x28
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	2000018c 	.word	0x2000018c

08000d80 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	@ 0x28
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d86:	f107 0320 	add.w	r3, r7, #32
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
 8000d9c:	611a      	str	r2, [r3, #16]
 8000d9e:	615a      	str	r2, [r3, #20]
 8000da0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000da2:	4b32      	ldr	r3, [pc, #200]	@ (8000e6c <MX_TIM3_Init+0xec>)
 8000da4:	4a32      	ldr	r2, [pc, #200]	@ (8000e70 <MX_TIM3_Init+0xf0>)
 8000da6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8000da8:	4b30      	ldr	r3, [pc, #192]	@ (8000e6c <MX_TIM3_Init+0xec>)
 8000daa:	2253      	movs	r2, #83	@ 0x53
 8000dac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dae:	4b2f      	ldr	r3, [pc, #188]	@ (8000e6c <MX_TIM3_Init+0xec>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8000db4:	4b2d      	ldr	r3, [pc, #180]	@ (8000e6c <MX_TIM3_Init+0xec>)
 8000db6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000dba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dbc:	4b2b      	ldr	r3, [pc, #172]	@ (8000e6c <MX_TIM3_Init+0xec>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dc2:	4b2a      	ldr	r3, [pc, #168]	@ (8000e6c <MX_TIM3_Init+0xec>)
 8000dc4:	2280      	movs	r2, #128	@ 0x80
 8000dc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000dc8:	4828      	ldr	r0, [pc, #160]	@ (8000e6c <MX_TIM3_Init+0xec>)
 8000dca:	f002 f856 	bl	8002e7a <HAL_TIM_PWM_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000dd4:	f7ff fd98 	bl	8000908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000de0:	f107 0320 	add.w	r3, r7, #32
 8000de4:	4619      	mov	r1, r3
 8000de6:	4821      	ldr	r0, [pc, #132]	@ (8000e6c <MX_TIM3_Init+0xec>)
 8000de8:	f002 fca2 	bl	8003730 <HAL_TIMEx_MasterConfigSynchronization>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000df2:	f7ff fd89 	bl	8000908 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000df6:	2360      	movs	r3, #96	@ 0x60
 8000df8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	2200      	movs	r2, #0
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4817      	ldr	r0, [pc, #92]	@ (8000e6c <MX_TIM3_Init+0xec>)
 8000e0e:	f002 f94b 	bl	80030a8 <HAL_TIM_PWM_ConfigChannel>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000e18:	f7ff fd76 	bl	8000908 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	2204      	movs	r2, #4
 8000e20:	4619      	mov	r1, r3
 8000e22:	4812      	ldr	r0, [pc, #72]	@ (8000e6c <MX_TIM3_Init+0xec>)
 8000e24:	f002 f940 	bl	80030a8 <HAL_TIM_PWM_ConfigChannel>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000e2e:	f7ff fd6b 	bl	8000908 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	2208      	movs	r2, #8
 8000e36:	4619      	mov	r1, r3
 8000e38:	480c      	ldr	r0, [pc, #48]	@ (8000e6c <MX_TIM3_Init+0xec>)
 8000e3a:	f002 f935 	bl	80030a8 <HAL_TIM_PWM_ConfigChannel>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8000e44:	f7ff fd60 	bl	8000908 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	220c      	movs	r2, #12
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4807      	ldr	r0, [pc, #28]	@ (8000e6c <MX_TIM3_Init+0xec>)
 8000e50:	f002 f92a 	bl	80030a8 <HAL_TIM_PWM_ConfigChannel>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8000e5a:	f7ff fd55 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e5e:	4803      	ldr	r0, [pc, #12]	@ (8000e6c <MX_TIM3_Init+0xec>)
 8000e60:	f000 f8b8 	bl	8000fd4 <HAL_TIM_MspPostInit>

}
 8000e64:	bf00      	nop
 8000e66:	3728      	adds	r7, #40	@ 0x28
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	200001d4 	.word	0x200001d4
 8000e70:	40000400 	.word	0x40000400

08000e74 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08a      	sub	sp, #40	@ 0x28
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e7a:	f107 0320 	add.w	r3, r7, #32
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
 8000e90:	611a      	str	r2, [r3, #16]
 8000e92:	615a      	str	r2, [r3, #20]
 8000e94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e96:	4b27      	ldr	r3, [pc, #156]	@ (8000f34 <MX_TIM4_Init+0xc0>)
 8000e98:	4a27      	ldr	r2, [pc, #156]	@ (8000f38 <MX_TIM4_Init+0xc4>)
 8000e9a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8000e9c:	4b25      	ldr	r3, [pc, #148]	@ (8000f34 <MX_TIM4_Init+0xc0>)
 8000e9e:	2253      	movs	r2, #83	@ 0x53
 8000ea0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea2:	4b24      	ldr	r3, [pc, #144]	@ (8000f34 <MX_TIM4_Init+0xc0>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 8000ea8:	4b22      	ldr	r3, [pc, #136]	@ (8000f34 <MX_TIM4_Init+0xc0>)
 8000eaa:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000eae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb0:	4b20      	ldr	r3, [pc, #128]	@ (8000f34 <MX_TIM4_Init+0xc0>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb6:	4b1f      	ldr	r3, [pc, #124]	@ (8000f34 <MX_TIM4_Init+0xc0>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ebc:	481d      	ldr	r0, [pc, #116]	@ (8000f34 <MX_TIM4_Init+0xc0>)
 8000ebe:	f001 ffdc 	bl	8002e7a <HAL_TIM_PWM_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000ec8:	f7ff fd1e 	bl	8000908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ed4:	f107 0320 	add.w	r3, r7, #32
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4816      	ldr	r0, [pc, #88]	@ (8000f34 <MX_TIM4_Init+0xc0>)
 8000edc:	f002 fc28 	bl	8003730 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000ee6:	f7ff fd0f 	bl	8000908 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eea:	2360      	movs	r3, #96	@ 0x60
 8000eec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	2200      	movs	r2, #0
 8000efe:	4619      	mov	r1, r3
 8000f00:	480c      	ldr	r0, [pc, #48]	@ (8000f34 <MX_TIM4_Init+0xc0>)
 8000f02:	f002 f8d1 	bl	80030a8 <HAL_TIM_PWM_ConfigChannel>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000f0c:	f7ff fcfc 	bl	8000908 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	2204      	movs	r2, #4
 8000f14:	4619      	mov	r1, r3
 8000f16:	4807      	ldr	r0, [pc, #28]	@ (8000f34 <MX_TIM4_Init+0xc0>)
 8000f18:	f002 f8c6 	bl	80030a8 <HAL_TIM_PWM_ConfigChannel>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000f22:	f7ff fcf1 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f26:	4803      	ldr	r0, [pc, #12]	@ (8000f34 <MX_TIM4_Init+0xc0>)
 8000f28:	f000 f854 	bl	8000fd4 <HAL_TIM_MspPostInit>

}
 8000f2c:	bf00      	nop
 8000f2e:	3728      	adds	r7, #40	@ 0x28
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	2000021c 	.word	0x2000021c
 8000f38:	40000800 	.word	0x40000800

08000f3c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b087      	sub	sp, #28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f4c:	d10e      	bne.n	8000f6c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc8 <HAL_TIM_PWM_MspInit+0x8c>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f56:	4a1c      	ldr	r2, [pc, #112]	@ (8000fc8 <HAL_TIM_PWM_MspInit+0x8c>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc8 <HAL_TIM_PWM_MspInit+0x8c>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000f6a:	e026      	b.n	8000fba <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM3)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a16      	ldr	r2, [pc, #88]	@ (8000fcc <HAL_TIM_PWM_MspInit+0x90>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d10e      	bne.n	8000f94 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	613b      	str	r3, [r7, #16]
 8000f7a:	4b13      	ldr	r3, [pc, #76]	@ (8000fc8 <HAL_TIM_PWM_MspInit+0x8c>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7e:	4a12      	ldr	r2, [pc, #72]	@ (8000fc8 <HAL_TIM_PWM_MspInit+0x8c>)
 8000f80:	f043 0302 	orr.w	r3, r3, #2
 8000f84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f86:	4b10      	ldr	r3, [pc, #64]	@ (8000fc8 <HAL_TIM_PWM_MspInit+0x8c>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	693b      	ldr	r3, [r7, #16]
}
 8000f92:	e012      	b.n	8000fba <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM4)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd0 <HAL_TIM_PWM_MspInit+0x94>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d10d      	bne.n	8000fba <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	4b09      	ldr	r3, [pc, #36]	@ (8000fc8 <HAL_TIM_PWM_MspInit+0x8c>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa6:	4a08      	ldr	r2, [pc, #32]	@ (8000fc8 <HAL_TIM_PWM_MspInit+0x8c>)
 8000fa8:	f043 0304 	orr.w	r3, r3, #4
 8000fac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fae:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <HAL_TIM_PWM_MspInit+0x8c>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb2:	f003 0304 	and.w	r3, r3, #4
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
}
 8000fba:	bf00      	nop
 8000fbc:	371c      	adds	r7, #28
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40000400 	.word	0x40000400
 8000fd0:	40000800 	.word	0x40000800

08000fd4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08c      	sub	sp, #48	@ 0x30
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 031c 	add.w	r3, r7, #28
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ff4:	d13d      	bne.n	8001072 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61bb      	str	r3, [r7, #24]
 8000ffa:	4b52      	ldr	r3, [pc, #328]	@ (8001144 <HAL_TIM_MspPostInit+0x170>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	4a51      	ldr	r2, [pc, #324]	@ (8001144 <HAL_TIM_MspPostInit+0x170>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6313      	str	r3, [r2, #48]	@ 0x30
 8001006:	4b4f      	ldr	r3, [pc, #316]	@ (8001144 <HAL_TIM_MspPostInit+0x170>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	61bb      	str	r3, [r7, #24]
 8001010:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	4b4b      	ldr	r3, [pc, #300]	@ (8001144 <HAL_TIM_MspPostInit+0x170>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101a:	4a4a      	ldr	r2, [pc, #296]	@ (8001144 <HAL_TIM_MspPostInit+0x170>)
 800101c:	f043 0302 	orr.w	r3, r3, #2
 8001020:	6313      	str	r3, [r2, #48]	@ 0x30
 8001022:	4b48      	ldr	r3, [pc, #288]	@ (8001144 <HAL_TIM_MspPostInit+0x170>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	697b      	ldr	r3, [r7, #20]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB2     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800102e:	2303      	movs	r3, #3
 8001030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2300      	movs	r3, #0
 800103c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800103e:	2301      	movs	r3, #1
 8001040:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001042:	f107 031c 	add.w	r3, r7, #28
 8001046:	4619      	mov	r1, r3
 8001048:	483f      	ldr	r0, [pc, #252]	@ (8001148 <HAL_TIM_MspPostInit+0x174>)
 800104a:	f000 fdb3 	bl	8001bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 800104e:	f240 4304 	movw	r3, #1028	@ 0x404
 8001052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105c:	2300      	movs	r3, #0
 800105e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001060:	2301      	movs	r3, #1
 8001062:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001064:	f107 031c 	add.w	r3, r7, #28
 8001068:	4619      	mov	r1, r3
 800106a:	4838      	ldr	r0, [pc, #224]	@ (800114c <HAL_TIM_MspPostInit+0x178>)
 800106c:	f000 fda2 	bl	8001bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001070:	e064      	b.n	800113c <HAL_TIM_MspPostInit+0x168>
  else if(timHandle->Instance==TIM3)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a36      	ldr	r2, [pc, #216]	@ (8001150 <HAL_TIM_MspPostInit+0x17c>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d13c      	bne.n	80010f6 <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107c:	2300      	movs	r3, #0
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	4b30      	ldr	r3, [pc, #192]	@ (8001144 <HAL_TIM_MspPostInit+0x170>)
 8001082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001084:	4a2f      	ldr	r2, [pc, #188]	@ (8001144 <HAL_TIM_MspPostInit+0x170>)
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	6313      	str	r3, [r2, #48]	@ 0x30
 800108c:	4b2d      	ldr	r3, [pc, #180]	@ (8001144 <HAL_TIM_MspPostInit+0x170>)
 800108e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	4b29      	ldr	r3, [pc, #164]	@ (8001144 <HAL_TIM_MspPostInit+0x170>)
 800109e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a0:	4a28      	ldr	r2, [pc, #160]	@ (8001144 <HAL_TIM_MspPostInit+0x170>)
 80010a2:	f043 0302 	orr.w	r3, r3, #2
 80010a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a8:	4b26      	ldr	r3, [pc, #152]	@ (8001144 <HAL_TIM_MspPostInit+0x170>)
 80010aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010b4:	23c0      	movs	r3, #192	@ 0xc0
 80010b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c0:	2300      	movs	r3, #0
 80010c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010c4:	2302      	movs	r3, #2
 80010c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c8:	f107 031c 	add.w	r3, r7, #28
 80010cc:	4619      	mov	r1, r3
 80010ce:	481e      	ldr	r0, [pc, #120]	@ (8001148 <HAL_TIM_MspPostInit+0x174>)
 80010d0:	f000 fd70 	bl	8001bb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010d4:	2303      	movs	r3, #3
 80010d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	2302      	movs	r3, #2
 80010da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	2300      	movs	r3, #0
 80010e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010e4:	2302      	movs	r3, #2
 80010e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e8:	f107 031c 	add.w	r3, r7, #28
 80010ec:	4619      	mov	r1, r3
 80010ee:	4817      	ldr	r0, [pc, #92]	@ (800114c <HAL_TIM_MspPostInit+0x178>)
 80010f0:	f000 fd60 	bl	8001bb4 <HAL_GPIO_Init>
}
 80010f4:	e022      	b.n	800113c <HAL_TIM_MspPostInit+0x168>
  else if(timHandle->Instance==TIM4)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a16      	ldr	r2, [pc, #88]	@ (8001154 <HAL_TIM_MspPostInit+0x180>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d11d      	bne.n	800113c <HAL_TIM_MspPostInit+0x168>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001100:	2300      	movs	r3, #0
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	4b0f      	ldr	r3, [pc, #60]	@ (8001144 <HAL_TIM_MspPostInit+0x170>)
 8001106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001108:	4a0e      	ldr	r2, [pc, #56]	@ (8001144 <HAL_TIM_MspPostInit+0x170>)
 800110a:	f043 0302 	orr.w	r3, r3, #2
 800110e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001110:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <HAL_TIM_MspPostInit+0x170>)
 8001112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800111c:	23c0      	movs	r3, #192	@ 0xc0
 800111e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800112c:	2302      	movs	r3, #2
 800112e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001130:	f107 031c 	add.w	r3, r7, #28
 8001134:	4619      	mov	r1, r3
 8001136:	4805      	ldr	r0, [pc, #20]	@ (800114c <HAL_TIM_MspPostInit+0x178>)
 8001138:	f000 fd3c 	bl	8001bb4 <HAL_GPIO_Init>
}
 800113c:	bf00      	nop
 800113e:	3730      	adds	r7, #48	@ 0x30
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40023800 	.word	0x40023800
 8001148:	40020000 	.word	0x40020000
 800114c:	40020400 	.word	0x40020400
 8001150:	40000400 	.word	0x40000400
 8001154:	40000800 	.word	0x40000800

08001158 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800115c:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <MX_USART2_UART_Init+0x4c>)
 800115e:	4a12      	ldr	r2, [pc, #72]	@ (80011a8 <MX_USART2_UART_Init+0x50>)
 8001160:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001162:	4b10      	ldr	r3, [pc, #64]	@ (80011a4 <MX_USART2_UART_Init+0x4c>)
 8001164:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001168:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800116a:	4b0e      	ldr	r3, [pc, #56]	@ (80011a4 <MX_USART2_UART_Init+0x4c>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001170:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <MX_USART2_UART_Init+0x4c>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001176:	4b0b      	ldr	r3, [pc, #44]	@ (80011a4 <MX_USART2_UART_Init+0x4c>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800117c:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <MX_USART2_UART_Init+0x4c>)
 800117e:	220c      	movs	r2, #12
 8001180:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001182:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <MX_USART2_UART_Init+0x4c>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001188:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <MX_USART2_UART_Init+0x4c>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800118e:	4805      	ldr	r0, [pc, #20]	@ (80011a4 <MX_USART2_UART_Init+0x4c>)
 8001190:	f002 fb4a 	bl	8003828 <HAL_UART_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800119a:	f7ff fbb5 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000264 	.word	0x20000264
 80011a8:	40004400 	.word	0x40004400

080011ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	@ 0x28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a19      	ldr	r2, [pc, #100]	@ (8001230 <HAL_UART_MspInit+0x84>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d12b      	bne.n	8001226 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	4b18      	ldr	r3, [pc, #96]	@ (8001234 <HAL_UART_MspInit+0x88>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d6:	4a17      	ldr	r2, [pc, #92]	@ (8001234 <HAL_UART_MspInit+0x88>)
 80011d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011de:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <HAL_UART_MspInit+0x88>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <HAL_UART_MspInit+0x88>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	4a10      	ldr	r2, [pc, #64]	@ (8001234 <HAL_UART_MspInit+0x88>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001234 <HAL_UART_MspInit+0x88>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001206:	230c      	movs	r3, #12
 8001208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001212:	2303      	movs	r3, #3
 8001214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001216:	2307      	movs	r3, #7
 8001218:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	4619      	mov	r1, r3
 8001220:	4805      	ldr	r0, [pc, #20]	@ (8001238 <HAL_UART_MspInit+0x8c>)
 8001222:	f000 fcc7 	bl	8001bb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001226:	bf00      	nop
 8001228:	3728      	adds	r7, #40	@ 0x28
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40004400 	.word	0x40004400
 8001234:	40023800 	.word	0x40023800
 8001238:	40020000 	.word	0x40020000

0800123c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800123c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001274 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001240:	f7ff fd12 	bl	8000c68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001244:	480c      	ldr	r0, [pc, #48]	@ (8001278 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001246:	490d      	ldr	r1, [pc, #52]	@ (800127c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001248:	4a0d      	ldr	r2, [pc, #52]	@ (8001280 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800124c:	e002      	b.n	8001254 <LoopCopyDataInit>

0800124e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001252:	3304      	adds	r3, #4

08001254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001258:	d3f9      	bcc.n	800124e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800125a:	4a0a      	ldr	r2, [pc, #40]	@ (8001284 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800125c:	4c0a      	ldr	r4, [pc, #40]	@ (8001288 <LoopFillZerobss+0x22>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001260:	e001      	b.n	8001266 <LoopFillZerobss>

08001262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001264:	3204      	adds	r2, #4

08001266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001268:	d3fb      	bcc.n	8001262 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800126a:	f002 ff87 	bl	800417c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800126e:	f7ff fa73 	bl	8000758 <main>
  bx  lr    
 8001272:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001274:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800127c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001280:	0800420c 	.word	0x0800420c
  ldr r2, =_sbss
 8001284:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001288:	200002b0 	.word	0x200002b0

0800128c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800128c:	e7fe      	b.n	800128c <ADC_IRQHandler>
	...

08001290 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001294:	4b0e      	ldr	r3, [pc, #56]	@ (80012d0 <HAL_Init+0x40>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a0d      	ldr	r2, [pc, #52]	@ (80012d0 <HAL_Init+0x40>)
 800129a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800129e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012a0:	4b0b      	ldr	r3, [pc, #44]	@ (80012d0 <HAL_Init+0x40>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a0a      	ldr	r2, [pc, #40]	@ (80012d0 <HAL_Init+0x40>)
 80012a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012ac:	4b08      	ldr	r3, [pc, #32]	@ (80012d0 <HAL_Init+0x40>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a07      	ldr	r2, [pc, #28]	@ (80012d0 <HAL_Init+0x40>)
 80012b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b8:	2003      	movs	r0, #3
 80012ba:	f000 f94f 	bl	800155c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012be:	2000      	movs	r0, #0
 80012c0:	f000 f808 	bl	80012d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012c4:	f7ff fc6e 	bl	8000ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40023c00 	.word	0x40023c00

080012d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012dc:	4b12      	ldr	r3, [pc, #72]	@ (8001328 <HAL_InitTick+0x54>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b12      	ldr	r3, [pc, #72]	@ (800132c <HAL_InitTick+0x58>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	4619      	mov	r1, r3
 80012e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 f967 	bl	80015c6 <HAL_SYSTICK_Config>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e00e      	b.n	8001320 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b0f      	cmp	r3, #15
 8001306:	d80a      	bhi.n	800131e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001308:	2200      	movs	r2, #0
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	f04f 30ff 	mov.w	r0, #4294967295
 8001310:	f000 f92f 	bl	8001572 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001314:	4a06      	ldr	r2, [pc, #24]	@ (8001330 <HAL_InitTick+0x5c>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800131a:	2300      	movs	r3, #0
 800131c:	e000      	b.n	8001320 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
}
 8001320:	4618      	mov	r0, r3
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000000 	.word	0x20000000
 800132c:	20000008 	.word	0x20000008
 8001330:	20000004 	.word	0x20000004

08001334 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001338:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <HAL_IncTick+0x20>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	461a      	mov	r2, r3
 800133e:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <HAL_IncTick+0x24>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4413      	add	r3, r2
 8001344:	4a04      	ldr	r2, [pc, #16]	@ (8001358 <HAL_IncTick+0x24>)
 8001346:	6013      	str	r3, [r2, #0]
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	20000008 	.word	0x20000008
 8001358:	200002ac 	.word	0x200002ac

0800135c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return uwTick;
 8001360:	4b03      	ldr	r3, [pc, #12]	@ (8001370 <HAL_GetTick+0x14>)
 8001362:	681b      	ldr	r3, [r3, #0]
}
 8001364:	4618      	mov	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	200002ac 	.word	0x200002ac

08001374 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800137c:	f7ff ffee 	bl	800135c <HAL_GetTick>
 8001380:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800138c:	d005      	beq.n	800139a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800138e:	4b0a      	ldr	r3, [pc, #40]	@ (80013b8 <HAL_Delay+0x44>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4413      	add	r3, r2
 8001398:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800139a:	bf00      	nop
 800139c:	f7ff ffde 	bl	800135c <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d8f7      	bhi.n	800139c <HAL_Delay+0x28>
  {
  }
}
 80013ac:	bf00      	nop
 80013ae:	bf00      	nop
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000008 	.word	0x20000008

080013bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001400 <__NVIC_SetPriorityGrouping+0x44>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013d2:	68ba      	ldr	r2, [r7, #8]
 80013d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013d8:	4013      	ands	r3, r2
 80013da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ee:	4a04      	ldr	r2, [pc, #16]	@ (8001400 <__NVIC_SetPriorityGrouping+0x44>)
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	60d3      	str	r3, [r2, #12]
}
 80013f4:	bf00      	nop
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001408:	4b04      	ldr	r3, [pc, #16]	@ (800141c <__NVIC_GetPriorityGrouping+0x18>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	0a1b      	lsrs	r3, r3, #8
 800140e:	f003 0307 	and.w	r3, r3, #7
}
 8001412:	4618      	mov	r0, r3
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	2b00      	cmp	r3, #0
 8001430:	db0b      	blt.n	800144a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	f003 021f 	and.w	r2, r3, #31
 8001438:	4907      	ldr	r1, [pc, #28]	@ (8001458 <__NVIC_EnableIRQ+0x38>)
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	095b      	lsrs	r3, r3, #5
 8001440:	2001      	movs	r0, #1
 8001442:	fa00 f202 	lsl.w	r2, r0, r2
 8001446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000e100 	.word	0xe000e100

0800145c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	6039      	str	r1, [r7, #0]
 8001466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146c:	2b00      	cmp	r3, #0
 800146e:	db0a      	blt.n	8001486 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	b2da      	uxtb	r2, r3
 8001474:	490c      	ldr	r1, [pc, #48]	@ (80014a8 <__NVIC_SetPriority+0x4c>)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	0112      	lsls	r2, r2, #4
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	440b      	add	r3, r1
 8001480:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001484:	e00a      	b.n	800149c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	b2da      	uxtb	r2, r3
 800148a:	4908      	ldr	r1, [pc, #32]	@ (80014ac <__NVIC_SetPriority+0x50>)
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	f003 030f 	and.w	r3, r3, #15
 8001492:	3b04      	subs	r3, #4
 8001494:	0112      	lsls	r2, r2, #4
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	440b      	add	r3, r1
 800149a:	761a      	strb	r2, [r3, #24]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000e100 	.word	0xe000e100
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b089      	sub	sp, #36	@ 0x24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f1c3 0307 	rsb	r3, r3, #7
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	bf28      	it	cs
 80014ce:	2304      	movcs	r3, #4
 80014d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	3304      	adds	r3, #4
 80014d6:	2b06      	cmp	r3, #6
 80014d8:	d902      	bls.n	80014e0 <NVIC_EncodePriority+0x30>
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3b03      	subs	r3, #3
 80014de:	e000      	b.n	80014e2 <NVIC_EncodePriority+0x32>
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e4:	f04f 32ff 	mov.w	r2, #4294967295
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43da      	mvns	r2, r3
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	401a      	ands	r2, r3
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f8:	f04f 31ff 	mov.w	r1, #4294967295
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001502:	43d9      	mvns	r1, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001508:	4313      	orrs	r3, r2
         );
}
 800150a:	4618      	mov	r0, r3
 800150c:	3724      	adds	r7, #36	@ 0x24
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3b01      	subs	r3, #1
 8001524:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001528:	d301      	bcc.n	800152e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800152a:	2301      	movs	r3, #1
 800152c:	e00f      	b.n	800154e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800152e:	4a0a      	ldr	r2, [pc, #40]	@ (8001558 <SysTick_Config+0x40>)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3b01      	subs	r3, #1
 8001534:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001536:	210f      	movs	r1, #15
 8001538:	f04f 30ff 	mov.w	r0, #4294967295
 800153c:	f7ff ff8e 	bl	800145c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001540:	4b05      	ldr	r3, [pc, #20]	@ (8001558 <SysTick_Config+0x40>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001546:	4b04      	ldr	r3, [pc, #16]	@ (8001558 <SysTick_Config+0x40>)
 8001548:	2207      	movs	r2, #7
 800154a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	e000e010 	.word	0xe000e010

0800155c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff ff29 	bl	80013bc <__NVIC_SetPriorityGrouping>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001572:	b580      	push	{r7, lr}
 8001574:	b086      	sub	sp, #24
 8001576:	af00      	add	r7, sp, #0
 8001578:	4603      	mov	r3, r0
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	607a      	str	r2, [r7, #4]
 800157e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001584:	f7ff ff3e 	bl	8001404 <__NVIC_GetPriorityGrouping>
 8001588:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	68b9      	ldr	r1, [r7, #8]
 800158e:	6978      	ldr	r0, [r7, #20]
 8001590:	f7ff ff8e 	bl	80014b0 <NVIC_EncodePriority>
 8001594:	4602      	mov	r2, r0
 8001596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159a:	4611      	mov	r1, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ff5d 	bl	800145c <__NVIC_SetPriority>
}
 80015a2:	bf00      	nop
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	4603      	mov	r3, r0
 80015b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff ff31 	bl	8001420 <__NVIC_EnableIRQ>
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff ffa2 	bl	8001518 <SysTick_Config>
 80015d4:	4603      	mov	r3, r0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80015ec:	f7ff feb6 	bl	800135c <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d101      	bne.n	80015fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e099      	b.n	8001730 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2202      	movs	r2, #2
 8001600:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0201 	bic.w	r2, r2, #1
 800161a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800161c:	e00f      	b.n	800163e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800161e:	f7ff fe9d 	bl	800135c <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b05      	cmp	r3, #5
 800162a:	d908      	bls.n	800163e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2220      	movs	r2, #32
 8001630:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2203      	movs	r2, #3
 8001636:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e078      	b.n	8001730 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1e8      	bne.n	800161e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001654:	697a      	ldr	r2, [r7, #20]
 8001656:	4b38      	ldr	r3, [pc, #224]	@ (8001738 <HAL_DMA_Init+0x158>)
 8001658:	4013      	ands	r3, r2
 800165a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685a      	ldr	r2, [r3, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800166a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001676:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001682:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	4313      	orrs	r3, r2
 800168e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001694:	2b04      	cmp	r3, #4
 8001696:	d107      	bne.n	80016a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a0:	4313      	orrs	r3, r2
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	f023 0307 	bic.w	r3, r3, #7
 80016be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c4:	697a      	ldr	r2, [r7, #20]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	d117      	bne.n	8001702 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	4313      	orrs	r3, r2
 80016da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d00e      	beq.n	8001702 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 f9e9 	bl	8001abc <DMA_CheckFifoParam>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d008      	beq.n	8001702 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2240      	movs	r2, #64	@ 0x40
 80016f4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2201      	movs	r2, #1
 80016fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80016fe:	2301      	movs	r3, #1
 8001700:	e016      	b.n	8001730 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 f9a0 	bl	8001a50 <DMA_CalcBaseAndBitshift>
 8001710:	4603      	mov	r3, r0
 8001712:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001718:	223f      	movs	r2, #63	@ 0x3f
 800171a:	409a      	lsls	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3718      	adds	r7, #24
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	f010803f 	.word	0xf010803f

0800173c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001744:	2300      	movs	r3, #0
 8001746:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001748:	4b8e      	ldr	r3, [pc, #568]	@ (8001984 <HAL_DMA_IRQHandler+0x248>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a8e      	ldr	r2, [pc, #568]	@ (8001988 <HAL_DMA_IRQHandler+0x24c>)
 800174e:	fba2 2303 	umull	r2, r3, r2, r3
 8001752:	0a9b      	lsrs	r3, r3, #10
 8001754:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800175a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001766:	2208      	movs	r2, #8
 8001768:	409a      	lsls	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	4013      	ands	r3, r2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d01a      	beq.n	80017a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	2b00      	cmp	r3, #0
 800177e:	d013      	beq.n	80017a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 0204 	bic.w	r2, r2, #4
 800178e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001794:	2208      	movs	r2, #8
 8001796:	409a      	lsls	r2, r3
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017a0:	f043 0201 	orr.w	r2, r3, #1
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017ac:	2201      	movs	r2, #1
 80017ae:	409a      	lsls	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4013      	ands	r3, r2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d012      	beq.n	80017de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00b      	beq.n	80017de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017ca:	2201      	movs	r2, #1
 80017cc:	409a      	lsls	r2, r3
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017d6:	f043 0202 	orr.w	r2, r3, #2
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017e2:	2204      	movs	r2, #4
 80017e4:	409a      	lsls	r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	4013      	ands	r3, r2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d012      	beq.n	8001814 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d00b      	beq.n	8001814 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001800:	2204      	movs	r2, #4
 8001802:	409a      	lsls	r2, r3
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800180c:	f043 0204 	orr.w	r2, r3, #4
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001818:	2210      	movs	r2, #16
 800181a:	409a      	lsls	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4013      	ands	r3, r2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d043      	beq.n	80018ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	2b00      	cmp	r3, #0
 8001830:	d03c      	beq.n	80018ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001836:	2210      	movs	r2, #16
 8001838:	409a      	lsls	r2, r3
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d018      	beq.n	800187e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d108      	bne.n	800186c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185e:	2b00      	cmp	r3, #0
 8001860:	d024      	beq.n	80018ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	4798      	blx	r3
 800186a:	e01f      	b.n	80018ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001870:	2b00      	cmp	r3, #0
 8001872:	d01b      	beq.n	80018ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	4798      	blx	r3
 800187c:	e016      	b.n	80018ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001888:	2b00      	cmp	r3, #0
 800188a:	d107      	bne.n	800189c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f022 0208 	bic.w	r2, r2, #8
 800189a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018b0:	2220      	movs	r2, #32
 80018b2:	409a      	lsls	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	4013      	ands	r3, r2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 808f 	beq.w	80019dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0310 	and.w	r3, r3, #16
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 8087 	beq.w	80019dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018d2:	2220      	movs	r2, #32
 80018d4:	409a      	lsls	r2, r3
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b05      	cmp	r3, #5
 80018e4:	d136      	bne.n	8001954 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 0216 	bic.w	r2, r2, #22
 80018f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	695a      	ldr	r2, [r3, #20]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001904:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190a:	2b00      	cmp	r3, #0
 800190c:	d103      	bne.n	8001916 <HAL_DMA_IRQHandler+0x1da>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001912:	2b00      	cmp	r3, #0
 8001914:	d007      	beq.n	8001926 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 0208 	bic.w	r2, r2, #8
 8001924:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800192a:	223f      	movs	r2, #63	@ 0x3f
 800192c:	409a      	lsls	r2, r3
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001946:	2b00      	cmp	r3, #0
 8001948:	d07e      	beq.n	8001a48 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	4798      	blx	r3
        }
        return;
 8001952:	e079      	b.n	8001a48 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d01d      	beq.n	800199e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d10d      	bne.n	800198c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001974:	2b00      	cmp	r3, #0
 8001976:	d031      	beq.n	80019dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	4798      	blx	r3
 8001980:	e02c      	b.n	80019dc <HAL_DMA_IRQHandler+0x2a0>
 8001982:	bf00      	nop
 8001984:	20000000 	.word	0x20000000
 8001988:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001990:	2b00      	cmp	r3, #0
 8001992:	d023      	beq.n	80019dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	4798      	blx	r3
 800199c:	e01e      	b.n	80019dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d10f      	bne.n	80019cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 0210 	bic.w	r2, r2, #16
 80019ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d003      	beq.n	80019dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d032      	beq.n	8001a4a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d022      	beq.n	8001a36 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2205      	movs	r2, #5
 80019f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 0201 	bic.w	r2, r2, #1
 8001a06:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d307      	bcc.n	8001a24 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f2      	bne.n	8001a08 <HAL_DMA_IRQHandler+0x2cc>
 8001a22:	e000      	b.n	8001a26 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001a24:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d005      	beq.n	8001a4a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	4798      	blx	r3
 8001a46:	e000      	b.n	8001a4a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a48:	bf00      	nop
    }
  }
}
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	3b10      	subs	r3, #16
 8001a60:	4a14      	ldr	r2, [pc, #80]	@ (8001ab4 <DMA_CalcBaseAndBitshift+0x64>)
 8001a62:	fba2 2303 	umull	r2, r3, r2, r3
 8001a66:	091b      	lsrs	r3, r3, #4
 8001a68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a6a:	4a13      	ldr	r2, [pc, #76]	@ (8001ab8 <DMA_CalcBaseAndBitshift+0x68>)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4413      	add	r3, r2
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	461a      	mov	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2b03      	cmp	r3, #3
 8001a7c:	d909      	bls.n	8001a92 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001a86:	f023 0303 	bic.w	r3, r3, #3
 8001a8a:	1d1a      	adds	r2, r3, #4
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a90:	e007      	b.n	8001aa2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001a9a:	f023 0303 	bic.w	r3, r3, #3
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	aaaaaaab 	.word	0xaaaaaaab
 8001ab8:	080041f4 	.word	0x080041f4

08001abc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001acc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d11f      	bne.n	8001b16 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	2b03      	cmp	r3, #3
 8001ada:	d856      	bhi.n	8001b8a <DMA_CheckFifoParam+0xce>
 8001adc:	a201      	add	r2, pc, #4	@ (adr r2, 8001ae4 <DMA_CheckFifoParam+0x28>)
 8001ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae2:	bf00      	nop
 8001ae4:	08001af5 	.word	0x08001af5
 8001ae8:	08001b07 	.word	0x08001b07
 8001aec:	08001af5 	.word	0x08001af5
 8001af0:	08001b8b 	.word	0x08001b8b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d046      	beq.n	8001b8e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b04:	e043      	b.n	8001b8e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b0a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001b0e:	d140      	bne.n	8001b92 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b14:	e03d      	b.n	8001b92 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b1e:	d121      	bne.n	8001b64 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	2b03      	cmp	r3, #3
 8001b24:	d837      	bhi.n	8001b96 <DMA_CheckFifoParam+0xda>
 8001b26:	a201      	add	r2, pc, #4	@ (adr r2, 8001b2c <DMA_CheckFifoParam+0x70>)
 8001b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b2c:	08001b3d 	.word	0x08001b3d
 8001b30:	08001b43 	.word	0x08001b43
 8001b34:	08001b3d 	.word	0x08001b3d
 8001b38:	08001b55 	.word	0x08001b55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8001b40:	e030      	b.n	8001ba4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b46:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d025      	beq.n	8001b9a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b52:	e022      	b.n	8001b9a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b58:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001b5c:	d11f      	bne.n	8001b9e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b62:	e01c      	b.n	8001b9e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d903      	bls.n	8001b72 <DMA_CheckFifoParam+0xb6>
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2b03      	cmp	r3, #3
 8001b6e:	d003      	beq.n	8001b78 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b70:	e018      	b.n	8001ba4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	73fb      	strb	r3, [r7, #15]
      break;
 8001b76:	e015      	b.n	8001ba4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d00e      	beq.n	8001ba2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	73fb      	strb	r3, [r7, #15]
      break;
 8001b88:	e00b      	b.n	8001ba2 <DMA_CheckFifoParam+0xe6>
      break;
 8001b8a:	bf00      	nop
 8001b8c:	e00a      	b.n	8001ba4 <DMA_CheckFifoParam+0xe8>
      break;
 8001b8e:	bf00      	nop
 8001b90:	e008      	b.n	8001ba4 <DMA_CheckFifoParam+0xe8>
      break;
 8001b92:	bf00      	nop
 8001b94:	e006      	b.n	8001ba4 <DMA_CheckFifoParam+0xe8>
      break;
 8001b96:	bf00      	nop
 8001b98:	e004      	b.n	8001ba4 <DMA_CheckFifoParam+0xe8>
      break;
 8001b9a:	bf00      	nop
 8001b9c:	e002      	b.n	8001ba4 <DMA_CheckFifoParam+0xe8>
      break;   
 8001b9e:	bf00      	nop
 8001ba0:	e000      	b.n	8001ba4 <DMA_CheckFifoParam+0xe8>
      break;
 8001ba2:	bf00      	nop
    }
  } 
  
  return status; 
 8001ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop

08001bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b089      	sub	sp, #36	@ 0x24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
 8001bce:	e165      	b.n	8001e9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	4013      	ands	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	f040 8154 	bne.w	8001e96 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f003 0303 	and.w	r3, r3, #3
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d005      	beq.n	8001c06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d130      	bne.n	8001c68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	2203      	movs	r2, #3
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	68da      	ldr	r2, [r3, #12]
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	091b      	lsrs	r3, r3, #4
 8001c52:	f003 0201 	and.w	r2, r3, #1
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 0303 	and.w	r3, r3, #3
 8001c70:	2b03      	cmp	r3, #3
 8001c72:	d017      	beq.n	8001ca4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	2203      	movs	r2, #3
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d123      	bne.n	8001cf8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	08da      	lsrs	r2, r3, #3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3208      	adds	r2, #8
 8001cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	220f      	movs	r2, #15
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	691a      	ldr	r2, [r3, #16]
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	08da      	lsrs	r2, r3, #3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3208      	adds	r2, #8
 8001cf2:	69b9      	ldr	r1, [r7, #24]
 8001cf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	2203      	movs	r2, #3
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 0203 	and.w	r2, r3, #3
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f000 80ae 	beq.w	8001e96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	4b5d      	ldr	r3, [pc, #372]	@ (8001eb4 <HAL_GPIO_Init+0x300>)
 8001d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d42:	4a5c      	ldr	r2, [pc, #368]	@ (8001eb4 <HAL_GPIO_Init+0x300>)
 8001d44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d4a:	4b5a      	ldr	r3, [pc, #360]	@ (8001eb4 <HAL_GPIO_Init+0x300>)
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d56:	4a58      	ldr	r2, [pc, #352]	@ (8001eb8 <HAL_GPIO_Init+0x304>)
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	089b      	lsrs	r3, r3, #2
 8001d5c:	3302      	adds	r3, #2
 8001d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	220f      	movs	r2, #15
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a4f      	ldr	r2, [pc, #316]	@ (8001ebc <HAL_GPIO_Init+0x308>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d025      	beq.n	8001dce <HAL_GPIO_Init+0x21a>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a4e      	ldr	r2, [pc, #312]	@ (8001ec0 <HAL_GPIO_Init+0x30c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d01f      	beq.n	8001dca <HAL_GPIO_Init+0x216>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a4d      	ldr	r2, [pc, #308]	@ (8001ec4 <HAL_GPIO_Init+0x310>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d019      	beq.n	8001dc6 <HAL_GPIO_Init+0x212>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a4c      	ldr	r2, [pc, #304]	@ (8001ec8 <HAL_GPIO_Init+0x314>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d013      	beq.n	8001dc2 <HAL_GPIO_Init+0x20e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a4b      	ldr	r2, [pc, #300]	@ (8001ecc <HAL_GPIO_Init+0x318>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d00d      	beq.n	8001dbe <HAL_GPIO_Init+0x20a>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a4a      	ldr	r2, [pc, #296]	@ (8001ed0 <HAL_GPIO_Init+0x31c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d007      	beq.n	8001dba <HAL_GPIO_Init+0x206>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a49      	ldr	r2, [pc, #292]	@ (8001ed4 <HAL_GPIO_Init+0x320>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d101      	bne.n	8001db6 <HAL_GPIO_Init+0x202>
 8001db2:	2306      	movs	r3, #6
 8001db4:	e00c      	b.n	8001dd0 <HAL_GPIO_Init+0x21c>
 8001db6:	2307      	movs	r3, #7
 8001db8:	e00a      	b.n	8001dd0 <HAL_GPIO_Init+0x21c>
 8001dba:	2305      	movs	r3, #5
 8001dbc:	e008      	b.n	8001dd0 <HAL_GPIO_Init+0x21c>
 8001dbe:	2304      	movs	r3, #4
 8001dc0:	e006      	b.n	8001dd0 <HAL_GPIO_Init+0x21c>
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e004      	b.n	8001dd0 <HAL_GPIO_Init+0x21c>
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	e002      	b.n	8001dd0 <HAL_GPIO_Init+0x21c>
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e000      	b.n	8001dd0 <HAL_GPIO_Init+0x21c>
 8001dce:	2300      	movs	r3, #0
 8001dd0:	69fa      	ldr	r2, [r7, #28]
 8001dd2:	f002 0203 	and.w	r2, r2, #3
 8001dd6:	0092      	lsls	r2, r2, #2
 8001dd8:	4093      	lsls	r3, r2
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001de0:	4935      	ldr	r1, [pc, #212]	@ (8001eb8 <HAL_GPIO_Init+0x304>)
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	089b      	lsrs	r3, r3, #2
 8001de6:	3302      	adds	r3, #2
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dee:	4b3a      	ldr	r3, [pc, #232]	@ (8001ed8 <HAL_GPIO_Init+0x324>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	43db      	mvns	r3, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e12:	4a31      	ldr	r2, [pc, #196]	@ (8001ed8 <HAL_GPIO_Init+0x324>)
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e18:	4b2f      	ldr	r3, [pc, #188]	@ (8001ed8 <HAL_GPIO_Init+0x324>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e3c:	4a26      	ldr	r2, [pc, #152]	@ (8001ed8 <HAL_GPIO_Init+0x324>)
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e42:	4b25      	ldr	r3, [pc, #148]	@ (8001ed8 <HAL_GPIO_Init+0x324>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e66:	4a1c      	ldr	r2, [pc, #112]	@ (8001ed8 <HAL_GPIO_Init+0x324>)
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed8 <HAL_GPIO_Init+0x324>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	43db      	mvns	r3, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e90:	4a11      	ldr	r2, [pc, #68]	@ (8001ed8 <HAL_GPIO_Init+0x324>)
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	61fb      	str	r3, [r7, #28]
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	2b0f      	cmp	r3, #15
 8001ea0:	f67f ae96 	bls.w	8001bd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ea4:	bf00      	nop
 8001ea6:	bf00      	nop
 8001ea8:	3724      	adds	r7, #36	@ 0x24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	40013800 	.word	0x40013800
 8001ebc:	40020000 	.word	0x40020000
 8001ec0:	40020400 	.word	0x40020400
 8001ec4:	40020800 	.word	0x40020800
 8001ec8:	40020c00 	.word	0x40020c00
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40021400 	.word	0x40021400
 8001ed4:	40021800 	.word	0x40021800
 8001ed8:	40013c00 	.word	0x40013c00

08001edc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	807b      	strh	r3, [r7, #2]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001eec:	787b      	ldrb	r3, [r7, #1]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ef2:	887a      	ldrh	r2, [r7, #2]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ef8:	e003      	b.n	8001f02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001efa:	887b      	ldrh	r3, [r7, #2]
 8001efc:	041a      	lsls	r2, r3, #16
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	619a      	str	r2, [r3, #24]
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
	...

08001f10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e12b      	b.n	800217a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d106      	bne.n	8001f3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7fe fbc6 	bl	80006c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2224      	movs	r2, #36	@ 0x24
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0201 	bic.w	r2, r2, #1
 8001f52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f74:	f000 fa02 	bl	800237c <HAL_RCC_GetPCLK1Freq>
 8001f78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	4a81      	ldr	r2, [pc, #516]	@ (8002184 <HAL_I2C_Init+0x274>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d807      	bhi.n	8001f94 <HAL_I2C_Init+0x84>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4a80      	ldr	r2, [pc, #512]	@ (8002188 <HAL_I2C_Init+0x278>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	bf94      	ite	ls
 8001f8c:	2301      	movls	r3, #1
 8001f8e:	2300      	movhi	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	e006      	b.n	8001fa2 <HAL_I2C_Init+0x92>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4a7d      	ldr	r2, [pc, #500]	@ (800218c <HAL_I2C_Init+0x27c>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	bf94      	ite	ls
 8001f9c:	2301      	movls	r3, #1
 8001f9e:	2300      	movhi	r3, #0
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e0e7      	b.n	800217a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4a78      	ldr	r2, [pc, #480]	@ (8002190 <HAL_I2C_Init+0x280>)
 8001fae:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb2:	0c9b      	lsrs	r3, r3, #18
 8001fb4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	4a6a      	ldr	r2, [pc, #424]	@ (8002184 <HAL_I2C_Init+0x274>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d802      	bhi.n	8001fe4 <HAL_I2C_Init+0xd4>
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	e009      	b.n	8001ff8 <HAL_I2C_Init+0xe8>
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001fea:	fb02 f303 	mul.w	r3, r2, r3
 8001fee:	4a69      	ldr	r2, [pc, #420]	@ (8002194 <HAL_I2C_Init+0x284>)
 8001ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff4:	099b      	lsrs	r3, r3, #6
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6812      	ldr	r2, [r2, #0]
 8001ffc:	430b      	orrs	r3, r1
 8001ffe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800200a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	495c      	ldr	r1, [pc, #368]	@ (8002184 <HAL_I2C_Init+0x274>)
 8002014:	428b      	cmp	r3, r1
 8002016:	d819      	bhi.n	800204c <HAL_I2C_Init+0x13c>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	1e59      	subs	r1, r3, #1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	fbb1 f3f3 	udiv	r3, r1, r3
 8002026:	1c59      	adds	r1, r3, #1
 8002028:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800202c:	400b      	ands	r3, r1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00a      	beq.n	8002048 <HAL_I2C_Init+0x138>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	1e59      	subs	r1, r3, #1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002040:	3301      	adds	r3, #1
 8002042:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002046:	e051      	b.n	80020ec <HAL_I2C_Init+0x1dc>
 8002048:	2304      	movs	r3, #4
 800204a:	e04f      	b.n	80020ec <HAL_I2C_Init+0x1dc>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d111      	bne.n	8002078 <HAL_I2C_Init+0x168>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	1e58      	subs	r0, r3, #1
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6859      	ldr	r1, [r3, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	440b      	add	r3, r1
 8002062:	fbb0 f3f3 	udiv	r3, r0, r3
 8002066:	3301      	adds	r3, #1
 8002068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800206c:	2b00      	cmp	r3, #0
 800206e:	bf0c      	ite	eq
 8002070:	2301      	moveq	r3, #1
 8002072:	2300      	movne	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	e012      	b.n	800209e <HAL_I2C_Init+0x18e>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	1e58      	subs	r0, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6859      	ldr	r1, [r3, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	0099      	lsls	r1, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	fbb0 f3f3 	udiv	r3, r0, r3
 800208e:	3301      	adds	r3, #1
 8002090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002094:	2b00      	cmp	r3, #0
 8002096:	bf0c      	ite	eq
 8002098:	2301      	moveq	r3, #1
 800209a:	2300      	movne	r3, #0
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_I2C_Init+0x196>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e022      	b.n	80020ec <HAL_I2C_Init+0x1dc>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10e      	bne.n	80020cc <HAL_I2C_Init+0x1bc>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	1e58      	subs	r0, r3, #1
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6859      	ldr	r1, [r3, #4]
 80020b6:	460b      	mov	r3, r1
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	440b      	add	r3, r1
 80020bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80020c0:	3301      	adds	r3, #1
 80020c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020ca:	e00f      	b.n	80020ec <HAL_I2C_Init+0x1dc>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	1e58      	subs	r0, r3, #1
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6859      	ldr	r1, [r3, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	0099      	lsls	r1, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	fbb0 f3f3 	udiv	r3, r0, r3
 80020e2:	3301      	adds	r3, #1
 80020e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	6809      	ldr	r1, [r1, #0]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69da      	ldr	r2, [r3, #28]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800211a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6911      	ldr	r1, [r2, #16]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	68d2      	ldr	r2, [r2, #12]
 8002126:	4311      	orrs	r1, r2
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6812      	ldr	r2, [r2, #0]
 800212c:	430b      	orrs	r3, r1
 800212e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	695a      	ldr	r2, [r3, #20]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	431a      	orrs	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f042 0201 	orr.w	r2, r2, #1
 800215a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2220      	movs	r2, #32
 8002166:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	000186a0 	.word	0x000186a0
 8002188:	001e847f 	.word	0x001e847f
 800218c:	003d08ff 	.word	0x003d08ff
 8002190:	431bde83 	.word	0x431bde83
 8002194:	10624dd3 	.word	0x10624dd3

08002198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e0cc      	b.n	8002346 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021ac:	4b68      	ldr	r3, [pc, #416]	@ (8002350 <HAL_RCC_ClockConfig+0x1b8>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 030f 	and.w	r3, r3, #15
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d90c      	bls.n	80021d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ba:	4b65      	ldr	r3, [pc, #404]	@ (8002350 <HAL_RCC_ClockConfig+0x1b8>)
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c2:	4b63      	ldr	r3, [pc, #396]	@ (8002350 <HAL_RCC_ClockConfig+0x1b8>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d001      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e0b8      	b.n	8002346 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d020      	beq.n	8002222 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021ec:	4b59      	ldr	r3, [pc, #356]	@ (8002354 <HAL_RCC_ClockConfig+0x1bc>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	4a58      	ldr	r2, [pc, #352]	@ (8002354 <HAL_RCC_ClockConfig+0x1bc>)
 80021f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80021f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0308 	and.w	r3, r3, #8
 8002200:	2b00      	cmp	r3, #0
 8002202:	d005      	beq.n	8002210 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002204:	4b53      	ldr	r3, [pc, #332]	@ (8002354 <HAL_RCC_ClockConfig+0x1bc>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	4a52      	ldr	r2, [pc, #328]	@ (8002354 <HAL_RCC_ClockConfig+0x1bc>)
 800220a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800220e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002210:	4b50      	ldr	r3, [pc, #320]	@ (8002354 <HAL_RCC_ClockConfig+0x1bc>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	494d      	ldr	r1, [pc, #308]	@ (8002354 <HAL_RCC_ClockConfig+0x1bc>)
 800221e:	4313      	orrs	r3, r2
 8002220:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d044      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d107      	bne.n	8002246 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002236:	4b47      	ldr	r3, [pc, #284]	@ (8002354 <HAL_RCC_ClockConfig+0x1bc>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d119      	bne.n	8002276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e07f      	b.n	8002346 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b02      	cmp	r3, #2
 800224c:	d003      	beq.n	8002256 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002252:	2b03      	cmp	r3, #3
 8002254:	d107      	bne.n	8002266 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002256:	4b3f      	ldr	r3, [pc, #252]	@ (8002354 <HAL_RCC_ClockConfig+0x1bc>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d109      	bne.n	8002276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e06f      	b.n	8002346 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002266:	4b3b      	ldr	r3, [pc, #236]	@ (8002354 <HAL_RCC_ClockConfig+0x1bc>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e067      	b.n	8002346 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002276:	4b37      	ldr	r3, [pc, #220]	@ (8002354 <HAL_RCC_ClockConfig+0x1bc>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f023 0203 	bic.w	r2, r3, #3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	4934      	ldr	r1, [pc, #208]	@ (8002354 <HAL_RCC_ClockConfig+0x1bc>)
 8002284:	4313      	orrs	r3, r2
 8002286:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002288:	f7ff f868 	bl	800135c <HAL_GetTick>
 800228c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228e:	e00a      	b.n	80022a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002290:	f7ff f864 	bl	800135c <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800229e:	4293      	cmp	r3, r2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e04f      	b.n	8002346 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a6:	4b2b      	ldr	r3, [pc, #172]	@ (8002354 <HAL_RCC_ClockConfig+0x1bc>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 020c 	and.w	r2, r3, #12
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d1eb      	bne.n	8002290 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022b8:	4b25      	ldr	r3, [pc, #148]	@ (8002350 <HAL_RCC_ClockConfig+0x1b8>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 030f 	and.w	r3, r3, #15
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d20c      	bcs.n	80022e0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c6:	4b22      	ldr	r3, [pc, #136]	@ (8002350 <HAL_RCC_ClockConfig+0x1b8>)
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ce:	4b20      	ldr	r3, [pc, #128]	@ (8002350 <HAL_RCC_ClockConfig+0x1b8>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d001      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e032      	b.n	8002346 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d008      	beq.n	80022fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022ec:	4b19      	ldr	r3, [pc, #100]	@ (8002354 <HAL_RCC_ClockConfig+0x1bc>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	4916      	ldr	r1, [pc, #88]	@ (8002354 <HAL_RCC_ClockConfig+0x1bc>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	2b00      	cmp	r3, #0
 8002308:	d009      	beq.n	800231e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800230a:	4b12      	ldr	r3, [pc, #72]	@ (8002354 <HAL_RCC_ClockConfig+0x1bc>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	490e      	ldr	r1, [pc, #56]	@ (8002354 <HAL_RCC_ClockConfig+0x1bc>)
 800231a:	4313      	orrs	r3, r2
 800231c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800231e:	f000 f855 	bl	80023cc <HAL_RCC_GetSysClockFreq>
 8002322:	4602      	mov	r2, r0
 8002324:	4b0b      	ldr	r3, [pc, #44]	@ (8002354 <HAL_RCC_ClockConfig+0x1bc>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	091b      	lsrs	r3, r3, #4
 800232a:	f003 030f 	and.w	r3, r3, #15
 800232e:	490a      	ldr	r1, [pc, #40]	@ (8002358 <HAL_RCC_ClockConfig+0x1c0>)
 8002330:	5ccb      	ldrb	r3, [r1, r3]
 8002332:	fa22 f303 	lsr.w	r3, r2, r3
 8002336:	4a09      	ldr	r2, [pc, #36]	@ (800235c <HAL_RCC_ClockConfig+0x1c4>)
 8002338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800233a:	4b09      	ldr	r3, [pc, #36]	@ (8002360 <HAL_RCC_ClockConfig+0x1c8>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe ffc8 	bl	80012d4 <HAL_InitTick>

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40023c00 	.word	0x40023c00
 8002354:	40023800 	.word	0x40023800
 8002358:	080041dc 	.word	0x080041dc
 800235c:	20000000 	.word	0x20000000
 8002360:	20000004 	.word	0x20000004

08002364 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002368:	4b03      	ldr	r3, [pc, #12]	@ (8002378 <HAL_RCC_GetHCLKFreq+0x14>)
 800236a:	681b      	ldr	r3, [r3, #0]
}
 800236c:	4618      	mov	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	20000000 	.word	0x20000000

0800237c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002380:	f7ff fff0 	bl	8002364 <HAL_RCC_GetHCLKFreq>
 8002384:	4602      	mov	r2, r0
 8002386:	4b05      	ldr	r3, [pc, #20]	@ (800239c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	0a9b      	lsrs	r3, r3, #10
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	4903      	ldr	r1, [pc, #12]	@ (80023a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002392:	5ccb      	ldrb	r3, [r1, r3]
 8002394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002398:	4618      	mov	r0, r3
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40023800 	.word	0x40023800
 80023a0:	080041ec 	.word	0x080041ec

080023a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023a8:	f7ff ffdc 	bl	8002364 <HAL_RCC_GetHCLKFreq>
 80023ac:	4602      	mov	r2, r0
 80023ae:	4b05      	ldr	r3, [pc, #20]	@ (80023c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	0b5b      	lsrs	r3, r3, #13
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	4903      	ldr	r1, [pc, #12]	@ (80023c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023ba:	5ccb      	ldrb	r3, [r1, r3]
 80023bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40023800 	.word	0x40023800
 80023c8:	080041ec 	.word	0x080041ec

080023cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023d0:	b0ae      	sub	sp, #184	@ 0xb8
 80023d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80023da:	2300      	movs	r3, #0
 80023dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80023e0:	2300      	movs	r3, #0
 80023e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023f2:	4bcb      	ldr	r3, [pc, #812]	@ (8002720 <HAL_RCC_GetSysClockFreq+0x354>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 030c 	and.w	r3, r3, #12
 80023fa:	2b0c      	cmp	r3, #12
 80023fc:	f200 8206 	bhi.w	800280c <HAL_RCC_GetSysClockFreq+0x440>
 8002400:	a201      	add	r2, pc, #4	@ (adr r2, 8002408 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002406:	bf00      	nop
 8002408:	0800243d 	.word	0x0800243d
 800240c:	0800280d 	.word	0x0800280d
 8002410:	0800280d 	.word	0x0800280d
 8002414:	0800280d 	.word	0x0800280d
 8002418:	08002445 	.word	0x08002445
 800241c:	0800280d 	.word	0x0800280d
 8002420:	0800280d 	.word	0x0800280d
 8002424:	0800280d 	.word	0x0800280d
 8002428:	0800244d 	.word	0x0800244d
 800242c:	0800280d 	.word	0x0800280d
 8002430:	0800280d 	.word	0x0800280d
 8002434:	0800280d 	.word	0x0800280d
 8002438:	0800263d 	.word	0x0800263d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800243c:	4bb9      	ldr	r3, [pc, #740]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x358>)
 800243e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002442:	e1e7      	b.n	8002814 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002444:	4bb8      	ldr	r3, [pc, #736]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002446:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800244a:	e1e3      	b.n	8002814 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800244c:	4bb4      	ldr	r3, [pc, #720]	@ (8002720 <HAL_RCC_GetSysClockFreq+0x354>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002454:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002458:	4bb1      	ldr	r3, [pc, #708]	@ (8002720 <HAL_RCC_GetSysClockFreq+0x354>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d071      	beq.n	8002548 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002464:	4bae      	ldr	r3, [pc, #696]	@ (8002720 <HAL_RCC_GetSysClockFreq+0x354>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	099b      	lsrs	r3, r3, #6
 800246a:	2200      	movs	r2, #0
 800246c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002470:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002474:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800247c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002480:	2300      	movs	r3, #0
 8002482:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002486:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800248a:	4622      	mov	r2, r4
 800248c:	462b      	mov	r3, r5
 800248e:	f04f 0000 	mov.w	r0, #0
 8002492:	f04f 0100 	mov.w	r1, #0
 8002496:	0159      	lsls	r1, r3, #5
 8002498:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800249c:	0150      	lsls	r0, r2, #5
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	4621      	mov	r1, r4
 80024a4:	1a51      	subs	r1, r2, r1
 80024a6:	6439      	str	r1, [r7, #64]	@ 0x40
 80024a8:	4629      	mov	r1, r5
 80024aa:	eb63 0301 	sbc.w	r3, r3, r1
 80024ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80024b0:	f04f 0200 	mov.w	r2, #0
 80024b4:	f04f 0300 	mov.w	r3, #0
 80024b8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80024bc:	4649      	mov	r1, r9
 80024be:	018b      	lsls	r3, r1, #6
 80024c0:	4641      	mov	r1, r8
 80024c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024c6:	4641      	mov	r1, r8
 80024c8:	018a      	lsls	r2, r1, #6
 80024ca:	4641      	mov	r1, r8
 80024cc:	1a51      	subs	r1, r2, r1
 80024ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80024d0:	4649      	mov	r1, r9
 80024d2:	eb63 0301 	sbc.w	r3, r3, r1
 80024d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024d8:	f04f 0200 	mov.w	r2, #0
 80024dc:	f04f 0300 	mov.w	r3, #0
 80024e0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80024e4:	4649      	mov	r1, r9
 80024e6:	00cb      	lsls	r3, r1, #3
 80024e8:	4641      	mov	r1, r8
 80024ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024ee:	4641      	mov	r1, r8
 80024f0:	00ca      	lsls	r2, r1, #3
 80024f2:	4610      	mov	r0, r2
 80024f4:	4619      	mov	r1, r3
 80024f6:	4603      	mov	r3, r0
 80024f8:	4622      	mov	r2, r4
 80024fa:	189b      	adds	r3, r3, r2
 80024fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80024fe:	462b      	mov	r3, r5
 8002500:	460a      	mov	r2, r1
 8002502:	eb42 0303 	adc.w	r3, r2, r3
 8002506:	637b      	str	r3, [r7, #52]	@ 0x34
 8002508:	f04f 0200 	mov.w	r2, #0
 800250c:	f04f 0300 	mov.w	r3, #0
 8002510:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002514:	4629      	mov	r1, r5
 8002516:	024b      	lsls	r3, r1, #9
 8002518:	4621      	mov	r1, r4
 800251a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800251e:	4621      	mov	r1, r4
 8002520:	024a      	lsls	r2, r1, #9
 8002522:	4610      	mov	r0, r2
 8002524:	4619      	mov	r1, r3
 8002526:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800252a:	2200      	movs	r2, #0
 800252c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002530:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002534:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002538:	f7fd fe6c 	bl	8000214 <__aeabi_uldivmod>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4613      	mov	r3, r2
 8002542:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002546:	e067      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002548:	4b75      	ldr	r3, [pc, #468]	@ (8002720 <HAL_RCC_GetSysClockFreq+0x354>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	099b      	lsrs	r3, r3, #6
 800254e:	2200      	movs	r2, #0
 8002550:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002554:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002558:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800255c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002560:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002562:	2300      	movs	r3, #0
 8002564:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002566:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800256a:	4622      	mov	r2, r4
 800256c:	462b      	mov	r3, r5
 800256e:	f04f 0000 	mov.w	r0, #0
 8002572:	f04f 0100 	mov.w	r1, #0
 8002576:	0159      	lsls	r1, r3, #5
 8002578:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800257c:	0150      	lsls	r0, r2, #5
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	4621      	mov	r1, r4
 8002584:	1a51      	subs	r1, r2, r1
 8002586:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002588:	4629      	mov	r1, r5
 800258a:	eb63 0301 	sbc.w	r3, r3, r1
 800258e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002590:	f04f 0200 	mov.w	r2, #0
 8002594:	f04f 0300 	mov.w	r3, #0
 8002598:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800259c:	4649      	mov	r1, r9
 800259e:	018b      	lsls	r3, r1, #6
 80025a0:	4641      	mov	r1, r8
 80025a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025a6:	4641      	mov	r1, r8
 80025a8:	018a      	lsls	r2, r1, #6
 80025aa:	4641      	mov	r1, r8
 80025ac:	ebb2 0a01 	subs.w	sl, r2, r1
 80025b0:	4649      	mov	r1, r9
 80025b2:	eb63 0b01 	sbc.w	fp, r3, r1
 80025b6:	f04f 0200 	mov.w	r2, #0
 80025ba:	f04f 0300 	mov.w	r3, #0
 80025be:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80025c2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80025c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025ca:	4692      	mov	sl, r2
 80025cc:	469b      	mov	fp, r3
 80025ce:	4623      	mov	r3, r4
 80025d0:	eb1a 0303 	adds.w	r3, sl, r3
 80025d4:	623b      	str	r3, [r7, #32]
 80025d6:	462b      	mov	r3, r5
 80025d8:	eb4b 0303 	adc.w	r3, fp, r3
 80025dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80025de:	f04f 0200 	mov.w	r2, #0
 80025e2:	f04f 0300 	mov.w	r3, #0
 80025e6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80025ea:	4629      	mov	r1, r5
 80025ec:	028b      	lsls	r3, r1, #10
 80025ee:	4621      	mov	r1, r4
 80025f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025f4:	4621      	mov	r1, r4
 80025f6:	028a      	lsls	r2, r1, #10
 80025f8:	4610      	mov	r0, r2
 80025fa:	4619      	mov	r1, r3
 80025fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002600:	2200      	movs	r2, #0
 8002602:	673b      	str	r3, [r7, #112]	@ 0x70
 8002604:	677a      	str	r2, [r7, #116]	@ 0x74
 8002606:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800260a:	f7fd fe03 	bl	8000214 <__aeabi_uldivmod>
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	4613      	mov	r3, r2
 8002614:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002618:	4b41      	ldr	r3, [pc, #260]	@ (8002720 <HAL_RCC_GetSysClockFreq+0x354>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	0c1b      	lsrs	r3, r3, #16
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	3301      	adds	r3, #1
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800262a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800262e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002632:	fbb2 f3f3 	udiv	r3, r2, r3
 8002636:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800263a:	e0eb      	b.n	8002814 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800263c:	4b38      	ldr	r3, [pc, #224]	@ (8002720 <HAL_RCC_GetSysClockFreq+0x354>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002644:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002648:	4b35      	ldr	r3, [pc, #212]	@ (8002720 <HAL_RCC_GetSysClockFreq+0x354>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d06b      	beq.n	800272c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002654:	4b32      	ldr	r3, [pc, #200]	@ (8002720 <HAL_RCC_GetSysClockFreq+0x354>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	099b      	lsrs	r3, r3, #6
 800265a:	2200      	movs	r2, #0
 800265c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800265e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002660:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002666:	663b      	str	r3, [r7, #96]	@ 0x60
 8002668:	2300      	movs	r3, #0
 800266a:	667b      	str	r3, [r7, #100]	@ 0x64
 800266c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002670:	4622      	mov	r2, r4
 8002672:	462b      	mov	r3, r5
 8002674:	f04f 0000 	mov.w	r0, #0
 8002678:	f04f 0100 	mov.w	r1, #0
 800267c:	0159      	lsls	r1, r3, #5
 800267e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002682:	0150      	lsls	r0, r2, #5
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	4621      	mov	r1, r4
 800268a:	1a51      	subs	r1, r2, r1
 800268c:	61b9      	str	r1, [r7, #24]
 800268e:	4629      	mov	r1, r5
 8002690:	eb63 0301 	sbc.w	r3, r3, r1
 8002694:	61fb      	str	r3, [r7, #28]
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	f04f 0300 	mov.w	r3, #0
 800269e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80026a2:	4659      	mov	r1, fp
 80026a4:	018b      	lsls	r3, r1, #6
 80026a6:	4651      	mov	r1, sl
 80026a8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026ac:	4651      	mov	r1, sl
 80026ae:	018a      	lsls	r2, r1, #6
 80026b0:	4651      	mov	r1, sl
 80026b2:	ebb2 0801 	subs.w	r8, r2, r1
 80026b6:	4659      	mov	r1, fp
 80026b8:	eb63 0901 	sbc.w	r9, r3, r1
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	f04f 0300 	mov.w	r3, #0
 80026c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026d0:	4690      	mov	r8, r2
 80026d2:	4699      	mov	r9, r3
 80026d4:	4623      	mov	r3, r4
 80026d6:	eb18 0303 	adds.w	r3, r8, r3
 80026da:	613b      	str	r3, [r7, #16]
 80026dc:	462b      	mov	r3, r5
 80026de:	eb49 0303 	adc.w	r3, r9, r3
 80026e2:	617b      	str	r3, [r7, #20]
 80026e4:	f04f 0200 	mov.w	r2, #0
 80026e8:	f04f 0300 	mov.w	r3, #0
 80026ec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80026f0:	4629      	mov	r1, r5
 80026f2:	024b      	lsls	r3, r1, #9
 80026f4:	4621      	mov	r1, r4
 80026f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026fa:	4621      	mov	r1, r4
 80026fc:	024a      	lsls	r2, r1, #9
 80026fe:	4610      	mov	r0, r2
 8002700:	4619      	mov	r1, r3
 8002702:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002706:	2200      	movs	r2, #0
 8002708:	65bb      	str	r3, [r7, #88]	@ 0x58
 800270a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800270c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002710:	f7fd fd80 	bl	8000214 <__aeabi_uldivmod>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4613      	mov	r3, r2
 800271a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800271e:	e065      	b.n	80027ec <HAL_RCC_GetSysClockFreq+0x420>
 8002720:	40023800 	.word	0x40023800
 8002724:	00f42400 	.word	0x00f42400
 8002728:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800272c:	4b3d      	ldr	r3, [pc, #244]	@ (8002824 <HAL_RCC_GetSysClockFreq+0x458>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	099b      	lsrs	r3, r3, #6
 8002732:	2200      	movs	r2, #0
 8002734:	4618      	mov	r0, r3
 8002736:	4611      	mov	r1, r2
 8002738:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800273c:	653b      	str	r3, [r7, #80]	@ 0x50
 800273e:	2300      	movs	r3, #0
 8002740:	657b      	str	r3, [r7, #84]	@ 0x54
 8002742:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002746:	4642      	mov	r2, r8
 8002748:	464b      	mov	r3, r9
 800274a:	f04f 0000 	mov.w	r0, #0
 800274e:	f04f 0100 	mov.w	r1, #0
 8002752:	0159      	lsls	r1, r3, #5
 8002754:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002758:	0150      	lsls	r0, r2, #5
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
 800275e:	4641      	mov	r1, r8
 8002760:	1a51      	subs	r1, r2, r1
 8002762:	60b9      	str	r1, [r7, #8]
 8002764:	4649      	mov	r1, r9
 8002766:	eb63 0301 	sbc.w	r3, r3, r1
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	f04f 0300 	mov.w	r3, #0
 8002774:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002778:	4659      	mov	r1, fp
 800277a:	018b      	lsls	r3, r1, #6
 800277c:	4651      	mov	r1, sl
 800277e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002782:	4651      	mov	r1, sl
 8002784:	018a      	lsls	r2, r1, #6
 8002786:	4651      	mov	r1, sl
 8002788:	1a54      	subs	r4, r2, r1
 800278a:	4659      	mov	r1, fp
 800278c:	eb63 0501 	sbc.w	r5, r3, r1
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	f04f 0300 	mov.w	r3, #0
 8002798:	00eb      	lsls	r3, r5, #3
 800279a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800279e:	00e2      	lsls	r2, r4, #3
 80027a0:	4614      	mov	r4, r2
 80027a2:	461d      	mov	r5, r3
 80027a4:	4643      	mov	r3, r8
 80027a6:	18e3      	adds	r3, r4, r3
 80027a8:	603b      	str	r3, [r7, #0]
 80027aa:	464b      	mov	r3, r9
 80027ac:	eb45 0303 	adc.w	r3, r5, r3
 80027b0:	607b      	str	r3, [r7, #4]
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	f04f 0300 	mov.w	r3, #0
 80027ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027be:	4629      	mov	r1, r5
 80027c0:	028b      	lsls	r3, r1, #10
 80027c2:	4621      	mov	r1, r4
 80027c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027c8:	4621      	mov	r1, r4
 80027ca:	028a      	lsls	r2, r1, #10
 80027cc:	4610      	mov	r0, r2
 80027ce:	4619      	mov	r1, r3
 80027d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027d4:	2200      	movs	r2, #0
 80027d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027d8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80027da:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80027de:	f7fd fd19 	bl	8000214 <__aeabi_uldivmod>
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	4613      	mov	r3, r2
 80027e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80027ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002824 <HAL_RCC_GetSysClockFreq+0x458>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	0f1b      	lsrs	r3, r3, #28
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80027fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80027fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002802:	fbb2 f3f3 	udiv	r3, r2, r3
 8002806:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800280a:	e003      	b.n	8002814 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800280c:	4b06      	ldr	r3, [pc, #24]	@ (8002828 <HAL_RCC_GetSysClockFreq+0x45c>)
 800280e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002812:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002814:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002818:	4618      	mov	r0, r3
 800281a:	37b8      	adds	r7, #184	@ 0xb8
 800281c:	46bd      	mov	sp, r7
 800281e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002822:	bf00      	nop
 8002824:	40023800 	.word	0x40023800
 8002828:	00f42400 	.word	0x00f42400

0800282c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e28d      	b.n	8002d5a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 8083 	beq.w	8002952 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800284c:	4b94      	ldr	r3, [pc, #592]	@ (8002aa0 <HAL_RCC_OscConfig+0x274>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 030c 	and.w	r3, r3, #12
 8002854:	2b04      	cmp	r3, #4
 8002856:	d019      	beq.n	800288c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002858:	4b91      	ldr	r3, [pc, #580]	@ (8002aa0 <HAL_RCC_OscConfig+0x274>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 030c 	and.w	r3, r3, #12
        || \
 8002860:	2b08      	cmp	r3, #8
 8002862:	d106      	bne.n	8002872 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002864:	4b8e      	ldr	r3, [pc, #568]	@ (8002aa0 <HAL_RCC_OscConfig+0x274>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800286c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002870:	d00c      	beq.n	800288c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002872:	4b8b      	ldr	r3, [pc, #556]	@ (8002aa0 <HAL_RCC_OscConfig+0x274>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800287a:	2b0c      	cmp	r3, #12
 800287c:	d112      	bne.n	80028a4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800287e:	4b88      	ldr	r3, [pc, #544]	@ (8002aa0 <HAL_RCC_OscConfig+0x274>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002886:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800288a:	d10b      	bne.n	80028a4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800288c:	4b84      	ldr	r3, [pc, #528]	@ (8002aa0 <HAL_RCC_OscConfig+0x274>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d05b      	beq.n	8002950 <HAL_RCC_OscConfig+0x124>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d157      	bne.n	8002950 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e25a      	b.n	8002d5a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028ac:	d106      	bne.n	80028bc <HAL_RCC_OscConfig+0x90>
 80028ae:	4b7c      	ldr	r3, [pc, #496]	@ (8002aa0 <HAL_RCC_OscConfig+0x274>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a7b      	ldr	r2, [pc, #492]	@ (8002aa0 <HAL_RCC_OscConfig+0x274>)
 80028b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	e01d      	b.n	80028f8 <HAL_RCC_OscConfig+0xcc>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028c4:	d10c      	bne.n	80028e0 <HAL_RCC_OscConfig+0xb4>
 80028c6:	4b76      	ldr	r3, [pc, #472]	@ (8002aa0 <HAL_RCC_OscConfig+0x274>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a75      	ldr	r2, [pc, #468]	@ (8002aa0 <HAL_RCC_OscConfig+0x274>)
 80028cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	4b73      	ldr	r3, [pc, #460]	@ (8002aa0 <HAL_RCC_OscConfig+0x274>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a72      	ldr	r2, [pc, #456]	@ (8002aa0 <HAL_RCC_OscConfig+0x274>)
 80028d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	e00b      	b.n	80028f8 <HAL_RCC_OscConfig+0xcc>
 80028e0:	4b6f      	ldr	r3, [pc, #444]	@ (8002aa0 <HAL_RCC_OscConfig+0x274>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a6e      	ldr	r2, [pc, #440]	@ (8002aa0 <HAL_RCC_OscConfig+0x274>)
 80028e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028ea:	6013      	str	r3, [r2, #0]
 80028ec:	4b6c      	ldr	r3, [pc, #432]	@ (8002aa0 <HAL_RCC_OscConfig+0x274>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a6b      	ldr	r2, [pc, #428]	@ (8002aa0 <HAL_RCC_OscConfig+0x274>)
 80028f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d013      	beq.n	8002928 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002900:	f7fe fd2c 	bl	800135c <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002908:	f7fe fd28 	bl	800135c <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b64      	cmp	r3, #100	@ 0x64
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e21f      	b.n	8002d5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291a:	4b61      	ldr	r3, [pc, #388]	@ (8002aa0 <HAL_RCC_OscConfig+0x274>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCC_OscConfig+0xdc>
 8002926:	e014      	b.n	8002952 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002928:	f7fe fd18 	bl	800135c <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002930:	f7fe fd14 	bl	800135c <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b64      	cmp	r3, #100	@ 0x64
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e20b      	b.n	8002d5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002942:	4b57      	ldr	r3, [pc, #348]	@ (8002aa0 <HAL_RCC_OscConfig+0x274>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f0      	bne.n	8002930 <HAL_RCC_OscConfig+0x104>
 800294e:	e000      	b.n	8002952 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d06f      	beq.n	8002a3e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800295e:	4b50      	ldr	r3, [pc, #320]	@ (8002aa0 <HAL_RCC_OscConfig+0x274>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 030c 	and.w	r3, r3, #12
 8002966:	2b00      	cmp	r3, #0
 8002968:	d017      	beq.n	800299a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800296a:	4b4d      	ldr	r3, [pc, #308]	@ (8002aa0 <HAL_RCC_OscConfig+0x274>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002972:	2b08      	cmp	r3, #8
 8002974:	d105      	bne.n	8002982 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002976:	4b4a      	ldr	r3, [pc, #296]	@ (8002aa0 <HAL_RCC_OscConfig+0x274>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00b      	beq.n	800299a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002982:	4b47      	ldr	r3, [pc, #284]	@ (8002aa0 <HAL_RCC_OscConfig+0x274>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800298a:	2b0c      	cmp	r3, #12
 800298c:	d11c      	bne.n	80029c8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800298e:	4b44      	ldr	r3, [pc, #272]	@ (8002aa0 <HAL_RCC_OscConfig+0x274>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d116      	bne.n	80029c8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800299a:	4b41      	ldr	r3, [pc, #260]	@ (8002aa0 <HAL_RCC_OscConfig+0x274>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d005      	beq.n	80029b2 <HAL_RCC_OscConfig+0x186>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d001      	beq.n	80029b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e1d3      	b.n	8002d5a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b2:	4b3b      	ldr	r3, [pc, #236]	@ (8002aa0 <HAL_RCC_OscConfig+0x274>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4937      	ldr	r1, [pc, #220]	@ (8002aa0 <HAL_RCC_OscConfig+0x274>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c6:	e03a      	b.n	8002a3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d020      	beq.n	8002a12 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029d0:	4b34      	ldr	r3, [pc, #208]	@ (8002aa4 <HAL_RCC_OscConfig+0x278>)
 80029d2:	2201      	movs	r2, #1
 80029d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d6:	f7fe fcc1 	bl	800135c <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029de:	f7fe fcbd 	bl	800135c <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e1b4      	b.n	8002d5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f0:	4b2b      	ldr	r3, [pc, #172]	@ (8002aa0 <HAL_RCC_OscConfig+0x274>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0f0      	beq.n	80029de <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fc:	4b28      	ldr	r3, [pc, #160]	@ (8002aa0 <HAL_RCC_OscConfig+0x274>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	4925      	ldr	r1, [pc, #148]	@ (8002aa0 <HAL_RCC_OscConfig+0x274>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	600b      	str	r3, [r1, #0]
 8002a10:	e015      	b.n	8002a3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a12:	4b24      	ldr	r3, [pc, #144]	@ (8002aa4 <HAL_RCC_OscConfig+0x278>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a18:	f7fe fca0 	bl	800135c <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a20:	f7fe fc9c 	bl	800135c <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e193      	b.n	8002d5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a32:	4b1b      	ldr	r3, [pc, #108]	@ (8002aa0 <HAL_RCC_OscConfig+0x274>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f0      	bne.n	8002a20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d036      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d016      	beq.n	8002a80 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a52:	4b15      	ldr	r3, [pc, #84]	@ (8002aa8 <HAL_RCC_OscConfig+0x27c>)
 8002a54:	2201      	movs	r2, #1
 8002a56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a58:	f7fe fc80 	bl	800135c <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a60:	f7fe fc7c 	bl	800135c <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e173      	b.n	8002d5a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a72:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa0 <HAL_RCC_OscConfig+0x274>)
 8002a74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0f0      	beq.n	8002a60 <HAL_RCC_OscConfig+0x234>
 8002a7e:	e01b      	b.n	8002ab8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a80:	4b09      	ldr	r3, [pc, #36]	@ (8002aa8 <HAL_RCC_OscConfig+0x27c>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a86:	f7fe fc69 	bl	800135c <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a8c:	e00e      	b.n	8002aac <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a8e:	f7fe fc65 	bl	800135c <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d907      	bls.n	8002aac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e15c      	b.n	8002d5a <HAL_RCC_OscConfig+0x52e>
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	42470000 	.word	0x42470000
 8002aa8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aac:	4b8a      	ldr	r3, [pc, #552]	@ (8002cd8 <HAL_RCC_OscConfig+0x4ac>)
 8002aae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1ea      	bne.n	8002a8e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 8097 	beq.w	8002bf4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aca:	4b83      	ldr	r3, [pc, #524]	@ (8002cd8 <HAL_RCC_OscConfig+0x4ac>)
 8002acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10f      	bne.n	8002af6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60bb      	str	r3, [r7, #8]
 8002ada:	4b7f      	ldr	r3, [pc, #508]	@ (8002cd8 <HAL_RCC_OscConfig+0x4ac>)
 8002adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ade:	4a7e      	ldr	r2, [pc, #504]	@ (8002cd8 <HAL_RCC_OscConfig+0x4ac>)
 8002ae0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ae4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ae6:	4b7c      	ldr	r3, [pc, #496]	@ (8002cd8 <HAL_RCC_OscConfig+0x4ac>)
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aee:	60bb      	str	r3, [r7, #8]
 8002af0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002af2:	2301      	movs	r3, #1
 8002af4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af6:	4b79      	ldr	r3, [pc, #484]	@ (8002cdc <HAL_RCC_OscConfig+0x4b0>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d118      	bne.n	8002b34 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b02:	4b76      	ldr	r3, [pc, #472]	@ (8002cdc <HAL_RCC_OscConfig+0x4b0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a75      	ldr	r2, [pc, #468]	@ (8002cdc <HAL_RCC_OscConfig+0x4b0>)
 8002b08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b0e:	f7fe fc25 	bl	800135c <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b14:	e008      	b.n	8002b28 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b16:	f7fe fc21 	bl	800135c <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e118      	b.n	8002d5a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b28:	4b6c      	ldr	r3, [pc, #432]	@ (8002cdc <HAL_RCC_OscConfig+0x4b0>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d0f0      	beq.n	8002b16 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d106      	bne.n	8002b4a <HAL_RCC_OscConfig+0x31e>
 8002b3c:	4b66      	ldr	r3, [pc, #408]	@ (8002cd8 <HAL_RCC_OscConfig+0x4ac>)
 8002b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b40:	4a65      	ldr	r2, [pc, #404]	@ (8002cd8 <HAL_RCC_OscConfig+0x4ac>)
 8002b42:	f043 0301 	orr.w	r3, r3, #1
 8002b46:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b48:	e01c      	b.n	8002b84 <HAL_RCC_OscConfig+0x358>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	2b05      	cmp	r3, #5
 8002b50:	d10c      	bne.n	8002b6c <HAL_RCC_OscConfig+0x340>
 8002b52:	4b61      	ldr	r3, [pc, #388]	@ (8002cd8 <HAL_RCC_OscConfig+0x4ac>)
 8002b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b56:	4a60      	ldr	r2, [pc, #384]	@ (8002cd8 <HAL_RCC_OscConfig+0x4ac>)
 8002b58:	f043 0304 	orr.w	r3, r3, #4
 8002b5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b5e:	4b5e      	ldr	r3, [pc, #376]	@ (8002cd8 <HAL_RCC_OscConfig+0x4ac>)
 8002b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b62:	4a5d      	ldr	r2, [pc, #372]	@ (8002cd8 <HAL_RCC_OscConfig+0x4ac>)
 8002b64:	f043 0301 	orr.w	r3, r3, #1
 8002b68:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b6a:	e00b      	b.n	8002b84 <HAL_RCC_OscConfig+0x358>
 8002b6c:	4b5a      	ldr	r3, [pc, #360]	@ (8002cd8 <HAL_RCC_OscConfig+0x4ac>)
 8002b6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b70:	4a59      	ldr	r2, [pc, #356]	@ (8002cd8 <HAL_RCC_OscConfig+0x4ac>)
 8002b72:	f023 0301 	bic.w	r3, r3, #1
 8002b76:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b78:	4b57      	ldr	r3, [pc, #348]	@ (8002cd8 <HAL_RCC_OscConfig+0x4ac>)
 8002b7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b7c:	4a56      	ldr	r2, [pc, #344]	@ (8002cd8 <HAL_RCC_OscConfig+0x4ac>)
 8002b7e:	f023 0304 	bic.w	r3, r3, #4
 8002b82:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d015      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b8c:	f7fe fbe6 	bl	800135c <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b92:	e00a      	b.n	8002baa <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b94:	f7fe fbe2 	bl	800135c <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e0d7      	b.n	8002d5a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002baa:	4b4b      	ldr	r3, [pc, #300]	@ (8002cd8 <HAL_RCC_OscConfig+0x4ac>)
 8002bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0ee      	beq.n	8002b94 <HAL_RCC_OscConfig+0x368>
 8002bb6:	e014      	b.n	8002be2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb8:	f7fe fbd0 	bl	800135c <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bbe:	e00a      	b.n	8002bd6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc0:	f7fe fbcc 	bl	800135c <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e0c1      	b.n	8002d5a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd6:	4b40      	ldr	r3, [pc, #256]	@ (8002cd8 <HAL_RCC_OscConfig+0x4ac>)
 8002bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1ee      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002be2:	7dfb      	ldrb	r3, [r7, #23]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d105      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002be8:	4b3b      	ldr	r3, [pc, #236]	@ (8002cd8 <HAL_RCC_OscConfig+0x4ac>)
 8002bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bec:	4a3a      	ldr	r2, [pc, #232]	@ (8002cd8 <HAL_RCC_OscConfig+0x4ac>)
 8002bee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bf2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 80ad 	beq.w	8002d58 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bfe:	4b36      	ldr	r3, [pc, #216]	@ (8002cd8 <HAL_RCC_OscConfig+0x4ac>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 030c 	and.w	r3, r3, #12
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d060      	beq.n	8002ccc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d145      	bne.n	8002c9e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c12:	4b33      	ldr	r3, [pc, #204]	@ (8002ce0 <HAL_RCC_OscConfig+0x4b4>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c18:	f7fe fba0 	bl	800135c <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c20:	f7fe fb9c 	bl	800135c <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e093      	b.n	8002d5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c32:	4b29      	ldr	r3, [pc, #164]	@ (8002cd8 <HAL_RCC_OscConfig+0x4ac>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f0      	bne.n	8002c20 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69da      	ldr	r2, [r3, #28]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4c:	019b      	lsls	r3, r3, #6
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c54:	085b      	lsrs	r3, r3, #1
 8002c56:	3b01      	subs	r3, #1
 8002c58:	041b      	lsls	r3, r3, #16
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c60:	061b      	lsls	r3, r3, #24
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c68:	071b      	lsls	r3, r3, #28
 8002c6a:	491b      	ldr	r1, [pc, #108]	@ (8002cd8 <HAL_RCC_OscConfig+0x4ac>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c70:	4b1b      	ldr	r3, [pc, #108]	@ (8002ce0 <HAL_RCC_OscConfig+0x4b4>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c76:	f7fe fb71 	bl	800135c <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c7c:	e008      	b.n	8002c90 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c7e:	f7fe fb6d 	bl	800135c <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e064      	b.n	8002d5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c90:	4b11      	ldr	r3, [pc, #68]	@ (8002cd8 <HAL_RCC_OscConfig+0x4ac>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0f0      	beq.n	8002c7e <HAL_RCC_OscConfig+0x452>
 8002c9c:	e05c      	b.n	8002d58 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ce0 <HAL_RCC_OscConfig+0x4b4>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca4:	f7fe fb5a 	bl	800135c <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cac:	f7fe fb56 	bl	800135c <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e04d      	b.n	8002d5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cbe:	4b06      	ldr	r3, [pc, #24]	@ (8002cd8 <HAL_RCC_OscConfig+0x4ac>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0x480>
 8002cca:	e045      	b.n	8002d58 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d107      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e040      	b.n	8002d5a <HAL_RCC_OscConfig+0x52e>
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	40007000 	.word	0x40007000
 8002ce0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ce4:	4b1f      	ldr	r3, [pc, #124]	@ (8002d64 <HAL_RCC_OscConfig+0x538>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d030      	beq.n	8002d54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d129      	bne.n	8002d54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d122      	bne.n	8002d54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d14:	4013      	ands	r3, r2
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d119      	bne.n	8002d54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d2a:	085b      	lsrs	r3, r3, #1
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d10f      	bne.n	8002d54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d107      	bne.n	8002d54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d4e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d001      	beq.n	8002d58 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e000      	b.n	8002d5a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3718      	adds	r7, #24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40023800 	.word	0x40023800

08002d68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e07b      	b.n	8002e72 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d108      	bne.n	8002d94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d8a:	d009      	beq.n	8002da0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	61da      	str	r2, [r3, #28]
 8002d92:	e005      	b.n	8002da0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7fd fe12 	bl	80009e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dd6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002de8:	431a      	orrs	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e10:	431a      	orrs	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e24:	ea42 0103 	orr.w	r1, r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	0c1b      	lsrs	r3, r3, #16
 8002e3e:	f003 0104 	and.w	r1, r3, #4
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e46:	f003 0210 	and.w	r2, r3, #16
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	69da      	ldr	r2, [r3, #28]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b082      	sub	sp, #8
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e041      	b.n	8002f10 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d106      	bne.n	8002ea6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7fe f84b 	bl	8000f3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4610      	mov	r0, r2
 8002eba:	f000 f9b7 	bl	800322c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d109      	bne.n	8002f3c <HAL_TIM_PWM_Start+0x24>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	bf14      	ite	ne
 8002f34:	2301      	movne	r3, #1
 8002f36:	2300      	moveq	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	e022      	b.n	8002f82 <HAL_TIM_PWM_Start+0x6a>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d109      	bne.n	8002f56 <HAL_TIM_PWM_Start+0x3e>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	bf14      	ite	ne
 8002f4e:	2301      	movne	r3, #1
 8002f50:	2300      	moveq	r3, #0
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	e015      	b.n	8002f82 <HAL_TIM_PWM_Start+0x6a>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d109      	bne.n	8002f70 <HAL_TIM_PWM_Start+0x58>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	bf14      	ite	ne
 8002f68:	2301      	movne	r3, #1
 8002f6a:	2300      	moveq	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	e008      	b.n	8002f82 <HAL_TIM_PWM_Start+0x6a>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	bf14      	ite	ne
 8002f7c:	2301      	movne	r3, #1
 8002f7e:	2300      	moveq	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e07c      	b.n	8003084 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d104      	bne.n	8002f9a <HAL_TIM_PWM_Start+0x82>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2202      	movs	r2, #2
 8002f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f98:	e013      	b.n	8002fc2 <HAL_TIM_PWM_Start+0xaa>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	2b04      	cmp	r3, #4
 8002f9e:	d104      	bne.n	8002faa <HAL_TIM_PWM_Start+0x92>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fa8:	e00b      	b.n	8002fc2 <HAL_TIM_PWM_Start+0xaa>
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	d104      	bne.n	8002fba <HAL_TIM_PWM_Start+0xa2>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fb8:	e003      	b.n	8002fc2 <HAL_TIM_PWM_Start+0xaa>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	6839      	ldr	r1, [r7, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 fb8a 	bl	80036e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a2d      	ldr	r2, [pc, #180]	@ (800308c <HAL_TIM_PWM_Start+0x174>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d004      	beq.n	8002fe4 <HAL_TIM_PWM_Start+0xcc>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a2c      	ldr	r2, [pc, #176]	@ (8003090 <HAL_TIM_PWM_Start+0x178>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d101      	bne.n	8002fe8 <HAL_TIM_PWM_Start+0xd0>
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e000      	b.n	8002fea <HAL_TIM_PWM_Start+0xd2>
 8002fe8:	2300      	movs	r3, #0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d007      	beq.n	8002ffe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ffc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a22      	ldr	r2, [pc, #136]	@ (800308c <HAL_TIM_PWM_Start+0x174>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d022      	beq.n	800304e <HAL_TIM_PWM_Start+0x136>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003010:	d01d      	beq.n	800304e <HAL_TIM_PWM_Start+0x136>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a1f      	ldr	r2, [pc, #124]	@ (8003094 <HAL_TIM_PWM_Start+0x17c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d018      	beq.n	800304e <HAL_TIM_PWM_Start+0x136>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a1d      	ldr	r2, [pc, #116]	@ (8003098 <HAL_TIM_PWM_Start+0x180>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d013      	beq.n	800304e <HAL_TIM_PWM_Start+0x136>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a1c      	ldr	r2, [pc, #112]	@ (800309c <HAL_TIM_PWM_Start+0x184>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d00e      	beq.n	800304e <HAL_TIM_PWM_Start+0x136>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a16      	ldr	r2, [pc, #88]	@ (8003090 <HAL_TIM_PWM_Start+0x178>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d009      	beq.n	800304e <HAL_TIM_PWM_Start+0x136>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a18      	ldr	r2, [pc, #96]	@ (80030a0 <HAL_TIM_PWM_Start+0x188>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d004      	beq.n	800304e <HAL_TIM_PWM_Start+0x136>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a16      	ldr	r2, [pc, #88]	@ (80030a4 <HAL_TIM_PWM_Start+0x18c>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d111      	bne.n	8003072 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2b06      	cmp	r3, #6
 800305e:	d010      	beq.n	8003082 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0201 	orr.w	r2, r2, #1
 800306e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003070:	e007      	b.n	8003082 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f042 0201 	orr.w	r2, r2, #1
 8003080:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40010000 	.word	0x40010000
 8003090:	40010400 	.word	0x40010400
 8003094:	40000400 	.word	0x40000400
 8003098:	40000800 	.word	0x40000800
 800309c:	40000c00 	.word	0x40000c00
 80030a0:	40014000 	.word	0x40014000
 80030a4:	40001800 	.word	0x40001800

080030a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030b4:	2300      	movs	r3, #0
 80030b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d101      	bne.n	80030c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80030c2:	2302      	movs	r3, #2
 80030c4:	e0ae      	b.n	8003224 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b0c      	cmp	r3, #12
 80030d2:	f200 809f 	bhi.w	8003214 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80030d6:	a201      	add	r2, pc, #4	@ (adr r2, 80030dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030dc:	08003111 	.word	0x08003111
 80030e0:	08003215 	.word	0x08003215
 80030e4:	08003215 	.word	0x08003215
 80030e8:	08003215 	.word	0x08003215
 80030ec:	08003151 	.word	0x08003151
 80030f0:	08003215 	.word	0x08003215
 80030f4:	08003215 	.word	0x08003215
 80030f8:	08003215 	.word	0x08003215
 80030fc:	08003193 	.word	0x08003193
 8003100:	08003215 	.word	0x08003215
 8003104:	08003215 	.word	0x08003215
 8003108:	08003215 	.word	0x08003215
 800310c:	080031d3 	.word	0x080031d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68b9      	ldr	r1, [r7, #8]
 8003116:	4618      	mov	r0, r3
 8003118:	f000 f934 	bl	8003384 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	699a      	ldr	r2, [r3, #24]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0208 	orr.w	r2, r2, #8
 800312a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699a      	ldr	r2, [r3, #24]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 0204 	bic.w	r2, r2, #4
 800313a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6999      	ldr	r1, [r3, #24]
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	691a      	ldr	r2, [r3, #16]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	619a      	str	r2, [r3, #24]
      break;
 800314e:	e064      	b.n	800321a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68b9      	ldr	r1, [r7, #8]
 8003156:	4618      	mov	r0, r3
 8003158:	f000 f984 	bl	8003464 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699a      	ldr	r2, [r3, #24]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800316a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699a      	ldr	r2, [r3, #24]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800317a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6999      	ldr	r1, [r3, #24]
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	021a      	lsls	r2, r3, #8
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	619a      	str	r2, [r3, #24]
      break;
 8003190:	e043      	b.n	800321a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68b9      	ldr	r1, [r7, #8]
 8003198:	4618      	mov	r0, r3
 800319a:	f000 f9d9 	bl	8003550 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	69da      	ldr	r2, [r3, #28]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f042 0208 	orr.w	r2, r2, #8
 80031ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	69da      	ldr	r2, [r3, #28]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 0204 	bic.w	r2, r2, #4
 80031bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	69d9      	ldr	r1, [r3, #28]
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	691a      	ldr	r2, [r3, #16]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	61da      	str	r2, [r3, #28]
      break;
 80031d0:	e023      	b.n	800321a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68b9      	ldr	r1, [r7, #8]
 80031d8:	4618      	mov	r0, r3
 80031da:	f000 fa2d 	bl	8003638 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	69da      	ldr	r2, [r3, #28]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	69da      	ldr	r2, [r3, #28]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	69d9      	ldr	r1, [r3, #28]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	021a      	lsls	r2, r3, #8
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	61da      	str	r2, [r3, #28]
      break;
 8003212:	e002      	b.n	800321a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	75fb      	strb	r3, [r7, #23]
      break;
 8003218:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003222:	7dfb      	ldrb	r3, [r7, #23]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3718      	adds	r7, #24
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a46      	ldr	r2, [pc, #280]	@ (8003358 <TIM_Base_SetConfig+0x12c>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d013      	beq.n	800326c <TIM_Base_SetConfig+0x40>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800324a:	d00f      	beq.n	800326c <TIM_Base_SetConfig+0x40>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a43      	ldr	r2, [pc, #268]	@ (800335c <TIM_Base_SetConfig+0x130>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d00b      	beq.n	800326c <TIM_Base_SetConfig+0x40>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a42      	ldr	r2, [pc, #264]	@ (8003360 <TIM_Base_SetConfig+0x134>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d007      	beq.n	800326c <TIM_Base_SetConfig+0x40>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a41      	ldr	r2, [pc, #260]	@ (8003364 <TIM_Base_SetConfig+0x138>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d003      	beq.n	800326c <TIM_Base_SetConfig+0x40>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a40      	ldr	r2, [pc, #256]	@ (8003368 <TIM_Base_SetConfig+0x13c>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d108      	bne.n	800327e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003272:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	4313      	orrs	r3, r2
 800327c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a35      	ldr	r2, [pc, #212]	@ (8003358 <TIM_Base_SetConfig+0x12c>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d02b      	beq.n	80032de <TIM_Base_SetConfig+0xb2>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800328c:	d027      	beq.n	80032de <TIM_Base_SetConfig+0xb2>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a32      	ldr	r2, [pc, #200]	@ (800335c <TIM_Base_SetConfig+0x130>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d023      	beq.n	80032de <TIM_Base_SetConfig+0xb2>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a31      	ldr	r2, [pc, #196]	@ (8003360 <TIM_Base_SetConfig+0x134>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d01f      	beq.n	80032de <TIM_Base_SetConfig+0xb2>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a30      	ldr	r2, [pc, #192]	@ (8003364 <TIM_Base_SetConfig+0x138>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d01b      	beq.n	80032de <TIM_Base_SetConfig+0xb2>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a2f      	ldr	r2, [pc, #188]	@ (8003368 <TIM_Base_SetConfig+0x13c>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d017      	beq.n	80032de <TIM_Base_SetConfig+0xb2>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a2e      	ldr	r2, [pc, #184]	@ (800336c <TIM_Base_SetConfig+0x140>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d013      	beq.n	80032de <TIM_Base_SetConfig+0xb2>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a2d      	ldr	r2, [pc, #180]	@ (8003370 <TIM_Base_SetConfig+0x144>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d00f      	beq.n	80032de <TIM_Base_SetConfig+0xb2>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a2c      	ldr	r2, [pc, #176]	@ (8003374 <TIM_Base_SetConfig+0x148>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d00b      	beq.n	80032de <TIM_Base_SetConfig+0xb2>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a2b      	ldr	r2, [pc, #172]	@ (8003378 <TIM_Base_SetConfig+0x14c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d007      	beq.n	80032de <TIM_Base_SetConfig+0xb2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a2a      	ldr	r2, [pc, #168]	@ (800337c <TIM_Base_SetConfig+0x150>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d003      	beq.n	80032de <TIM_Base_SetConfig+0xb2>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a29      	ldr	r2, [pc, #164]	@ (8003380 <TIM_Base_SetConfig+0x154>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d108      	bne.n	80032f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	689a      	ldr	r2, [r3, #8]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a10      	ldr	r2, [pc, #64]	@ (8003358 <TIM_Base_SetConfig+0x12c>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d003      	beq.n	8003324 <TIM_Base_SetConfig+0xf8>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a12      	ldr	r2, [pc, #72]	@ (8003368 <TIM_Base_SetConfig+0x13c>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d103      	bne.n	800332c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	691a      	ldr	r2, [r3, #16]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b01      	cmp	r3, #1
 800333c:	d105      	bne.n	800334a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	f023 0201 	bic.w	r2, r3, #1
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	611a      	str	r2, [r3, #16]
  }
}
 800334a:	bf00      	nop
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	40010000 	.word	0x40010000
 800335c:	40000400 	.word	0x40000400
 8003360:	40000800 	.word	0x40000800
 8003364:	40000c00 	.word	0x40000c00
 8003368:	40010400 	.word	0x40010400
 800336c:	40014000 	.word	0x40014000
 8003370:	40014400 	.word	0x40014400
 8003374:	40014800 	.word	0x40014800
 8003378:	40001800 	.word	0x40001800
 800337c:	40001c00 	.word	0x40001c00
 8003380:	40002000 	.word	0x40002000

08003384 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003384:	b480      	push	{r7}
 8003386:	b087      	sub	sp, #28
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	f023 0201 	bic.w	r2, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f023 0303 	bic.w	r3, r3, #3
 80033ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f023 0302 	bic.w	r3, r3, #2
 80033cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a20      	ldr	r2, [pc, #128]	@ (800345c <TIM_OC1_SetConfig+0xd8>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d003      	beq.n	80033e8 <TIM_OC1_SetConfig+0x64>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a1f      	ldr	r2, [pc, #124]	@ (8003460 <TIM_OC1_SetConfig+0xdc>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d10c      	bne.n	8003402 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	f023 0308 	bic.w	r3, r3, #8
 80033ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f023 0304 	bic.w	r3, r3, #4
 8003400:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a15      	ldr	r2, [pc, #84]	@ (800345c <TIM_OC1_SetConfig+0xd8>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d003      	beq.n	8003412 <TIM_OC1_SetConfig+0x8e>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a14      	ldr	r2, [pc, #80]	@ (8003460 <TIM_OC1_SetConfig+0xdc>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d111      	bne.n	8003436 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003418:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003420:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	4313      	orrs	r3, r2
 800342a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	4313      	orrs	r3, r2
 8003434:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	621a      	str	r2, [r3, #32]
}
 8003450:	bf00      	nop
 8003452:	371c      	adds	r7, #28
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	40010000 	.word	0x40010000
 8003460:	40010400 	.word	0x40010400

08003464 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003464:	b480      	push	{r7}
 8003466:	b087      	sub	sp, #28
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	f023 0210 	bic.w	r2, r3, #16
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800349a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	021b      	lsls	r3, r3, #8
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f023 0320 	bic.w	r3, r3, #32
 80034ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a22      	ldr	r2, [pc, #136]	@ (8003548 <TIM_OC2_SetConfig+0xe4>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d003      	beq.n	80034cc <TIM_OC2_SetConfig+0x68>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a21      	ldr	r2, [pc, #132]	@ (800354c <TIM_OC2_SetConfig+0xe8>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d10d      	bne.n	80034e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	4313      	orrs	r3, r2
 80034de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a17      	ldr	r2, [pc, #92]	@ (8003548 <TIM_OC2_SetConfig+0xe4>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d003      	beq.n	80034f8 <TIM_OC2_SetConfig+0x94>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a16      	ldr	r2, [pc, #88]	@ (800354c <TIM_OC2_SetConfig+0xe8>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d113      	bne.n	8003520 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003506:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	4313      	orrs	r3, r2
 8003512:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	4313      	orrs	r3, r2
 800351e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	621a      	str	r2, [r3, #32]
}
 800353a:	bf00      	nop
 800353c:	371c      	adds	r7, #28
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	40010000 	.word	0x40010000
 800354c:	40010400 	.word	0x40010400

08003550 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003550:	b480      	push	{r7}
 8003552:	b087      	sub	sp, #28
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800357e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f023 0303 	bic.w	r3, r3, #3
 8003586:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	4313      	orrs	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003598:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	021b      	lsls	r3, r3, #8
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a21      	ldr	r2, [pc, #132]	@ (8003630 <TIM_OC3_SetConfig+0xe0>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d003      	beq.n	80035b6 <TIM_OC3_SetConfig+0x66>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a20      	ldr	r2, [pc, #128]	@ (8003634 <TIM_OC3_SetConfig+0xe4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d10d      	bne.n	80035d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80035bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	021b      	lsls	r3, r3, #8
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80035d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a16      	ldr	r2, [pc, #88]	@ (8003630 <TIM_OC3_SetConfig+0xe0>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d003      	beq.n	80035e2 <TIM_OC3_SetConfig+0x92>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a15      	ldr	r2, [pc, #84]	@ (8003634 <TIM_OC3_SetConfig+0xe4>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d113      	bne.n	800360a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80035e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80035f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	621a      	str	r2, [r3, #32]
}
 8003624:	bf00      	nop
 8003626:	371c      	adds	r7, #28
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr
 8003630:	40010000 	.word	0x40010000
 8003634:	40010400 	.word	0x40010400

08003638 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800366e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	021b      	lsls	r3, r3, #8
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	4313      	orrs	r3, r2
 800367a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003682:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	031b      	lsls	r3, r3, #12
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	4313      	orrs	r3, r2
 800368e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a12      	ldr	r2, [pc, #72]	@ (80036dc <TIM_OC4_SetConfig+0xa4>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d003      	beq.n	80036a0 <TIM_OC4_SetConfig+0x68>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a11      	ldr	r2, [pc, #68]	@ (80036e0 <TIM_OC4_SetConfig+0xa8>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d109      	bne.n	80036b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	019b      	lsls	r3, r3, #6
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	621a      	str	r2, [r3, #32]
}
 80036ce:	bf00      	nop
 80036d0:	371c      	adds	r7, #28
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	40010000 	.word	0x40010000
 80036e0:	40010400 	.word	0x40010400

080036e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b087      	sub	sp, #28
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	f003 031f 	and.w	r3, r3, #31
 80036f6:	2201      	movs	r2, #1
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6a1a      	ldr	r2, [r3, #32]
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	43db      	mvns	r3, r3
 8003706:	401a      	ands	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6a1a      	ldr	r2, [r3, #32]
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	f003 031f 	and.w	r3, r3, #31
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	fa01 f303 	lsl.w	r3, r1, r3
 800371c:	431a      	orrs	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	621a      	str	r2, [r3, #32]
}
 8003722:	bf00      	nop
 8003724:	371c      	adds	r7, #28
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
	...

08003730 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003740:	2b01      	cmp	r3, #1
 8003742:	d101      	bne.n	8003748 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003744:	2302      	movs	r3, #2
 8003746:	e05a      	b.n	80037fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2202      	movs	r2, #2
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800376e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	4313      	orrs	r3, r2
 8003778:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a21      	ldr	r2, [pc, #132]	@ (800380c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d022      	beq.n	80037d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003794:	d01d      	beq.n	80037d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a1d      	ldr	r2, [pc, #116]	@ (8003810 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d018      	beq.n	80037d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a1b      	ldr	r2, [pc, #108]	@ (8003814 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d013      	beq.n	80037d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a1a      	ldr	r2, [pc, #104]	@ (8003818 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d00e      	beq.n	80037d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a18      	ldr	r2, [pc, #96]	@ (800381c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d009      	beq.n	80037d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a17      	ldr	r2, [pc, #92]	@ (8003820 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d004      	beq.n	80037d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a15      	ldr	r2, [pc, #84]	@ (8003824 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d10c      	bne.n	80037ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	40010000 	.word	0x40010000
 8003810:	40000400 	.word	0x40000400
 8003814:	40000800 	.word	0x40000800
 8003818:	40000c00 	.word	0x40000c00
 800381c:	40010400 	.word	0x40010400
 8003820:	40014000 	.word	0x40014000
 8003824:	40001800 	.word	0x40001800

08003828 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e042      	b.n	80038c0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d106      	bne.n	8003854 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7fd fcac 	bl	80011ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2224      	movs	r2, #36	@ 0x24
 8003858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68da      	ldr	r2, [r3, #12]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800386a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 fa09 	bl	8003c84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	691a      	ldr	r2, [r3, #16]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003880:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	695a      	ldr	r2, [r3, #20]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003890:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68da      	ldr	r2, [r3, #12]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2220      	movs	r2, #32
 80038ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2220      	movs	r2, #32
 80038b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b08a      	sub	sp, #40	@ 0x28
 80038cc:	af02      	add	r7, sp, #8
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	603b      	str	r3, [r7, #0]
 80038d4:	4613      	mov	r3, r2
 80038d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b20      	cmp	r3, #32
 80038e6:	d175      	bne.n	80039d4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d002      	beq.n	80038f4 <HAL_UART_Transmit+0x2c>
 80038ee:	88fb      	ldrh	r3, [r7, #6]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e06e      	b.n	80039d6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2221      	movs	r2, #33	@ 0x21
 8003902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003906:	f7fd fd29 	bl	800135c <HAL_GetTick>
 800390a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	88fa      	ldrh	r2, [r7, #6]
 8003910:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	88fa      	ldrh	r2, [r7, #6]
 8003916:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003920:	d108      	bne.n	8003934 <HAL_UART_Transmit+0x6c>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d104      	bne.n	8003934 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800392a:	2300      	movs	r3, #0
 800392c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	61bb      	str	r3, [r7, #24]
 8003932:	e003      	b.n	800393c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003938:	2300      	movs	r3, #0
 800393a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800393c:	e02e      	b.n	800399c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2200      	movs	r2, #0
 8003946:	2180      	movs	r1, #128	@ 0x80
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 f8df 	bl	8003b0c <UART_WaitOnFlagUntilTimeout>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d005      	beq.n	8003960 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2220      	movs	r2, #32
 8003958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e03a      	b.n	80039d6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10b      	bne.n	800397e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	881b      	ldrh	r3, [r3, #0]
 800396a:	461a      	mov	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003974:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	3302      	adds	r3, #2
 800397a:	61bb      	str	r3, [r7, #24]
 800397c:	e007      	b.n	800398e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	781a      	ldrb	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	3301      	adds	r3, #1
 800398c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003992:	b29b      	uxth	r3, r3
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1cb      	bne.n	800393e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	2200      	movs	r2, #0
 80039ae:	2140      	movs	r1, #64	@ 0x40
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 f8ab 	bl	8003b0c <UART_WaitOnFlagUntilTimeout>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d005      	beq.n	80039c8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e006      	b.n	80039d6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2220      	movs	r2, #32
 80039cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80039d0:	2300      	movs	r3, #0
 80039d2:	e000      	b.n	80039d6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80039d4:	2302      	movs	r3, #2
  }
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3720      	adds	r7, #32
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b08a      	sub	sp, #40	@ 0x28
 80039e2:	af02      	add	r7, sp, #8
 80039e4:	60f8      	str	r0, [r7, #12]
 80039e6:	60b9      	str	r1, [r7, #8]
 80039e8:	603b      	str	r3, [r7, #0]
 80039ea:	4613      	mov	r3, r2
 80039ec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b20      	cmp	r3, #32
 80039fc:	f040 8081 	bne.w	8003b02 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d002      	beq.n	8003a0c <HAL_UART_Receive+0x2e>
 8003a06:	88fb      	ldrh	r3, [r7, #6]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e079      	b.n	8003b04 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2222      	movs	r2, #34	@ 0x22
 8003a1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a24:	f7fd fc9a 	bl	800135c <HAL_GetTick>
 8003a28:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	88fa      	ldrh	r2, [r7, #6]
 8003a2e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	88fa      	ldrh	r2, [r7, #6]
 8003a34:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a3e:	d108      	bne.n	8003a52 <HAL_UART_Receive+0x74>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d104      	bne.n	8003a52 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	61bb      	str	r3, [r7, #24]
 8003a50:	e003      	b.n	8003a5a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a56:	2300      	movs	r3, #0
 8003a58:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003a5a:	e047      	b.n	8003aec <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	2200      	movs	r2, #0
 8003a64:	2120      	movs	r1, #32
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 f850 	bl	8003b0c <UART_WaitOnFlagUntilTimeout>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d005      	beq.n	8003a7e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2220      	movs	r2, #32
 8003a76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e042      	b.n	8003b04 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10c      	bne.n	8003a9e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	3302      	adds	r3, #2
 8003a9a:	61bb      	str	r3, [r7, #24]
 8003a9c:	e01f      	b.n	8003ade <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aa6:	d007      	beq.n	8003ab8 <HAL_UART_Receive+0xda>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10a      	bne.n	8003ac6 <HAL_UART_Receive+0xe8>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d106      	bne.n	8003ac6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	b2da      	uxtb	r2, r3
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	701a      	strb	r2, [r3, #0]
 8003ac4:	e008      	b.n	8003ad8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ad2:	b2da      	uxtb	r2, r3
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	3301      	adds	r3, #1
 8003adc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1b2      	bne.n	8003a5c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2220      	movs	r2, #32
 8003afa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003afe:	2300      	movs	r3, #0
 8003b00:	e000      	b.n	8003b04 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003b02:	2302      	movs	r3, #2
  }
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3720      	adds	r7, #32
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	603b      	str	r3, [r7, #0]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b1c:	e03b      	b.n	8003b96 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b24:	d037      	beq.n	8003b96 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b26:	f7fd fc19 	bl	800135c <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	6a3a      	ldr	r2, [r7, #32]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d302      	bcc.n	8003b3c <UART_WaitOnFlagUntilTimeout+0x30>
 8003b36:	6a3b      	ldr	r3, [r7, #32]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e03a      	b.n	8003bb6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	f003 0304 	and.w	r3, r3, #4
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d023      	beq.n	8003b96 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2b80      	cmp	r3, #128	@ 0x80
 8003b52:	d020      	beq.n	8003b96 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2b40      	cmp	r3, #64	@ 0x40
 8003b58:	d01d      	beq.n	8003b96 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0308 	and.w	r3, r3, #8
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d116      	bne.n	8003b96 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003b68:	2300      	movs	r3, #0
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	617b      	str	r3, [r7, #20]
 8003b7c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 f81d 	bl	8003bbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2208      	movs	r2, #8
 8003b88:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e00f      	b.n	8003bb6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	bf0c      	ite	eq
 8003ba6:	2301      	moveq	r3, #1
 8003ba8:	2300      	movne	r3, #0
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	461a      	mov	r2, r3
 8003bae:	79fb      	ldrb	r3, [r7, #7]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d0b4      	beq.n	8003b1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3718      	adds	r7, #24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b095      	sub	sp, #84	@ 0x54
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	330c      	adds	r3, #12
 8003bcc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bd0:	e853 3f00 	ldrex	r3, [r3]
 8003bd4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	330c      	adds	r3, #12
 8003be4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003be6:	643a      	str	r2, [r7, #64]	@ 0x40
 8003be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003bec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003bee:	e841 2300 	strex	r3, r2, [r1]
 8003bf2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1e5      	bne.n	8003bc6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	3314      	adds	r3, #20
 8003c00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	e853 3f00 	ldrex	r3, [r3]
 8003c08:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	f023 0301 	bic.w	r3, r3, #1
 8003c10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	3314      	adds	r3, #20
 8003c18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c22:	e841 2300 	strex	r3, r2, [r1]
 8003c26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1e5      	bne.n	8003bfa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d119      	bne.n	8003c6a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	330c      	adds	r3, #12
 8003c3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	e853 3f00 	ldrex	r3, [r3]
 8003c44:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	f023 0310 	bic.w	r3, r3, #16
 8003c4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	330c      	adds	r3, #12
 8003c54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c56:	61ba      	str	r2, [r7, #24]
 8003c58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5a:	6979      	ldr	r1, [r7, #20]
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	e841 2300 	strex	r3, r2, [r1]
 8003c62:	613b      	str	r3, [r7, #16]
   return(result);
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1e5      	bne.n	8003c36 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c78:	bf00      	nop
 8003c7a:	3754      	adds	r7, #84	@ 0x54
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c88:	b0c0      	sub	sp, #256	@ 0x100
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca0:	68d9      	ldr	r1, [r3, #12]
 8003ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	ea40 0301 	orr.w	r3, r0, r1
 8003cac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003cdc:	f021 010c 	bic.w	r1, r1, #12
 8003ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003cea:	430b      	orrs	r3, r1
 8003cec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cfe:	6999      	ldr	r1, [r3, #24]
 8003d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	ea40 0301 	orr.w	r3, r0, r1
 8003d0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	4b8f      	ldr	r3, [pc, #572]	@ (8003f50 <UART_SetConfig+0x2cc>)
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d005      	beq.n	8003d24 <UART_SetConfig+0xa0>
 8003d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	4b8d      	ldr	r3, [pc, #564]	@ (8003f54 <UART_SetConfig+0x2d0>)
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d104      	bne.n	8003d2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d24:	f7fe fb3e 	bl	80023a4 <HAL_RCC_GetPCLK2Freq>
 8003d28:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003d2c:	e003      	b.n	8003d36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d2e:	f7fe fb25 	bl	800237c <HAL_RCC_GetPCLK1Freq>
 8003d32:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d40:	f040 810c 	bne.w	8003f5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d4e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003d52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003d56:	4622      	mov	r2, r4
 8003d58:	462b      	mov	r3, r5
 8003d5a:	1891      	adds	r1, r2, r2
 8003d5c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003d5e:	415b      	adcs	r3, r3
 8003d60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d66:	4621      	mov	r1, r4
 8003d68:	eb12 0801 	adds.w	r8, r2, r1
 8003d6c:	4629      	mov	r1, r5
 8003d6e:	eb43 0901 	adc.w	r9, r3, r1
 8003d72:	f04f 0200 	mov.w	r2, #0
 8003d76:	f04f 0300 	mov.w	r3, #0
 8003d7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d86:	4690      	mov	r8, r2
 8003d88:	4699      	mov	r9, r3
 8003d8a:	4623      	mov	r3, r4
 8003d8c:	eb18 0303 	adds.w	r3, r8, r3
 8003d90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003d94:	462b      	mov	r3, r5
 8003d96:	eb49 0303 	adc.w	r3, r9, r3
 8003d9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003daa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003dae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003db2:	460b      	mov	r3, r1
 8003db4:	18db      	adds	r3, r3, r3
 8003db6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003db8:	4613      	mov	r3, r2
 8003dba:	eb42 0303 	adc.w	r3, r2, r3
 8003dbe:	657b      	str	r3, [r7, #84]	@ 0x54
 8003dc0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003dc4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003dc8:	f7fc fa24 	bl	8000214 <__aeabi_uldivmod>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	460b      	mov	r3, r1
 8003dd0:	4b61      	ldr	r3, [pc, #388]	@ (8003f58 <UART_SetConfig+0x2d4>)
 8003dd2:	fba3 2302 	umull	r2, r3, r3, r2
 8003dd6:	095b      	lsrs	r3, r3, #5
 8003dd8:	011c      	lsls	r4, r3, #4
 8003dda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dde:	2200      	movs	r2, #0
 8003de0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003de4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003de8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003dec:	4642      	mov	r2, r8
 8003dee:	464b      	mov	r3, r9
 8003df0:	1891      	adds	r1, r2, r2
 8003df2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003df4:	415b      	adcs	r3, r3
 8003df6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003df8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003dfc:	4641      	mov	r1, r8
 8003dfe:	eb12 0a01 	adds.w	sl, r2, r1
 8003e02:	4649      	mov	r1, r9
 8003e04:	eb43 0b01 	adc.w	fp, r3, r1
 8003e08:	f04f 0200 	mov.w	r2, #0
 8003e0c:	f04f 0300 	mov.w	r3, #0
 8003e10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e1c:	4692      	mov	sl, r2
 8003e1e:	469b      	mov	fp, r3
 8003e20:	4643      	mov	r3, r8
 8003e22:	eb1a 0303 	adds.w	r3, sl, r3
 8003e26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e2a:	464b      	mov	r3, r9
 8003e2c:	eb4b 0303 	adc.w	r3, fp, r3
 8003e30:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e40:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003e44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e48:	460b      	mov	r3, r1
 8003e4a:	18db      	adds	r3, r3, r3
 8003e4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e4e:	4613      	mov	r3, r2
 8003e50:	eb42 0303 	adc.w	r3, r2, r3
 8003e54:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003e5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003e5e:	f7fc f9d9 	bl	8000214 <__aeabi_uldivmod>
 8003e62:	4602      	mov	r2, r0
 8003e64:	460b      	mov	r3, r1
 8003e66:	4611      	mov	r1, r2
 8003e68:	4b3b      	ldr	r3, [pc, #236]	@ (8003f58 <UART_SetConfig+0x2d4>)
 8003e6a:	fba3 2301 	umull	r2, r3, r3, r1
 8003e6e:	095b      	lsrs	r3, r3, #5
 8003e70:	2264      	movs	r2, #100	@ 0x64
 8003e72:	fb02 f303 	mul.w	r3, r2, r3
 8003e76:	1acb      	subs	r3, r1, r3
 8003e78:	00db      	lsls	r3, r3, #3
 8003e7a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003e7e:	4b36      	ldr	r3, [pc, #216]	@ (8003f58 <UART_SetConfig+0x2d4>)
 8003e80:	fba3 2302 	umull	r2, r3, r3, r2
 8003e84:	095b      	lsrs	r3, r3, #5
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003e8c:	441c      	add	r4, r3
 8003e8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e92:	2200      	movs	r2, #0
 8003e94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e98:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003e9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003ea0:	4642      	mov	r2, r8
 8003ea2:	464b      	mov	r3, r9
 8003ea4:	1891      	adds	r1, r2, r2
 8003ea6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ea8:	415b      	adcs	r3, r3
 8003eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003eac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003eb0:	4641      	mov	r1, r8
 8003eb2:	1851      	adds	r1, r2, r1
 8003eb4:	6339      	str	r1, [r7, #48]	@ 0x30
 8003eb6:	4649      	mov	r1, r9
 8003eb8:	414b      	adcs	r3, r1
 8003eba:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ebc:	f04f 0200 	mov.w	r2, #0
 8003ec0:	f04f 0300 	mov.w	r3, #0
 8003ec4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003ec8:	4659      	mov	r1, fp
 8003eca:	00cb      	lsls	r3, r1, #3
 8003ecc:	4651      	mov	r1, sl
 8003ece:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ed2:	4651      	mov	r1, sl
 8003ed4:	00ca      	lsls	r2, r1, #3
 8003ed6:	4610      	mov	r0, r2
 8003ed8:	4619      	mov	r1, r3
 8003eda:	4603      	mov	r3, r0
 8003edc:	4642      	mov	r2, r8
 8003ede:	189b      	adds	r3, r3, r2
 8003ee0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ee4:	464b      	mov	r3, r9
 8003ee6:	460a      	mov	r2, r1
 8003ee8:	eb42 0303 	adc.w	r3, r2, r3
 8003eec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003efc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003f00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f04:	460b      	mov	r3, r1
 8003f06:	18db      	adds	r3, r3, r3
 8003f08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	eb42 0303 	adc.w	r3, r2, r3
 8003f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003f1a:	f7fc f97b 	bl	8000214 <__aeabi_uldivmod>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	460b      	mov	r3, r1
 8003f22:	4b0d      	ldr	r3, [pc, #52]	@ (8003f58 <UART_SetConfig+0x2d4>)
 8003f24:	fba3 1302 	umull	r1, r3, r3, r2
 8003f28:	095b      	lsrs	r3, r3, #5
 8003f2a:	2164      	movs	r1, #100	@ 0x64
 8003f2c:	fb01 f303 	mul.w	r3, r1, r3
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	3332      	adds	r3, #50	@ 0x32
 8003f36:	4a08      	ldr	r2, [pc, #32]	@ (8003f58 <UART_SetConfig+0x2d4>)
 8003f38:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3c:	095b      	lsrs	r3, r3, #5
 8003f3e:	f003 0207 	and.w	r2, r3, #7
 8003f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4422      	add	r2, r4
 8003f4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f4c:	e106      	b.n	800415c <UART_SetConfig+0x4d8>
 8003f4e:	bf00      	nop
 8003f50:	40011000 	.word	0x40011000
 8003f54:	40011400 	.word	0x40011400
 8003f58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f60:	2200      	movs	r2, #0
 8003f62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f66:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003f6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003f6e:	4642      	mov	r2, r8
 8003f70:	464b      	mov	r3, r9
 8003f72:	1891      	adds	r1, r2, r2
 8003f74:	6239      	str	r1, [r7, #32]
 8003f76:	415b      	adcs	r3, r3
 8003f78:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f7e:	4641      	mov	r1, r8
 8003f80:	1854      	adds	r4, r2, r1
 8003f82:	4649      	mov	r1, r9
 8003f84:	eb43 0501 	adc.w	r5, r3, r1
 8003f88:	f04f 0200 	mov.w	r2, #0
 8003f8c:	f04f 0300 	mov.w	r3, #0
 8003f90:	00eb      	lsls	r3, r5, #3
 8003f92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f96:	00e2      	lsls	r2, r4, #3
 8003f98:	4614      	mov	r4, r2
 8003f9a:	461d      	mov	r5, r3
 8003f9c:	4643      	mov	r3, r8
 8003f9e:	18e3      	adds	r3, r4, r3
 8003fa0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003fa4:	464b      	mov	r3, r9
 8003fa6:	eb45 0303 	adc.w	r3, r5, r3
 8003faa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003fba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003fbe:	f04f 0200 	mov.w	r2, #0
 8003fc2:	f04f 0300 	mov.w	r3, #0
 8003fc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003fca:	4629      	mov	r1, r5
 8003fcc:	008b      	lsls	r3, r1, #2
 8003fce:	4621      	mov	r1, r4
 8003fd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fd4:	4621      	mov	r1, r4
 8003fd6:	008a      	lsls	r2, r1, #2
 8003fd8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003fdc:	f7fc f91a 	bl	8000214 <__aeabi_uldivmod>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	4b60      	ldr	r3, [pc, #384]	@ (8004168 <UART_SetConfig+0x4e4>)
 8003fe6:	fba3 2302 	umull	r2, r3, r3, r2
 8003fea:	095b      	lsrs	r3, r3, #5
 8003fec:	011c      	lsls	r4, r3, #4
 8003fee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ff8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003ffc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004000:	4642      	mov	r2, r8
 8004002:	464b      	mov	r3, r9
 8004004:	1891      	adds	r1, r2, r2
 8004006:	61b9      	str	r1, [r7, #24]
 8004008:	415b      	adcs	r3, r3
 800400a:	61fb      	str	r3, [r7, #28]
 800400c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004010:	4641      	mov	r1, r8
 8004012:	1851      	adds	r1, r2, r1
 8004014:	6139      	str	r1, [r7, #16]
 8004016:	4649      	mov	r1, r9
 8004018:	414b      	adcs	r3, r1
 800401a:	617b      	str	r3, [r7, #20]
 800401c:	f04f 0200 	mov.w	r2, #0
 8004020:	f04f 0300 	mov.w	r3, #0
 8004024:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004028:	4659      	mov	r1, fp
 800402a:	00cb      	lsls	r3, r1, #3
 800402c:	4651      	mov	r1, sl
 800402e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004032:	4651      	mov	r1, sl
 8004034:	00ca      	lsls	r2, r1, #3
 8004036:	4610      	mov	r0, r2
 8004038:	4619      	mov	r1, r3
 800403a:	4603      	mov	r3, r0
 800403c:	4642      	mov	r2, r8
 800403e:	189b      	adds	r3, r3, r2
 8004040:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004044:	464b      	mov	r3, r9
 8004046:	460a      	mov	r2, r1
 8004048:	eb42 0303 	adc.w	r3, r2, r3
 800404c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	67bb      	str	r3, [r7, #120]	@ 0x78
 800405a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800405c:	f04f 0200 	mov.w	r2, #0
 8004060:	f04f 0300 	mov.w	r3, #0
 8004064:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004068:	4649      	mov	r1, r9
 800406a:	008b      	lsls	r3, r1, #2
 800406c:	4641      	mov	r1, r8
 800406e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004072:	4641      	mov	r1, r8
 8004074:	008a      	lsls	r2, r1, #2
 8004076:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800407a:	f7fc f8cb 	bl	8000214 <__aeabi_uldivmod>
 800407e:	4602      	mov	r2, r0
 8004080:	460b      	mov	r3, r1
 8004082:	4611      	mov	r1, r2
 8004084:	4b38      	ldr	r3, [pc, #224]	@ (8004168 <UART_SetConfig+0x4e4>)
 8004086:	fba3 2301 	umull	r2, r3, r3, r1
 800408a:	095b      	lsrs	r3, r3, #5
 800408c:	2264      	movs	r2, #100	@ 0x64
 800408e:	fb02 f303 	mul.w	r3, r2, r3
 8004092:	1acb      	subs	r3, r1, r3
 8004094:	011b      	lsls	r3, r3, #4
 8004096:	3332      	adds	r3, #50	@ 0x32
 8004098:	4a33      	ldr	r2, [pc, #204]	@ (8004168 <UART_SetConfig+0x4e4>)
 800409a:	fba2 2303 	umull	r2, r3, r2, r3
 800409e:	095b      	lsrs	r3, r3, #5
 80040a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040a4:	441c      	add	r4, r3
 80040a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040aa:	2200      	movs	r2, #0
 80040ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80040ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80040b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80040b4:	4642      	mov	r2, r8
 80040b6:	464b      	mov	r3, r9
 80040b8:	1891      	adds	r1, r2, r2
 80040ba:	60b9      	str	r1, [r7, #8]
 80040bc:	415b      	adcs	r3, r3
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040c4:	4641      	mov	r1, r8
 80040c6:	1851      	adds	r1, r2, r1
 80040c8:	6039      	str	r1, [r7, #0]
 80040ca:	4649      	mov	r1, r9
 80040cc:	414b      	adcs	r3, r1
 80040ce:	607b      	str	r3, [r7, #4]
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	f04f 0300 	mov.w	r3, #0
 80040d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040dc:	4659      	mov	r1, fp
 80040de:	00cb      	lsls	r3, r1, #3
 80040e0:	4651      	mov	r1, sl
 80040e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040e6:	4651      	mov	r1, sl
 80040e8:	00ca      	lsls	r2, r1, #3
 80040ea:	4610      	mov	r0, r2
 80040ec:	4619      	mov	r1, r3
 80040ee:	4603      	mov	r3, r0
 80040f0:	4642      	mov	r2, r8
 80040f2:	189b      	adds	r3, r3, r2
 80040f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040f6:	464b      	mov	r3, r9
 80040f8:	460a      	mov	r2, r1
 80040fa:	eb42 0303 	adc.w	r3, r2, r3
 80040fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	663b      	str	r3, [r7, #96]	@ 0x60
 800410a:	667a      	str	r2, [r7, #100]	@ 0x64
 800410c:	f04f 0200 	mov.w	r2, #0
 8004110:	f04f 0300 	mov.w	r3, #0
 8004114:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004118:	4649      	mov	r1, r9
 800411a:	008b      	lsls	r3, r1, #2
 800411c:	4641      	mov	r1, r8
 800411e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004122:	4641      	mov	r1, r8
 8004124:	008a      	lsls	r2, r1, #2
 8004126:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800412a:	f7fc f873 	bl	8000214 <__aeabi_uldivmod>
 800412e:	4602      	mov	r2, r0
 8004130:	460b      	mov	r3, r1
 8004132:	4b0d      	ldr	r3, [pc, #52]	@ (8004168 <UART_SetConfig+0x4e4>)
 8004134:	fba3 1302 	umull	r1, r3, r3, r2
 8004138:	095b      	lsrs	r3, r3, #5
 800413a:	2164      	movs	r1, #100	@ 0x64
 800413c:	fb01 f303 	mul.w	r3, r1, r3
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	011b      	lsls	r3, r3, #4
 8004144:	3332      	adds	r3, #50	@ 0x32
 8004146:	4a08      	ldr	r2, [pc, #32]	@ (8004168 <UART_SetConfig+0x4e4>)
 8004148:	fba2 2303 	umull	r2, r3, r2, r3
 800414c:	095b      	lsrs	r3, r3, #5
 800414e:	f003 020f 	and.w	r2, r3, #15
 8004152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4422      	add	r2, r4
 800415a:	609a      	str	r2, [r3, #8]
}
 800415c:	bf00      	nop
 800415e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004162:	46bd      	mov	sp, r7
 8004164:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004168:	51eb851f 	.word	0x51eb851f

0800416c <memset>:
 800416c:	4402      	add	r2, r0
 800416e:	4603      	mov	r3, r0
 8004170:	4293      	cmp	r3, r2
 8004172:	d100      	bne.n	8004176 <memset+0xa>
 8004174:	4770      	bx	lr
 8004176:	f803 1b01 	strb.w	r1, [r3], #1
 800417a:	e7f9      	b.n	8004170 <memset+0x4>

0800417c <__libc_init_array>:
 800417c:	b570      	push	{r4, r5, r6, lr}
 800417e:	4d0d      	ldr	r5, [pc, #52]	@ (80041b4 <__libc_init_array+0x38>)
 8004180:	4c0d      	ldr	r4, [pc, #52]	@ (80041b8 <__libc_init_array+0x3c>)
 8004182:	1b64      	subs	r4, r4, r5
 8004184:	10a4      	asrs	r4, r4, #2
 8004186:	2600      	movs	r6, #0
 8004188:	42a6      	cmp	r6, r4
 800418a:	d109      	bne.n	80041a0 <__libc_init_array+0x24>
 800418c:	4d0b      	ldr	r5, [pc, #44]	@ (80041bc <__libc_init_array+0x40>)
 800418e:	4c0c      	ldr	r4, [pc, #48]	@ (80041c0 <__libc_init_array+0x44>)
 8004190:	f000 f818 	bl	80041c4 <_init>
 8004194:	1b64      	subs	r4, r4, r5
 8004196:	10a4      	asrs	r4, r4, #2
 8004198:	2600      	movs	r6, #0
 800419a:	42a6      	cmp	r6, r4
 800419c:	d105      	bne.n	80041aa <__libc_init_array+0x2e>
 800419e:	bd70      	pop	{r4, r5, r6, pc}
 80041a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80041a4:	4798      	blx	r3
 80041a6:	3601      	adds	r6, #1
 80041a8:	e7ee      	b.n	8004188 <__libc_init_array+0xc>
 80041aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ae:	4798      	blx	r3
 80041b0:	3601      	adds	r6, #1
 80041b2:	e7f2      	b.n	800419a <__libc_init_array+0x1e>
 80041b4:	08004204 	.word	0x08004204
 80041b8:	08004204 	.word	0x08004204
 80041bc:	08004204 	.word	0x08004204
 80041c0:	08004208 	.word	0x08004208

080041c4 <_init>:
 80041c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c6:	bf00      	nop
 80041c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ca:	bc08      	pop	{r3}
 80041cc:	469e      	mov	lr, r3
 80041ce:	4770      	bx	lr

080041d0 <_fini>:
 80041d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d2:	bf00      	nop
 80041d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041d6:	bc08      	pop	{r3}
 80041d8:	469e      	mov	lr, r3
 80041da:	4770      	bx	lr
