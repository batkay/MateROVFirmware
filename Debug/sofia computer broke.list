
sofia computer broke.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000329c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003460  08003460  00004460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003478  08003478  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003478  08003478  00004478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003480  08003480  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003480  08003480  00004480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003484  08003484  00004484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003488  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000000c  08003494  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08003494  0000514c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4f1  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a61  00000000  00000000  0001152d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  00012f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000097a  00000000  00000000  00013b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002181c  00000000  00000000  00014512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e4a7  00000000  00000000  00035d2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d01c8  00000000  00000000  000441d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011439d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003300  00000000  00000000  001143e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  001176e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003448 	.word	0x08003448

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003448 	.word	0x08003448

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b96a 	b.w	8000500 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	460c      	mov	r4, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14e      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000250:	4694      	mov	ip, r2
 8000252:	458c      	cmp	ip, r1
 8000254:	4686      	mov	lr, r0
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	d962      	bls.n	8000322 <__udivmoddi4+0xde>
 800025c:	b14a      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 800025e:	f1c2 0320 	rsb	r3, r2, #32
 8000262:	4091      	lsls	r1, r2
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	fa0c fc02 	lsl.w	ip, ip, r2
 800026c:	4319      	orrs	r1, r3
 800026e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000272:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000276:	fa1f f68c 	uxth.w	r6, ip
 800027a:	fbb1 f4f7 	udiv	r4, r1, r7
 800027e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000282:	fb07 1114 	mls	r1, r7, r4, r1
 8000286:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028a:	fb04 f106 	mul.w	r1, r4, r6
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f104 30ff 	add.w	r0, r4, #4294967295
 800029a:	f080 8112 	bcs.w	80004c2 <__udivmoddi4+0x27e>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 810f 	bls.w	80004c2 <__udivmoddi4+0x27e>
 80002a4:	3c02      	subs	r4, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a59      	subs	r1, r3, r1
 80002aa:	fa1f f38e 	uxth.w	r3, lr
 80002ae:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b2:	fb07 1110 	mls	r1, r7, r0, r1
 80002b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ba:	fb00 f606 	mul.w	r6, r0, r6
 80002be:	429e      	cmp	r6, r3
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x94>
 80002c2:	eb1c 0303 	adds.w	r3, ip, r3
 80002c6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ca:	f080 80fc 	bcs.w	80004c6 <__udivmoddi4+0x282>
 80002ce:	429e      	cmp	r6, r3
 80002d0:	f240 80f9 	bls.w	80004c6 <__udivmoddi4+0x282>
 80002d4:	4463      	add	r3, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	1b9b      	subs	r3, r3, r6
 80002da:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa6>
 80002e2:	40d3      	lsrs	r3, r2
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xba>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb4>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa6>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x150>
 8000306:	42a3      	cmp	r3, r4
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xcc>
 800030a:	4290      	cmp	r0, r2
 800030c:	f0c0 80f0 	bcc.w	80004f0 <__udivmoddi4+0x2ac>
 8000310:	1a86      	subs	r6, r0, r2
 8000312:	eb64 0303 	sbc.w	r3, r4, r3
 8000316:	2001      	movs	r0, #1
 8000318:	2d00      	cmp	r5, #0
 800031a:	d0e6      	beq.n	80002ea <__udivmoddi4+0xa6>
 800031c:	e9c5 6300 	strd	r6, r3, [r5]
 8000320:	e7e3      	b.n	80002ea <__udivmoddi4+0xa6>
 8000322:	2a00      	cmp	r2, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x204>
 8000328:	eba1 040c 	sub.w	r4, r1, ip
 800032c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000330:	fa1f f78c 	uxth.w	r7, ip
 8000334:	2101      	movs	r1, #1
 8000336:	fbb4 f6f8 	udiv	r6, r4, r8
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb08 4416 	mls	r4, r8, r6, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb07 f006 	mul.w	r0, r7, r6
 800034a:	4298      	cmp	r0, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x11c>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 34ff 	add.w	r4, r6, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x11a>
 8000358:	4298      	cmp	r0, r3
 800035a:	f200 80cd 	bhi.w	80004f8 <__udivmoddi4+0x2b4>
 800035e:	4626      	mov	r6, r4
 8000360:	1a1c      	subs	r4, r3, r0
 8000362:	fa1f f38e 	uxth.w	r3, lr
 8000366:	fbb4 f0f8 	udiv	r0, r4, r8
 800036a:	fb08 4410 	mls	r4, r8, r0, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb00 f707 	mul.w	r7, r0, r7
 8000376:	429f      	cmp	r7, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x148>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x146>
 8000384:	429f      	cmp	r7, r3
 8000386:	f200 80b0 	bhi.w	80004ea <__udivmoddi4+0x2a6>
 800038a:	4620      	mov	r0, r4
 800038c:	1bdb      	subs	r3, r3, r7
 800038e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x9c>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a4:	fa04 f301 	lsl.w	r3, r4, r1
 80003a8:	ea43 030c 	orr.w	r3, r3, ip
 80003ac:	40f4      	lsrs	r4, r6
 80003ae:	fa00 f801 	lsl.w	r8, r0, r1
 80003b2:	0c38      	lsrs	r0, r7, #16
 80003b4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b8:	fbb4 fef0 	udiv	lr, r4, r0
 80003bc:	fa1f fc87 	uxth.w	ip, r7
 80003c0:	fb00 441e 	mls	r4, r0, lr, r4
 80003c4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c8:	fb0e f90c 	mul.w	r9, lr, ip
 80003cc:	45a1      	cmp	r9, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d90a      	bls.n	80003ea <__udivmoddi4+0x1a6>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003da:	f080 8084 	bcs.w	80004e6 <__udivmoddi4+0x2a2>
 80003de:	45a1      	cmp	r9, r4
 80003e0:	f240 8081 	bls.w	80004e6 <__udivmoddi4+0x2a2>
 80003e4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	eba4 0409 	sub.w	r4, r4, r9
 80003ee:	fa1f f983 	uxth.w	r9, r3
 80003f2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f6:	fb00 4413 	mls	r4, r0, r3, r4
 80003fa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000402:	45a4      	cmp	ip, r4
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x1d2>
 8000406:	193c      	adds	r4, r7, r4
 8000408:	f103 30ff 	add.w	r0, r3, #4294967295
 800040c:	d267      	bcs.n	80004de <__udivmoddi4+0x29a>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d965      	bls.n	80004de <__udivmoddi4+0x29a>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041a:	fba0 9302 	umull	r9, r3, r0, r2
 800041e:	eba4 040c 	sub.w	r4, r4, ip
 8000422:	429c      	cmp	r4, r3
 8000424:	46ce      	mov	lr, r9
 8000426:	469c      	mov	ip, r3
 8000428:	d351      	bcc.n	80004ce <__udivmoddi4+0x28a>
 800042a:	d04e      	beq.n	80004ca <__udivmoddi4+0x286>
 800042c:	b155      	cbz	r5, 8000444 <__udivmoddi4+0x200>
 800042e:	ebb8 030e 	subs.w	r3, r8, lr
 8000432:	eb64 040c 	sbc.w	r4, r4, ip
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	40cb      	lsrs	r3, r1
 800043c:	431e      	orrs	r6, r3
 800043e:	40cc      	lsrs	r4, r1
 8000440:	e9c5 6400 	strd	r6, r4, [r5]
 8000444:	2100      	movs	r1, #0
 8000446:	e750      	b.n	80002ea <__udivmoddi4+0xa6>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f103 	lsr.w	r1, r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa24 f303 	lsr.w	r3, r4, r3
 8000458:	4094      	lsls	r4, r2
 800045a:	430c      	orrs	r4, r1
 800045c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000460:	fa00 fe02 	lsl.w	lr, r0, r2
 8000464:	fa1f f78c 	uxth.w	r7, ip
 8000468:	fbb3 f0f8 	udiv	r0, r3, r8
 800046c:	fb08 3110 	mls	r1, r8, r0, r3
 8000470:	0c23      	lsrs	r3, r4, #16
 8000472:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000476:	fb00 f107 	mul.w	r1, r0, r7
 800047a:	4299      	cmp	r1, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x24c>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 36ff 	add.w	r6, r0, #4294967295
 8000486:	d22c      	bcs.n	80004e2 <__udivmoddi4+0x29e>
 8000488:	4299      	cmp	r1, r3
 800048a:	d92a      	bls.n	80004e2 <__udivmoddi4+0x29e>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1a5b      	subs	r3, r3, r1
 8000492:	b2a4      	uxth	r4, r4
 8000494:	fbb3 f1f8 	udiv	r1, r3, r8
 8000498:	fb08 3311 	mls	r3, r8, r1, r3
 800049c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a0:	fb01 f307 	mul.w	r3, r1, r7
 80004a4:	42a3      	cmp	r3, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x276>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b0:	d213      	bcs.n	80004da <__udivmoddi4+0x296>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d911      	bls.n	80004da <__udivmoddi4+0x296>
 80004b6:	3902      	subs	r1, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	1ae4      	subs	r4, r4, r3
 80004bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c0:	e739      	b.n	8000336 <__udivmoddi4+0xf2>
 80004c2:	4604      	mov	r4, r0
 80004c4:	e6f0      	b.n	80002a8 <__udivmoddi4+0x64>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e706      	b.n	80002d8 <__udivmoddi4+0x94>
 80004ca:	45c8      	cmp	r8, r9
 80004cc:	d2ae      	bcs.n	800042c <__udivmoddi4+0x1e8>
 80004ce:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7a8      	b.n	800042c <__udivmoddi4+0x1e8>
 80004da:	4631      	mov	r1, r6
 80004dc:	e7ed      	b.n	80004ba <__udivmoddi4+0x276>
 80004de:	4603      	mov	r3, r0
 80004e0:	e799      	b.n	8000416 <__udivmoddi4+0x1d2>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e7d4      	b.n	8000490 <__udivmoddi4+0x24c>
 80004e6:	46d6      	mov	lr, sl
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1a6>
 80004ea:	4463      	add	r3, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e74d      	b.n	800038c <__udivmoddi4+0x148>
 80004f0:	4606      	mov	r6, r0
 80004f2:	4623      	mov	r3, r4
 80004f4:	4608      	mov	r0, r1
 80004f6:	e70f      	b.n	8000318 <__udivmoddi4+0xd4>
 80004f8:	3e02      	subs	r6, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	e730      	b.n	8000360 <__udivmoddi4+0x11c>
 80004fe:	bf00      	nop

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int i =0;
 800050a:	2300      	movs	r3, #0
 800050c:	613b      	str	r3, [r7, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fce3 	bl	8000ed8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f859 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 fa47 	bl	80009a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800051a:	f000 fa1b 	bl	8000954 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800051e:	f000 f8c1 	bl	80006a4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000522:	f000 f939 	bl	8000798 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000526:	f000 f9b1 	bl	800088c <MX_TIM4_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  int x = 0;
 800052a:	2300      	movs	r3, #0
 800052c:	617b      	str	r3, [r7, #20]
  while (1)
  {

	  TIM2->CCR2 = x;
 800052e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	6393      	str	r3, [r2, #56]	@ 0x38
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000536:	2104      	movs	r1, #4
 8000538:	481d      	ldr	r0, [pc, #116]	@ (80005b0 <main+0xac>)
 800053a:	f001 fe2f 	bl	800219c <HAL_TIM_PWM_Start>
	  TIM3->CCR3 = x;
 800053e:	4a1d      	ldr	r2, [pc, #116]	@ (80005b4 <main+0xb0>)
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	63d3      	str	r3, [r2, #60]	@ 0x3c
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000544:	2108      	movs	r1, #8
 8000546:	481c      	ldr	r0, [pc, #112]	@ (80005b8 <main+0xb4>)
 8000548:	f001 fe28 	bl	800219c <HAL_TIM_PWM_Start>
	  TIM4->CCR4 = x;
 800054c:	4a1b      	ldr	r2, [pc, #108]	@ (80005bc <main+0xb8>)
 800054e:	697b      	ldr	r3, [r7, #20]
 8000550:	6413      	str	r3, [r2, #64]	@ 0x40
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000552:	210c      	movs	r1, #12
 8000554:	481a      	ldr	r0, [pc, #104]	@ (80005c0 <main+0xbc>)
 8000556:	f001 fe21 	bl	800219c <HAL_TIM_PWM_Start>

	  HAL_Delay(250);
 800055a:	20fa      	movs	r0, #250	@ 0xfa
 800055c:	f000 fd2e 	bl	8000fbc <HAL_Delay>
	  x+=250;
 8000560:	697b      	ldr	r3, [r7, #20]
 8000562:	33fa      	adds	r3, #250	@ 0xfa
 8000564:	617b      	str	r3, [r7, #20]
	  if (x > 3500-1)
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	f640 52ab 	movw	r2, #3499	@ 0xdab
 800056c:	4293      	cmp	r3, r2
 800056e:	dd01      	ble.n	8000574 <main+0x70>
	  {
		  x=0;
 8000570:	2300      	movs	r3, #0
 8000572:	617b      	str	r3, [r7, #20]
	  //sprintf(buf, "%d\r\n", i);

//	  strcpy((char*)buf, i);
//	  strcpy((char*)buf, "\r\n");

	  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff fe44 	bl	8000204 <strlen>
 800057c:	4603      	mov	r3, r0
 800057e:	b29a      	uxth	r2, r3
 8000580:	1d39      	adds	r1, r7, #4
 8000582:	f04f 33ff 	mov.w	r3, #4294967295
 8000586:	480f      	ldr	r0, [pc, #60]	@ (80005c4 <main+0xc0>)
 8000588:	f002 fae0 	bl	8002b4c <HAL_UART_Transmit>
	  HAL_Delay(500);
 800058c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000590:	f000 fd14 	bl	8000fbc <HAL_Delay>
	  HAL_UART_Receive(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff fe34 	bl	8000204 <strlen>
 800059c:	4603      	mov	r3, r0
 800059e:	b29a      	uxth	r2, r3
 80005a0:	1d39      	adds	r1, r7, #4
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295
 80005a6:	4807      	ldr	r0, [pc, #28]	@ (80005c4 <main+0xc0>)
 80005a8:	f002 fb5b 	bl	8002c62 <HAL_UART_Receive>
	  TIM2->CCR2 = x;
 80005ac:	e7bf      	b.n	800052e <main+0x2a>
 80005ae:	bf00      	nop
 80005b0:	20000028 	.word	0x20000028
 80005b4:	40000400 	.word	0x40000400
 80005b8:	20000070 	.word	0x20000070
 80005bc:	40000800 	.word	0x40000800
 80005c0:	200000b8 	.word	0x200000b8
 80005c4:	20000100 	.word	0x20000100

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b094      	sub	sp, #80	@ 0x50
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 031c 	add.w	r3, r7, #28
 80005d2:	2234      	movs	r2, #52	@ 0x34
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f002 ff0a 	bl	80033f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	f107 0308 	add.w	r3, r7, #8
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ec:	2300      	movs	r3, #0
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	4b2a      	ldr	r3, [pc, #168]	@ (800069c <SystemClock_Config+0xd4>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f4:	4a29      	ldr	r2, [pc, #164]	@ (800069c <SystemClock_Config+0xd4>)
 80005f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80005fc:	4b27      	ldr	r3, [pc, #156]	@ (800069c <SystemClock_Config+0xd4>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000600:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000608:	2300      	movs	r3, #0
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	4b24      	ldr	r3, [pc, #144]	@ (80006a0 <SystemClock_Config+0xd8>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000614:	4a22      	ldr	r2, [pc, #136]	@ (80006a0 <SystemClock_Config+0xd8>)
 8000616:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b20      	ldr	r3, [pc, #128]	@ (80006a0 <SystemClock_Config+0xd8>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000624:	603b      	str	r3, [r7, #0]
 8000626:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000628:	2302      	movs	r3, #2
 800062a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062c:	2301      	movs	r3, #1
 800062e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000630:	2310      	movs	r3, #16
 8000632:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000634:	2302      	movs	r3, #2
 8000636:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000638:	2300      	movs	r3, #0
 800063a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800063c:	2310      	movs	r3, #16
 800063e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000640:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000644:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000646:	2304      	movs	r3, #4
 8000648:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800064a:	2302      	movs	r3, #2
 800064c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800064e:	2302      	movs	r3, #2
 8000650:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000652:	f107 031c 	add.w	r3, r7, #28
 8000656:	4618      	mov	r0, r3
 8000658:	f001 fab2 	bl	8001bc0 <HAL_RCC_OscConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000662:	f000 fa49 	bl	8000af8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000666:	230f      	movs	r3, #15
 8000668:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066a:	2302      	movs	r3, #2
 800066c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000672:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000676:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800067c:	f107 0308 	add.w	r3, r7, #8
 8000680:	2102      	movs	r1, #2
 8000682:	4618      	mov	r0, r3
 8000684:	f000 ff52 	bl	800152c <HAL_RCC_ClockConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800068e:	f000 fa33 	bl	8000af8 <Error_Handler>
  }
}
 8000692:	bf00      	nop
 8000694:	3750      	adds	r7, #80	@ 0x50
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800
 80006a0:	40007000 	.word	0x40007000

080006a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08a      	sub	sp, #40	@ 0x28
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006aa:	f107 0320 	add.w	r3, r7, #32
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]
 80006c2:	615a      	str	r2, [r3, #20]
 80006c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006c6:	4b33      	ldr	r3, [pc, #204]	@ (8000794 <MX_TIM2_Init+0xf0>)
 80006c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80006ce:	4b31      	ldr	r3, [pc, #196]	@ (8000794 <MX_TIM2_Init+0xf0>)
 80006d0:	2253      	movs	r2, #83	@ 0x53
 80006d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d4:	4b2f      	ldr	r3, [pc, #188]	@ (8000794 <MX_TIM2_Init+0xf0>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 80006da:	4b2e      	ldr	r3, [pc, #184]	@ (8000794 <MX_TIM2_Init+0xf0>)
 80006dc:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80006e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000794 <MX_TIM2_Init+0xf0>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000794 <MX_TIM2_Init+0xf0>)
 80006ea:	2280      	movs	r2, #128	@ 0x80
 80006ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006ee:	4829      	ldr	r0, [pc, #164]	@ (8000794 <MX_TIM2_Init+0xf0>)
 80006f0:	f001 fd04 	bl	80020fc <HAL_TIM_PWM_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80006fa:	f000 f9fd 	bl	8000af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006fe:	2300      	movs	r3, #0
 8000700:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000702:	2300      	movs	r3, #0
 8000704:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000706:	f107 0320 	add.w	r3, r7, #32
 800070a:	4619      	mov	r1, r3
 800070c:	4821      	ldr	r0, [pc, #132]	@ (8000794 <MX_TIM2_Init+0xf0>)
 800070e:	f002 f951 	bl	80029b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000718:	f000 f9ee 	bl	8000af8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800071c:	2360      	movs	r3, #96	@ 0x60
 800071e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000724:	2300      	movs	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2200      	movs	r2, #0
 8000730:	4619      	mov	r1, r3
 8000732:	4818      	ldr	r0, [pc, #96]	@ (8000794 <MX_TIM2_Init+0xf0>)
 8000734:	f001 fdfa 	bl	800232c <HAL_TIM_PWM_ConfigChannel>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800073e:	f000 f9db 	bl	8000af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2204      	movs	r2, #4
 8000746:	4619      	mov	r1, r3
 8000748:	4812      	ldr	r0, [pc, #72]	@ (8000794 <MX_TIM2_Init+0xf0>)
 800074a:	f001 fdef 	bl	800232c <HAL_TIM_PWM_ConfigChannel>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000754:	f000 f9d0 	bl	8000af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2208      	movs	r2, #8
 800075c:	4619      	mov	r1, r3
 800075e:	480d      	ldr	r0, [pc, #52]	@ (8000794 <MX_TIM2_Init+0xf0>)
 8000760:	f001 fde4 	bl	800232c <HAL_TIM_PWM_ConfigChannel>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 800076a:	f000 f9c5 	bl	8000af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	220c      	movs	r2, #12
 8000772:	4619      	mov	r1, r3
 8000774:	4807      	ldr	r0, [pc, #28]	@ (8000794 <MX_TIM2_Init+0xf0>)
 8000776:	f001 fdd9 	bl	800232c <HAL_TIM_PWM_ConfigChannel>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8000780:	f000 f9ba 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000784:	4803      	ldr	r0, [pc, #12]	@ (8000794 <MX_TIM2_Init+0xf0>)
 8000786:	f000 fa31 	bl	8000bec <HAL_TIM_MspPostInit>

}
 800078a:	bf00      	nop
 800078c:	3728      	adds	r7, #40	@ 0x28
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000028 	.word	0x20000028

08000798 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	@ 0x28
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079e:	f107 0320 	add.w	r3, r7, #32
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]
 80007b6:	615a      	str	r2, [r3, #20]
 80007b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007ba:	4b32      	ldr	r3, [pc, #200]	@ (8000884 <MX_TIM3_Init+0xec>)
 80007bc:	4a32      	ldr	r2, [pc, #200]	@ (8000888 <MX_TIM3_Init+0xf0>)
 80007be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80007c0:	4b30      	ldr	r3, [pc, #192]	@ (8000884 <MX_TIM3_Init+0xec>)
 80007c2:	2253      	movs	r2, #83	@ 0x53
 80007c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c6:	4b2f      	ldr	r3, [pc, #188]	@ (8000884 <MX_TIM3_Init+0xec>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 80007cc:	4b2d      	ldr	r3, [pc, #180]	@ (8000884 <MX_TIM3_Init+0xec>)
 80007ce:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80007d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d4:	4b2b      	ldr	r3, [pc, #172]	@ (8000884 <MX_TIM3_Init+0xec>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007da:	4b2a      	ldr	r3, [pc, #168]	@ (8000884 <MX_TIM3_Init+0xec>)
 80007dc:	2280      	movs	r2, #128	@ 0x80
 80007de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007e0:	4828      	ldr	r0, [pc, #160]	@ (8000884 <MX_TIM3_Init+0xec>)
 80007e2:	f001 fc8b 	bl	80020fc <HAL_TIM_PWM_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80007ec:	f000 f984 	bl	8000af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f0:	2300      	movs	r3, #0
 80007f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f4:	2300      	movs	r3, #0
 80007f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007f8:	f107 0320 	add.w	r3, r7, #32
 80007fc:	4619      	mov	r1, r3
 80007fe:	4821      	ldr	r0, [pc, #132]	@ (8000884 <MX_TIM3_Init+0xec>)
 8000800:	f002 f8d8 	bl	80029b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800080a:	f000 f975 	bl	8000af8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800080e:	2360      	movs	r3, #96	@ 0x60
 8000810:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2200      	movs	r2, #0
 8000822:	4619      	mov	r1, r3
 8000824:	4817      	ldr	r0, [pc, #92]	@ (8000884 <MX_TIM3_Init+0xec>)
 8000826:	f001 fd81 	bl	800232c <HAL_TIM_PWM_ConfigChannel>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000830:	f000 f962 	bl	8000af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	2204      	movs	r2, #4
 8000838:	4619      	mov	r1, r3
 800083a:	4812      	ldr	r0, [pc, #72]	@ (8000884 <MX_TIM3_Init+0xec>)
 800083c:	f001 fd76 	bl	800232c <HAL_TIM_PWM_ConfigChannel>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000846:	f000 f957 	bl	8000af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	2208      	movs	r2, #8
 800084e:	4619      	mov	r1, r3
 8000850:	480c      	ldr	r0, [pc, #48]	@ (8000884 <MX_TIM3_Init+0xec>)
 8000852:	f001 fd6b 	bl	800232c <HAL_TIM_PWM_ConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 800085c:	f000 f94c 	bl	8000af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	220c      	movs	r2, #12
 8000864:	4619      	mov	r1, r3
 8000866:	4807      	ldr	r0, [pc, #28]	@ (8000884 <MX_TIM3_Init+0xec>)
 8000868:	f001 fd60 	bl	800232c <HAL_TIM_PWM_ConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8000872:	f000 f941 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000876:	4803      	ldr	r0, [pc, #12]	@ (8000884 <MX_TIM3_Init+0xec>)
 8000878:	f000 f9b8 	bl	8000bec <HAL_TIM_MspPostInit>

}
 800087c:	bf00      	nop
 800087e:	3728      	adds	r7, #40	@ 0x28
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000070 	.word	0x20000070
 8000888:	40000400 	.word	0x40000400

0800088c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	@ 0x28
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000892:	f107 0320 	add.w	r3, r7, #32
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]
 80008aa:	615a      	str	r2, [r3, #20]
 80008ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008ae:	4b27      	ldr	r3, [pc, #156]	@ (800094c <MX_TIM4_Init+0xc0>)
 80008b0:	4a27      	ldr	r2, [pc, #156]	@ (8000950 <MX_TIM4_Init+0xc4>)
 80008b2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 80008b4:	4b25      	ldr	r3, [pc, #148]	@ (800094c <MX_TIM4_Init+0xc0>)
 80008b6:	2253      	movs	r2, #83	@ 0x53
 80008b8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ba:	4b24      	ldr	r3, [pc, #144]	@ (800094c <MX_TIM4_Init+0xc0>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 80008c0:	4b22      	ldr	r3, [pc, #136]	@ (800094c <MX_TIM4_Init+0xc0>)
 80008c2:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80008c6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c8:	4b20      	ldr	r3, [pc, #128]	@ (800094c <MX_TIM4_Init+0xc0>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ce:	4b1f      	ldr	r3, [pc, #124]	@ (800094c <MX_TIM4_Init+0xc0>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80008d4:	481d      	ldr	r0, [pc, #116]	@ (800094c <MX_TIM4_Init+0xc0>)
 80008d6:	f001 fc11 	bl	80020fc <HAL_TIM_PWM_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80008e0:	f000 f90a 	bl	8000af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e4:	2300      	movs	r3, #0
 80008e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008ec:	f107 0320 	add.w	r3, r7, #32
 80008f0:	4619      	mov	r1, r3
 80008f2:	4816      	ldr	r0, [pc, #88]	@ (800094c <MX_TIM4_Init+0xc0>)
 80008f4:	f002 f85e 	bl	80029b4 <HAL_TIMEx_MasterConfigSynchronization>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80008fe:	f000 f8fb 	bl	8000af8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000902:	2360      	movs	r3, #96	@ 0x60
 8000904:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	2200      	movs	r2, #0
 8000916:	4619      	mov	r1, r3
 8000918:	480c      	ldr	r0, [pc, #48]	@ (800094c <MX_TIM4_Init+0xc0>)
 800091a:	f001 fd07 	bl	800232c <HAL_TIM_PWM_ConfigChannel>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000924:	f000 f8e8 	bl	8000af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	2204      	movs	r2, #4
 800092c:	4619      	mov	r1, r3
 800092e:	4807      	ldr	r0, [pc, #28]	@ (800094c <MX_TIM4_Init+0xc0>)
 8000930:	f001 fcfc 	bl	800232c <HAL_TIM_PWM_ConfigChannel>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800093a:	f000 f8dd 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800093e:	4803      	ldr	r0, [pc, #12]	@ (800094c <MX_TIM4_Init+0xc0>)
 8000940:	f000 f954 	bl	8000bec <HAL_TIM_MspPostInit>

}
 8000944:	bf00      	nop
 8000946:	3728      	adds	r7, #40	@ 0x28
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	200000b8 	.word	0x200000b8
 8000950:	40000800 	.word	0x40000800

08000954 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000958:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <MX_USART2_UART_Init+0x4c>)
 800095a:	4a12      	ldr	r2, [pc, #72]	@ (80009a4 <MX_USART2_UART_Init+0x50>)
 800095c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800095e:	4b10      	ldr	r3, [pc, #64]	@ (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000960:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000964:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000966:	4b0e      	ldr	r3, [pc, #56]	@ (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800096c:	4b0c      	ldr	r3, [pc, #48]	@ (80009a0 <MX_USART2_UART_Init+0x4c>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000972:	4b0b      	ldr	r3, [pc, #44]	@ (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000978:	4b09      	ldr	r3, [pc, #36]	@ (80009a0 <MX_USART2_UART_Init+0x4c>)
 800097a:	220c      	movs	r2, #12
 800097c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097e:	4b08      	ldr	r3, [pc, #32]	@ (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000984:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800098a:	4805      	ldr	r0, [pc, #20]	@ (80009a0 <MX_USART2_UART_Init+0x4c>)
 800098c:	f002 f88e 	bl	8002aac <HAL_UART_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000996:	f000 f8af 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000100 	.word	0x20000100
 80009a4:	40004400 	.word	0x40004400

080009a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	@ 0x28
 80009ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
 80009bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
 80009c2:	4b49      	ldr	r3, [pc, #292]	@ (8000ae8 <MX_GPIO_Init+0x140>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	4a48      	ldr	r2, [pc, #288]	@ (8000ae8 <MX_GPIO_Init+0x140>)
 80009c8:	f043 0304 	orr.w	r3, r3, #4
 80009cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ce:	4b46      	ldr	r3, [pc, #280]	@ (8000ae8 <MX_GPIO_Init+0x140>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	f003 0304 	and.w	r3, r3, #4
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	4b42      	ldr	r3, [pc, #264]	@ (8000ae8 <MX_GPIO_Init+0x140>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	4a41      	ldr	r2, [pc, #260]	@ (8000ae8 <MX_GPIO_Init+0x140>)
 80009e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ea:	4b3f      	ldr	r3, [pc, #252]	@ (8000ae8 <MX_GPIO_Init+0x140>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	4b3b      	ldr	r3, [pc, #236]	@ (8000ae8 <MX_GPIO_Init+0x140>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	4a3a      	ldr	r2, [pc, #232]	@ (8000ae8 <MX_GPIO_Init+0x140>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a06:	4b38      	ldr	r3, [pc, #224]	@ (8000ae8 <MX_GPIO_Init+0x140>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	4b34      	ldr	r3, [pc, #208]	@ (8000ae8 <MX_GPIO_Init+0x140>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	4a33      	ldr	r2, [pc, #204]	@ (8000ae8 <MX_GPIO_Init+0x140>)
 8000a1c:	f043 0302 	orr.w	r3, r3, #2
 8000a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a22:	4b31      	ldr	r3, [pc, #196]	@ (8000ae8 <MX_GPIO_Init+0x140>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	f003 0302 	and.w	r3, r3, #2
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2120      	movs	r1, #32
 8000a32:	482e      	ldr	r0, [pc, #184]	@ (8000aec <MX_GPIO_Init+0x144>)
 8000a34:	f000 fd60 	bl	80014f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a3e:	482c      	ldr	r0, [pc, #176]	@ (8000af0 <MX_GPIO_Init+0x148>)
 8000a40:	f000 fd5a 	bl	80014f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a4a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4825      	ldr	r0, [pc, #148]	@ (8000af0 <MX_GPIO_Init+0x148>)
 8000a5c:	f000 fbb8 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a60:	2320      	movs	r3, #32
 8000a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4619      	mov	r1, r3
 8000a76:	481d      	ldr	r0, [pc, #116]	@ (8000aec <MX_GPIO_Init+0x144>)
 8000a78:	f000 fbaa 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a82:	2301      	movs	r3, #1
 8000a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	4619      	mov	r1, r3
 8000a94:	4816      	ldr	r0, [pc, #88]	@ (8000af0 <MX_GPIO_Init+0x148>)
 8000a96:	f000 fb9b 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000aac:	2307      	movs	r3, #7
 8000aae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	480d      	ldr	r0, [pc, #52]	@ (8000aec <MX_GPIO_Init+0x144>)
 8000ab8:	f000 fb8a 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000abc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ac2:	2312      	movs	r3, #18
 8000ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aca:	2303      	movs	r3, #3
 8000acc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ace:	2304      	movs	r3, #4
 8000ad0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4806      	ldr	r0, [pc, #24]	@ (8000af4 <MX_GPIO_Init+0x14c>)
 8000ada:	f000 fb79 	bl	80011d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ade:	bf00      	nop
 8000ae0:	3728      	adds	r7, #40	@ 0x28
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020000 	.word	0x40020000
 8000af0:	40020800 	.word	0x40020800
 8000af4:	40020400 	.word	0x40020400

08000af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afc:	b672      	cpsid	i
}
 8000afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <Error_Handler+0x8>

08000b04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	4b10      	ldr	r3, [pc, #64]	@ (8000b50 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b12:	4a0f      	ldr	r2, [pc, #60]	@ (8000b50 <HAL_MspInit+0x4c>)
 8000b14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b50 <HAL_MspInit+0x4c>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	4b09      	ldr	r3, [pc, #36]	@ (8000b50 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2e:	4a08      	ldr	r2, [pc, #32]	@ (8000b50 <HAL_MspInit+0x4c>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b36:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <HAL_MspInit+0x4c>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b42:	2007      	movs	r0, #7
 8000b44:	f000 fb10 	bl	8001168 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40023800 	.word	0x40023800

08000b54 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b087      	sub	sp, #28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b64:	d10e      	bne.n	8000b84 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	617b      	str	r3, [r7, #20]
 8000b6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000be0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000be0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b76:	4b1a      	ldr	r3, [pc, #104]	@ (8000be0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000b82:	e026      	b.n	8000bd2 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a16      	ldr	r2, [pc, #88]	@ (8000be4 <HAL_TIM_PWM_MspInit+0x90>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d10e      	bne.n	8000bac <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	4b13      	ldr	r3, [pc, #76]	@ (8000be0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b96:	4a12      	ldr	r2, [pc, #72]	@ (8000be0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000b98:	f043 0302 	orr.w	r3, r3, #2
 8000b9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b9e:	4b10      	ldr	r3, [pc, #64]	@ (8000be0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba2:	f003 0302 	and.w	r3, r3, #2
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]
}
 8000baa:	e012      	b.n	8000bd2 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000be8 <HAL_TIM_PWM_MspInit+0x94>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d10d      	bne.n	8000bd2 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	4b09      	ldr	r3, [pc, #36]	@ (8000be0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bbe:	4a08      	ldr	r2, [pc, #32]	@ (8000be0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000bc0:	f043 0304 	orr.w	r3, r3, #4
 8000bc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bc6:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bca:	f003 0304 	and.w	r3, r3, #4
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
}
 8000bd2:	bf00      	nop
 8000bd4:	371c      	adds	r7, #28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40000400 	.word	0x40000400
 8000be8:	40000800 	.word	0x40000800

08000bec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08c      	sub	sp, #48	@ 0x30
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 031c 	add.w	r3, r7, #28
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c0c:	d13d      	bne.n	8000c8a <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61bb      	str	r3, [r7, #24]
 8000c12:	4b52      	ldr	r3, [pc, #328]	@ (8000d5c <HAL_TIM_MspPostInit+0x170>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	4a51      	ldr	r2, [pc, #324]	@ (8000d5c <HAL_TIM_MspPostInit+0x170>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1e:	4b4f      	ldr	r3, [pc, #316]	@ (8000d5c <HAL_TIM_MspPostInit+0x170>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	61bb      	str	r3, [r7, #24]
 8000c28:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
 8000c2e:	4b4b      	ldr	r3, [pc, #300]	@ (8000d5c <HAL_TIM_MspPostInit+0x170>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	4a4a      	ldr	r2, [pc, #296]	@ (8000d5c <HAL_TIM_MspPostInit+0x170>)
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3a:	4b48      	ldr	r3, [pc, #288]	@ (8000d5c <HAL_TIM_MspPostInit+0x170>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	697b      	ldr	r3, [r7, #20]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB2     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c56:	2301      	movs	r3, #1
 8000c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	4619      	mov	r1, r3
 8000c60:	483f      	ldr	r0, [pc, #252]	@ (8000d60 <HAL_TIM_MspPostInit+0x174>)
 8000c62:	f000 fab5 	bl	80011d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8000c66:	f240 4304 	movw	r3, #1028	@ 0x404
 8000c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7c:	f107 031c 	add.w	r3, r7, #28
 8000c80:	4619      	mov	r1, r3
 8000c82:	4838      	ldr	r0, [pc, #224]	@ (8000d64 <HAL_TIM_MspPostInit+0x178>)
 8000c84:	f000 faa4 	bl	80011d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000c88:	e064      	b.n	8000d54 <HAL_TIM_MspPostInit+0x168>
  else if(htim->Instance==TIM3)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a36      	ldr	r2, [pc, #216]	@ (8000d68 <HAL_TIM_MspPostInit+0x17c>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d13c      	bne.n	8000d0e <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c94:	2300      	movs	r3, #0
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	4b30      	ldr	r3, [pc, #192]	@ (8000d5c <HAL_TIM_MspPostInit+0x170>)
 8000c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9c:	4a2f      	ldr	r2, [pc, #188]	@ (8000d5c <HAL_TIM_MspPostInit+0x170>)
 8000c9e:	f043 0301 	orr.w	r3, r3, #1
 8000ca2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca4:	4b2d      	ldr	r3, [pc, #180]	@ (8000d5c <HAL_TIM_MspPostInit+0x170>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca8:	f003 0301 	and.w	r3, r3, #1
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	4b29      	ldr	r3, [pc, #164]	@ (8000d5c <HAL_TIM_MspPostInit+0x170>)
 8000cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb8:	4a28      	ldr	r2, [pc, #160]	@ (8000d5c <HAL_TIM_MspPostInit+0x170>)
 8000cba:	f043 0302 	orr.w	r3, r3, #2
 8000cbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc0:	4b26      	ldr	r3, [pc, #152]	@ (8000d5c <HAL_TIM_MspPostInit+0x170>)
 8000cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc4:	f003 0302 	and.w	r3, r3, #2
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ccc:	23c0      	movs	r3, #192	@ 0xc0
 8000cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce0:	f107 031c 	add.w	r3, r7, #28
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	481e      	ldr	r0, [pc, #120]	@ (8000d60 <HAL_TIM_MspPostInit+0x174>)
 8000ce8:	f000 fa72 	bl	80011d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cec:	2303      	movs	r3, #3
 8000cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d00:	f107 031c 	add.w	r3, r7, #28
 8000d04:	4619      	mov	r1, r3
 8000d06:	4817      	ldr	r0, [pc, #92]	@ (8000d64 <HAL_TIM_MspPostInit+0x178>)
 8000d08:	f000 fa62 	bl	80011d0 <HAL_GPIO_Init>
}
 8000d0c:	e022      	b.n	8000d54 <HAL_TIM_MspPostInit+0x168>
  else if(htim->Instance==TIM4)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a16      	ldr	r2, [pc, #88]	@ (8000d6c <HAL_TIM_MspPostInit+0x180>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d11d      	bne.n	8000d54 <HAL_TIM_MspPostInit+0x168>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d5c <HAL_TIM_MspPostInit+0x170>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d20:	4a0e      	ldr	r2, [pc, #56]	@ (8000d5c <HAL_TIM_MspPostInit+0x170>)
 8000d22:	f043 0302 	orr.w	r3, r3, #2
 8000d26:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d28:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <HAL_TIM_MspPostInit+0x170>)
 8000d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2c:	f003 0302 	and.w	r3, r3, #2
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d34:	23c0      	movs	r3, #192	@ 0xc0
 8000d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000d44:	2302      	movs	r3, #2
 8000d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4805      	ldr	r0, [pc, #20]	@ (8000d64 <HAL_TIM_MspPostInit+0x178>)
 8000d50:	f000 fa3e 	bl	80011d0 <HAL_GPIO_Init>
}
 8000d54:	bf00      	nop
 8000d56:	3730      	adds	r7, #48	@ 0x30
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020000 	.word	0x40020000
 8000d64:	40020400 	.word	0x40020400
 8000d68:	40000400 	.word	0x40000400
 8000d6c:	40000800 	.word	0x40000800

08000d70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	@ 0x28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a19      	ldr	r2, [pc, #100]	@ (8000df4 <HAL_UART_MspInit+0x84>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d12b      	bne.n	8000dea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	4b18      	ldr	r3, [pc, #96]	@ (8000df8 <HAL_UART_MspInit+0x88>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9a:	4a17      	ldr	r2, [pc, #92]	@ (8000df8 <HAL_UART_MspInit+0x88>)
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000da2:	4b15      	ldr	r3, [pc, #84]	@ (8000df8 <HAL_UART_MspInit+0x88>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	4b11      	ldr	r3, [pc, #68]	@ (8000df8 <HAL_UART_MspInit+0x88>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	4a10      	ldr	r2, [pc, #64]	@ (8000df8 <HAL_UART_MspInit+0x88>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000df8 <HAL_UART_MspInit+0x88>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dca:	230c      	movs	r3, #12
 8000dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dda:	2307      	movs	r3, #7
 8000ddc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4619      	mov	r1, r3
 8000de4:	4805      	ldr	r0, [pc, #20]	@ (8000dfc <HAL_UART_MspInit+0x8c>)
 8000de6:	f000 f9f3 	bl	80011d0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000dea:	bf00      	nop
 8000dec:	3728      	adds	r7, #40	@ 0x28
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40004400 	.word	0x40004400
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40020000 	.word	0x40020000

08000e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <NMI_Handler+0x4>

08000e08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <HardFault_Handler+0x4>

08000e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <MemManage_Handler+0x4>

08000e18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <BusFault_Handler+0x4>

08000e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <UsageFault_Handler+0x4>

08000e28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e56:	f000 f891 	bl	8000f7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e64:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <SystemInit+0x20>)
 8000e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e6a:	4a05      	ldr	r2, [pc, #20]	@ (8000e80 <SystemInit+0x20>)
 8000e6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ebc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e88:	f7ff ffea 	bl	8000e60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e8c:	480c      	ldr	r0, [pc, #48]	@ (8000ec0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e8e:	490d      	ldr	r1, [pc, #52]	@ (8000ec4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e90:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e94:	e002      	b.n	8000e9c <LoopCopyDataInit>

08000e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9a:	3304      	adds	r3, #4

08000e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea0:	d3f9      	bcc.n	8000e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ecc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ea4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ed0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea8:	e001      	b.n	8000eae <LoopFillZerobss>

08000eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eac:	3204      	adds	r2, #4

08000eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb0:	d3fb      	bcc.n	8000eaa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000eb2:	f002 faa5 	bl	8003400 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eb6:	f7ff fb25 	bl	8000504 <main>
  bx  lr    
 8000eba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ebc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ec0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ec8:	08003488 	.word	0x08003488
  ldr r2, =_sbss
 8000ecc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ed0:	2000014c 	.word	0x2000014c

08000ed4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed4:	e7fe      	b.n	8000ed4 <ADC_IRQHandler>
	...

08000ed8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000edc:	4b0e      	ldr	r3, [pc, #56]	@ (8000f18 <HAL_Init+0x40>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a0d      	ldr	r2, [pc, #52]	@ (8000f18 <HAL_Init+0x40>)
 8000ee2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ee6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8000f18 <HAL_Init+0x40>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a0a      	ldr	r2, [pc, #40]	@ (8000f18 <HAL_Init+0x40>)
 8000eee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ef2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef4:	4b08      	ldr	r3, [pc, #32]	@ (8000f18 <HAL_Init+0x40>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a07      	ldr	r2, [pc, #28]	@ (8000f18 <HAL_Init+0x40>)
 8000efa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000efe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f00:	2003      	movs	r0, #3
 8000f02:	f000 f931 	bl	8001168 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f06:	2000      	movs	r0, #0
 8000f08:	f000 f808 	bl	8000f1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f0c:	f7ff fdfa 	bl	8000b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40023c00 	.word	0x40023c00

08000f1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f24:	4b12      	ldr	r3, [pc, #72]	@ (8000f70 <HAL_InitTick+0x54>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b12      	ldr	r3, [pc, #72]	@ (8000f74 <HAL_InitTick+0x58>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 f93b 	bl	80011b6 <HAL_SYSTICK_Config>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e00e      	b.n	8000f68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b0f      	cmp	r3, #15
 8000f4e:	d80a      	bhi.n	8000f66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f50:	2200      	movs	r2, #0
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	f04f 30ff 	mov.w	r0, #4294967295
 8000f58:	f000 f911 	bl	800117e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f5c:	4a06      	ldr	r2, [pc, #24]	@ (8000f78 <HAL_InitTick+0x5c>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f62:	2300      	movs	r3, #0
 8000f64:	e000      	b.n	8000f68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000000 	.word	0x20000000
 8000f74:	20000008 	.word	0x20000008
 8000f78:	20000004 	.word	0x20000004

08000f7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f80:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <HAL_IncTick+0x20>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <HAL_IncTick+0x24>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	4a04      	ldr	r2, [pc, #16]	@ (8000fa0 <HAL_IncTick+0x24>)
 8000f8e:	6013      	str	r3, [r2, #0]
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	20000008 	.word	0x20000008
 8000fa0:	20000148 	.word	0x20000148

08000fa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa8:	4b03      	ldr	r3, [pc, #12]	@ (8000fb8 <HAL_GetTick+0x14>)
 8000faa:	681b      	ldr	r3, [r3, #0]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000148 	.word	0x20000148

08000fbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fc4:	f7ff ffee 	bl	8000fa4 <HAL_GetTick>
 8000fc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fd4:	d005      	beq.n	8000fe2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001000 <HAL_Delay+0x44>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	461a      	mov	r2, r3
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4413      	add	r3, r2
 8000fe0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fe2:	bf00      	nop
 8000fe4:	f7ff ffde 	bl	8000fa4 <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d8f7      	bhi.n	8000fe4 <HAL_Delay+0x28>
  {
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	bf00      	nop
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000008 	.word	0x20000008

08001004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001014:	4b0c      	ldr	r3, [pc, #48]	@ (8001048 <__NVIC_SetPriorityGrouping+0x44>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800101a:	68ba      	ldr	r2, [r7, #8]
 800101c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001020:	4013      	ands	r3, r2
 8001022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800102c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001030:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001036:	4a04      	ldr	r2, [pc, #16]	@ (8001048 <__NVIC_SetPriorityGrouping+0x44>)
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	60d3      	str	r3, [r2, #12]
}
 800103c:	bf00      	nop
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001050:	4b04      	ldr	r3, [pc, #16]	@ (8001064 <__NVIC_GetPriorityGrouping+0x18>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	0a1b      	lsrs	r3, r3, #8
 8001056:	f003 0307 	and.w	r3, r3, #7
}
 800105a:	4618      	mov	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	6039      	str	r1, [r7, #0]
 8001072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001078:	2b00      	cmp	r3, #0
 800107a:	db0a      	blt.n	8001092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	b2da      	uxtb	r2, r3
 8001080:	490c      	ldr	r1, [pc, #48]	@ (80010b4 <__NVIC_SetPriority+0x4c>)
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	0112      	lsls	r2, r2, #4
 8001088:	b2d2      	uxtb	r2, r2
 800108a:	440b      	add	r3, r1
 800108c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001090:	e00a      	b.n	80010a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4908      	ldr	r1, [pc, #32]	@ (80010b8 <__NVIC_SetPriority+0x50>)
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	f003 030f 	and.w	r3, r3, #15
 800109e:	3b04      	subs	r3, #4
 80010a0:	0112      	lsls	r2, r2, #4
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	440b      	add	r3, r1
 80010a6:	761a      	strb	r2, [r3, #24]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000e100 	.word	0xe000e100
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	@ 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f1c3 0307 	rsb	r3, r3, #7
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	bf28      	it	cs
 80010da:	2304      	movcs	r3, #4
 80010dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3304      	adds	r3, #4
 80010e2:	2b06      	cmp	r3, #6
 80010e4:	d902      	bls.n	80010ec <NVIC_EncodePriority+0x30>
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3b03      	subs	r3, #3
 80010ea:	e000      	b.n	80010ee <NVIC_EncodePriority+0x32>
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	f04f 32ff 	mov.w	r2, #4294967295
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43da      	mvns	r2, r3
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	401a      	ands	r2, r3
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001104:	f04f 31ff 	mov.w	r1, #4294967295
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	fa01 f303 	lsl.w	r3, r1, r3
 800110e:	43d9      	mvns	r1, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	4313      	orrs	r3, r2
         );
}
 8001116:	4618      	mov	r0, r3
 8001118:	3724      	adds	r7, #36	@ 0x24
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3b01      	subs	r3, #1
 8001130:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001134:	d301      	bcc.n	800113a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001136:	2301      	movs	r3, #1
 8001138:	e00f      	b.n	800115a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113a:	4a0a      	ldr	r2, [pc, #40]	@ (8001164 <SysTick_Config+0x40>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3b01      	subs	r3, #1
 8001140:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001142:	210f      	movs	r1, #15
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	f7ff ff8e 	bl	8001068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800114c:	4b05      	ldr	r3, [pc, #20]	@ (8001164 <SysTick_Config+0x40>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001152:	4b04      	ldr	r3, [pc, #16]	@ (8001164 <SysTick_Config+0x40>)
 8001154:	2207      	movs	r2, #7
 8001156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	e000e010 	.word	0xe000e010

08001168 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ff47 	bl	8001004 <__NVIC_SetPriorityGrouping>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800117e:	b580      	push	{r7, lr}
 8001180:	b086      	sub	sp, #24
 8001182:	af00      	add	r7, sp, #0
 8001184:	4603      	mov	r3, r0
 8001186:	60b9      	str	r1, [r7, #8]
 8001188:	607a      	str	r2, [r7, #4]
 800118a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001190:	f7ff ff5c 	bl	800104c <__NVIC_GetPriorityGrouping>
 8001194:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	68b9      	ldr	r1, [r7, #8]
 800119a:	6978      	ldr	r0, [r7, #20]
 800119c:	f7ff ff8e 	bl	80010bc <NVIC_EncodePriority>
 80011a0:	4602      	mov	r2, r0
 80011a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a6:	4611      	mov	r1, r2
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff5d 	bl	8001068 <__NVIC_SetPriority>
}
 80011ae:	bf00      	nop
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff ffb0 	bl	8001124 <SysTick_Config>
 80011c4:	4603      	mov	r3, r0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b089      	sub	sp, #36	@ 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
 80011ea:	e165      	b.n	80014b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011ec:	2201      	movs	r2, #1
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	4013      	ands	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	429a      	cmp	r2, r3
 8001206:	f040 8154 	bne.w	80014b2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f003 0303 	and.w	r3, r3, #3
 8001212:	2b01      	cmp	r3, #1
 8001214:	d005      	beq.n	8001222 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800121e:	2b02      	cmp	r3, #2
 8001220:	d130      	bne.n	8001284 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	2203      	movs	r2, #3
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	68da      	ldr	r2, [r3, #12]
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001258:	2201      	movs	r2, #1
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	091b      	lsrs	r3, r3, #4
 800126e:	f003 0201 	and.w	r2, r3, #1
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 0303 	and.w	r3, r3, #3
 800128c:	2b03      	cmp	r3, #3
 800128e:	d017      	beq.n	80012c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	2203      	movs	r2, #3
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	689a      	ldr	r2, [r3, #8]
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d123      	bne.n	8001314 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	08da      	lsrs	r2, r3, #3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3208      	adds	r2, #8
 80012d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	f003 0307 	and.w	r3, r3, #7
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	220f      	movs	r2, #15
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	691a      	ldr	r2, [r3, #16]
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	08da      	lsrs	r2, r3, #3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	3208      	adds	r2, #8
 800130e:	69b9      	ldr	r1, [r7, #24]
 8001310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	2203      	movs	r2, #3
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 0203 	and.w	r2, r3, #3
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001350:	2b00      	cmp	r3, #0
 8001352:	f000 80ae 	beq.w	80014b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	4b5d      	ldr	r3, [pc, #372]	@ (80014d0 <HAL_GPIO_Init+0x300>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800135e:	4a5c      	ldr	r2, [pc, #368]	@ (80014d0 <HAL_GPIO_Init+0x300>)
 8001360:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001364:	6453      	str	r3, [r2, #68]	@ 0x44
 8001366:	4b5a      	ldr	r3, [pc, #360]	@ (80014d0 <HAL_GPIO_Init+0x300>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001372:	4a58      	ldr	r2, [pc, #352]	@ (80014d4 <HAL_GPIO_Init+0x304>)
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	089b      	lsrs	r3, r3, #2
 8001378:	3302      	adds	r3, #2
 800137a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800137e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	220f      	movs	r2, #15
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43db      	mvns	r3, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4013      	ands	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a4f      	ldr	r2, [pc, #316]	@ (80014d8 <HAL_GPIO_Init+0x308>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d025      	beq.n	80013ea <HAL_GPIO_Init+0x21a>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a4e      	ldr	r2, [pc, #312]	@ (80014dc <HAL_GPIO_Init+0x30c>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d01f      	beq.n	80013e6 <HAL_GPIO_Init+0x216>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a4d      	ldr	r2, [pc, #308]	@ (80014e0 <HAL_GPIO_Init+0x310>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d019      	beq.n	80013e2 <HAL_GPIO_Init+0x212>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a4c      	ldr	r2, [pc, #304]	@ (80014e4 <HAL_GPIO_Init+0x314>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d013      	beq.n	80013de <HAL_GPIO_Init+0x20e>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a4b      	ldr	r2, [pc, #300]	@ (80014e8 <HAL_GPIO_Init+0x318>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d00d      	beq.n	80013da <HAL_GPIO_Init+0x20a>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4a      	ldr	r2, [pc, #296]	@ (80014ec <HAL_GPIO_Init+0x31c>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d007      	beq.n	80013d6 <HAL_GPIO_Init+0x206>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a49      	ldr	r2, [pc, #292]	@ (80014f0 <HAL_GPIO_Init+0x320>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d101      	bne.n	80013d2 <HAL_GPIO_Init+0x202>
 80013ce:	2306      	movs	r3, #6
 80013d0:	e00c      	b.n	80013ec <HAL_GPIO_Init+0x21c>
 80013d2:	2307      	movs	r3, #7
 80013d4:	e00a      	b.n	80013ec <HAL_GPIO_Init+0x21c>
 80013d6:	2305      	movs	r3, #5
 80013d8:	e008      	b.n	80013ec <HAL_GPIO_Init+0x21c>
 80013da:	2304      	movs	r3, #4
 80013dc:	e006      	b.n	80013ec <HAL_GPIO_Init+0x21c>
 80013de:	2303      	movs	r3, #3
 80013e0:	e004      	b.n	80013ec <HAL_GPIO_Init+0x21c>
 80013e2:	2302      	movs	r3, #2
 80013e4:	e002      	b.n	80013ec <HAL_GPIO_Init+0x21c>
 80013e6:	2301      	movs	r3, #1
 80013e8:	e000      	b.n	80013ec <HAL_GPIO_Init+0x21c>
 80013ea:	2300      	movs	r3, #0
 80013ec:	69fa      	ldr	r2, [r7, #28]
 80013ee:	f002 0203 	and.w	r2, r2, #3
 80013f2:	0092      	lsls	r2, r2, #2
 80013f4:	4093      	lsls	r3, r2
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013fc:	4935      	ldr	r1, [pc, #212]	@ (80014d4 <HAL_GPIO_Init+0x304>)
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	089b      	lsrs	r3, r3, #2
 8001402:	3302      	adds	r3, #2
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800140a:	4b3a      	ldr	r3, [pc, #232]	@ (80014f4 <HAL_GPIO_Init+0x324>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800142e:	4a31      	ldr	r2, [pc, #196]	@ (80014f4 <HAL_GPIO_Init+0x324>)
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001434:	4b2f      	ldr	r3, [pc, #188]	@ (80014f4 <HAL_GPIO_Init+0x324>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001458:	4a26      	ldr	r2, [pc, #152]	@ (80014f4 <HAL_GPIO_Init+0x324>)
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800145e:	4b25      	ldr	r3, [pc, #148]	@ (80014f4 <HAL_GPIO_Init+0x324>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	43db      	mvns	r3, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4013      	ands	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001482:	4a1c      	ldr	r2, [pc, #112]	@ (80014f4 <HAL_GPIO_Init+0x324>)
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001488:	4b1a      	ldr	r3, [pc, #104]	@ (80014f4 <HAL_GPIO_Init+0x324>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	43db      	mvns	r3, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4013      	ands	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014ac:	4a11      	ldr	r2, [pc, #68]	@ (80014f4 <HAL_GPIO_Init+0x324>)
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3301      	adds	r3, #1
 80014b6:	61fb      	str	r3, [r7, #28]
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	2b0f      	cmp	r3, #15
 80014bc:	f67f ae96 	bls.w	80011ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014c0:	bf00      	nop
 80014c2:	bf00      	nop
 80014c4:	3724      	adds	r7, #36	@ 0x24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40013800 	.word	0x40013800
 80014d8:	40020000 	.word	0x40020000
 80014dc:	40020400 	.word	0x40020400
 80014e0:	40020800 	.word	0x40020800
 80014e4:	40020c00 	.word	0x40020c00
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40021400 	.word	0x40021400
 80014f0:	40021800 	.word	0x40021800
 80014f4:	40013c00 	.word	0x40013c00

080014f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	807b      	strh	r3, [r7, #2]
 8001504:	4613      	mov	r3, r2
 8001506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001508:	787b      	ldrb	r3, [r7, #1]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800150e:	887a      	ldrh	r2, [r7, #2]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001514:	e003      	b.n	800151e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001516:	887b      	ldrh	r3, [r7, #2]
 8001518:	041a      	lsls	r2, r3, #16
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	619a      	str	r2, [r3, #24]
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
	...

0800152c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e0cc      	b.n	80016da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001540:	4b68      	ldr	r3, [pc, #416]	@ (80016e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 030f 	and.w	r3, r3, #15
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	d90c      	bls.n	8001568 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154e:	4b65      	ldr	r3, [pc, #404]	@ (80016e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001556:	4b63      	ldr	r3, [pc, #396]	@ (80016e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	683a      	ldr	r2, [r7, #0]
 8001560:	429a      	cmp	r2, r3
 8001562:	d001      	beq.n	8001568 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e0b8      	b.n	80016da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d020      	beq.n	80015b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	2b00      	cmp	r3, #0
 800157e:	d005      	beq.n	800158c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001580:	4b59      	ldr	r3, [pc, #356]	@ (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	4a58      	ldr	r2, [pc, #352]	@ (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001586:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800158a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0308 	and.w	r3, r3, #8
 8001594:	2b00      	cmp	r3, #0
 8001596:	d005      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001598:	4b53      	ldr	r3, [pc, #332]	@ (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	4a52      	ldr	r2, [pc, #328]	@ (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 800159e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80015a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015a4:	4b50      	ldr	r3, [pc, #320]	@ (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	494d      	ldr	r1, [pc, #308]	@ (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d044      	beq.n	800164c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d107      	bne.n	80015da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ca:	4b47      	ldr	r3, [pc, #284]	@ (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d119      	bne.n	800160a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e07f      	b.n	80016da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d003      	beq.n	80015ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015e6:	2b03      	cmp	r3, #3
 80015e8:	d107      	bne.n	80015fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ea:	4b3f      	ldr	r3, [pc, #252]	@ (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d109      	bne.n	800160a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e06f      	b.n	80016da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015fa:	4b3b      	ldr	r3, [pc, #236]	@ (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e067      	b.n	80016da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800160a:	4b37      	ldr	r3, [pc, #220]	@ (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f023 0203 	bic.w	r2, r3, #3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	4934      	ldr	r1, [pc, #208]	@ (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001618:	4313      	orrs	r3, r2
 800161a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800161c:	f7ff fcc2 	bl	8000fa4 <HAL_GetTick>
 8001620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001622:	e00a      	b.n	800163a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001624:	f7ff fcbe 	bl	8000fa4 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001632:	4293      	cmp	r3, r2
 8001634:	d901      	bls.n	800163a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e04f      	b.n	80016da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800163a:	4b2b      	ldr	r3, [pc, #172]	@ (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f003 020c 	and.w	r2, r3, #12
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	429a      	cmp	r2, r3
 800164a:	d1eb      	bne.n	8001624 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800164c:	4b25      	ldr	r3, [pc, #148]	@ (80016e4 <HAL_RCC_ClockConfig+0x1b8>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 030f 	and.w	r3, r3, #15
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	429a      	cmp	r2, r3
 8001658:	d20c      	bcs.n	8001674 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165a:	4b22      	ldr	r3, [pc, #136]	@ (80016e4 <HAL_RCC_ClockConfig+0x1b8>)
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001662:	4b20      	ldr	r3, [pc, #128]	@ (80016e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	429a      	cmp	r2, r3
 800166e:	d001      	beq.n	8001674 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e032      	b.n	80016da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	d008      	beq.n	8001692 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001680:	4b19      	ldr	r3, [pc, #100]	@ (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	4916      	ldr	r1, [pc, #88]	@ (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 800168e:	4313      	orrs	r3, r2
 8001690:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	2b00      	cmp	r3, #0
 800169c:	d009      	beq.n	80016b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800169e:	4b12      	ldr	r3, [pc, #72]	@ (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	490e      	ldr	r1, [pc, #56]	@ (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016b2:	f000 f855 	bl	8001760 <HAL_RCC_GetSysClockFreq>
 80016b6:	4602      	mov	r2, r0
 80016b8:	4b0b      	ldr	r3, [pc, #44]	@ (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	091b      	lsrs	r3, r3, #4
 80016be:	f003 030f 	and.w	r3, r3, #15
 80016c2:	490a      	ldr	r1, [pc, #40]	@ (80016ec <HAL_RCC_ClockConfig+0x1c0>)
 80016c4:	5ccb      	ldrb	r3, [r1, r3]
 80016c6:	fa22 f303 	lsr.w	r3, r2, r3
 80016ca:	4a09      	ldr	r2, [pc, #36]	@ (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80016ce:	4b09      	ldr	r3, [pc, #36]	@ (80016f4 <HAL_RCC_ClockConfig+0x1c8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fc22 	bl	8000f1c <HAL_InitTick>

  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40023c00 	.word	0x40023c00
 80016e8:	40023800 	.word	0x40023800
 80016ec:	08003460 	.word	0x08003460
 80016f0:	20000000 	.word	0x20000000
 80016f4:	20000004 	.word	0x20000004

080016f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016fc:	4b03      	ldr	r3, [pc, #12]	@ (800170c <HAL_RCC_GetHCLKFreq+0x14>)
 80016fe:	681b      	ldr	r3, [r3, #0]
}
 8001700:	4618      	mov	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	20000000 	.word	0x20000000

08001710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001714:	f7ff fff0 	bl	80016f8 <HAL_RCC_GetHCLKFreq>
 8001718:	4602      	mov	r2, r0
 800171a:	4b05      	ldr	r3, [pc, #20]	@ (8001730 <HAL_RCC_GetPCLK1Freq+0x20>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	0a9b      	lsrs	r3, r3, #10
 8001720:	f003 0307 	and.w	r3, r3, #7
 8001724:	4903      	ldr	r1, [pc, #12]	@ (8001734 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001726:	5ccb      	ldrb	r3, [r1, r3]
 8001728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800172c:	4618      	mov	r0, r3
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40023800 	.word	0x40023800
 8001734:	08003470 	.word	0x08003470

08001738 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800173c:	f7ff ffdc 	bl	80016f8 <HAL_RCC_GetHCLKFreq>
 8001740:	4602      	mov	r2, r0
 8001742:	4b05      	ldr	r3, [pc, #20]	@ (8001758 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	0b5b      	lsrs	r3, r3, #13
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	4903      	ldr	r1, [pc, #12]	@ (800175c <HAL_RCC_GetPCLK2Freq+0x24>)
 800174e:	5ccb      	ldrb	r3, [r1, r3]
 8001750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001754:	4618      	mov	r0, r3
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40023800 	.word	0x40023800
 800175c:	08003470 	.word	0x08003470

08001760 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001764:	b0ae      	sub	sp, #184	@ 0xb8
 8001766:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001768:	2300      	movs	r3, #0
 800176a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800176e:	2300      	movs	r3, #0
 8001770:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001774:	2300      	movs	r3, #0
 8001776:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800177a:	2300      	movs	r3, #0
 800177c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001780:	2300      	movs	r3, #0
 8001782:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001786:	4bcb      	ldr	r3, [pc, #812]	@ (8001ab4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 030c 	and.w	r3, r3, #12
 800178e:	2b0c      	cmp	r3, #12
 8001790:	f200 8206 	bhi.w	8001ba0 <HAL_RCC_GetSysClockFreq+0x440>
 8001794:	a201      	add	r2, pc, #4	@ (adr r2, 800179c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179a:	bf00      	nop
 800179c:	080017d1 	.word	0x080017d1
 80017a0:	08001ba1 	.word	0x08001ba1
 80017a4:	08001ba1 	.word	0x08001ba1
 80017a8:	08001ba1 	.word	0x08001ba1
 80017ac:	080017d9 	.word	0x080017d9
 80017b0:	08001ba1 	.word	0x08001ba1
 80017b4:	08001ba1 	.word	0x08001ba1
 80017b8:	08001ba1 	.word	0x08001ba1
 80017bc:	080017e1 	.word	0x080017e1
 80017c0:	08001ba1 	.word	0x08001ba1
 80017c4:	08001ba1 	.word	0x08001ba1
 80017c8:	08001ba1 	.word	0x08001ba1
 80017cc:	080019d1 	.word	0x080019d1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017d0:	4bb9      	ldr	r3, [pc, #740]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x358>)
 80017d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017d6:	e1e7      	b.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017d8:	4bb8      	ldr	r3, [pc, #736]	@ (8001abc <HAL_RCC_GetSysClockFreq+0x35c>)
 80017da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017de:	e1e3      	b.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017e0:	4bb4      	ldr	r3, [pc, #720]	@ (8001ab4 <HAL_RCC_GetSysClockFreq+0x354>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017ec:	4bb1      	ldr	r3, [pc, #708]	@ (8001ab4 <HAL_RCC_GetSysClockFreq+0x354>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d071      	beq.n	80018dc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017f8:	4bae      	ldr	r3, [pc, #696]	@ (8001ab4 <HAL_RCC_GetSysClockFreq+0x354>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	099b      	lsrs	r3, r3, #6
 80017fe:	2200      	movs	r2, #0
 8001800:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001804:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001808:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800180c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001810:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001814:	2300      	movs	r3, #0
 8001816:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800181a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800181e:	4622      	mov	r2, r4
 8001820:	462b      	mov	r3, r5
 8001822:	f04f 0000 	mov.w	r0, #0
 8001826:	f04f 0100 	mov.w	r1, #0
 800182a:	0159      	lsls	r1, r3, #5
 800182c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001830:	0150      	lsls	r0, r2, #5
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4621      	mov	r1, r4
 8001838:	1a51      	subs	r1, r2, r1
 800183a:	6439      	str	r1, [r7, #64]	@ 0x40
 800183c:	4629      	mov	r1, r5
 800183e:	eb63 0301 	sbc.w	r3, r3, r1
 8001842:	647b      	str	r3, [r7, #68]	@ 0x44
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	f04f 0300 	mov.w	r3, #0
 800184c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001850:	4649      	mov	r1, r9
 8001852:	018b      	lsls	r3, r1, #6
 8001854:	4641      	mov	r1, r8
 8001856:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800185a:	4641      	mov	r1, r8
 800185c:	018a      	lsls	r2, r1, #6
 800185e:	4641      	mov	r1, r8
 8001860:	1a51      	subs	r1, r2, r1
 8001862:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001864:	4649      	mov	r1, r9
 8001866:	eb63 0301 	sbc.w	r3, r3, r1
 800186a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001878:	4649      	mov	r1, r9
 800187a:	00cb      	lsls	r3, r1, #3
 800187c:	4641      	mov	r1, r8
 800187e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001882:	4641      	mov	r1, r8
 8001884:	00ca      	lsls	r2, r1, #3
 8001886:	4610      	mov	r0, r2
 8001888:	4619      	mov	r1, r3
 800188a:	4603      	mov	r3, r0
 800188c:	4622      	mov	r2, r4
 800188e:	189b      	adds	r3, r3, r2
 8001890:	633b      	str	r3, [r7, #48]	@ 0x30
 8001892:	462b      	mov	r3, r5
 8001894:	460a      	mov	r2, r1
 8001896:	eb42 0303 	adc.w	r3, r2, r3
 800189a:	637b      	str	r3, [r7, #52]	@ 0x34
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	f04f 0300 	mov.w	r3, #0
 80018a4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80018a8:	4629      	mov	r1, r5
 80018aa:	024b      	lsls	r3, r1, #9
 80018ac:	4621      	mov	r1, r4
 80018ae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018b2:	4621      	mov	r1, r4
 80018b4:	024a      	lsls	r2, r1, #9
 80018b6:	4610      	mov	r0, r2
 80018b8:	4619      	mov	r1, r3
 80018ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018be:	2200      	movs	r2, #0
 80018c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80018c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80018c8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80018cc:	f7fe fca2 	bl	8000214 <__aeabi_uldivmod>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4613      	mov	r3, r2
 80018d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80018da:	e067      	b.n	80019ac <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018dc:	4b75      	ldr	r3, [pc, #468]	@ (8001ab4 <HAL_RCC_GetSysClockFreq+0x354>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	099b      	lsrs	r3, r3, #6
 80018e2:	2200      	movs	r2, #0
 80018e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80018e8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80018ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80018f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80018f6:	2300      	movs	r3, #0
 80018f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80018fa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80018fe:	4622      	mov	r2, r4
 8001900:	462b      	mov	r3, r5
 8001902:	f04f 0000 	mov.w	r0, #0
 8001906:	f04f 0100 	mov.w	r1, #0
 800190a:	0159      	lsls	r1, r3, #5
 800190c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001910:	0150      	lsls	r0, r2, #5
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4621      	mov	r1, r4
 8001918:	1a51      	subs	r1, r2, r1
 800191a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800191c:	4629      	mov	r1, r5
 800191e:	eb63 0301 	sbc.w	r3, r3, r1
 8001922:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	f04f 0300 	mov.w	r3, #0
 800192c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001930:	4649      	mov	r1, r9
 8001932:	018b      	lsls	r3, r1, #6
 8001934:	4641      	mov	r1, r8
 8001936:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800193a:	4641      	mov	r1, r8
 800193c:	018a      	lsls	r2, r1, #6
 800193e:	4641      	mov	r1, r8
 8001940:	ebb2 0a01 	subs.w	sl, r2, r1
 8001944:	4649      	mov	r1, r9
 8001946:	eb63 0b01 	sbc.w	fp, r3, r1
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	f04f 0300 	mov.w	r3, #0
 8001952:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001956:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800195a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800195e:	4692      	mov	sl, r2
 8001960:	469b      	mov	fp, r3
 8001962:	4623      	mov	r3, r4
 8001964:	eb1a 0303 	adds.w	r3, sl, r3
 8001968:	623b      	str	r3, [r7, #32]
 800196a:	462b      	mov	r3, r5
 800196c:	eb4b 0303 	adc.w	r3, fp, r3
 8001970:	627b      	str	r3, [r7, #36]	@ 0x24
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	f04f 0300 	mov.w	r3, #0
 800197a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800197e:	4629      	mov	r1, r5
 8001980:	028b      	lsls	r3, r1, #10
 8001982:	4621      	mov	r1, r4
 8001984:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001988:	4621      	mov	r1, r4
 800198a:	028a      	lsls	r2, r1, #10
 800198c:	4610      	mov	r0, r2
 800198e:	4619      	mov	r1, r3
 8001990:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001994:	2200      	movs	r2, #0
 8001996:	673b      	str	r3, [r7, #112]	@ 0x70
 8001998:	677a      	str	r2, [r7, #116]	@ 0x74
 800199a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800199e:	f7fe fc39 	bl	8000214 <__aeabi_uldivmod>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4613      	mov	r3, r2
 80019a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80019ac:	4b41      	ldr	r3, [pc, #260]	@ (8001ab4 <HAL_RCC_GetSysClockFreq+0x354>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	0c1b      	lsrs	r3, r3, #16
 80019b2:	f003 0303 	and.w	r3, r3, #3
 80019b6:	3301      	adds	r3, #1
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80019be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80019c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80019c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80019ce:	e0eb      	b.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019d0:	4b38      	ldr	r3, [pc, #224]	@ (8001ab4 <HAL_RCC_GetSysClockFreq+0x354>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019dc:	4b35      	ldr	r3, [pc, #212]	@ (8001ab4 <HAL_RCC_GetSysClockFreq+0x354>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d06b      	beq.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e8:	4b32      	ldr	r3, [pc, #200]	@ (8001ab4 <HAL_RCC_GetSysClockFreq+0x354>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	099b      	lsrs	r3, r3, #6
 80019ee:	2200      	movs	r2, #0
 80019f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80019f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80019f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80019f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80019fc:	2300      	movs	r3, #0
 80019fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8001a00:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001a04:	4622      	mov	r2, r4
 8001a06:	462b      	mov	r3, r5
 8001a08:	f04f 0000 	mov.w	r0, #0
 8001a0c:	f04f 0100 	mov.w	r1, #0
 8001a10:	0159      	lsls	r1, r3, #5
 8001a12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a16:	0150      	lsls	r0, r2, #5
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4621      	mov	r1, r4
 8001a1e:	1a51      	subs	r1, r2, r1
 8001a20:	61b9      	str	r1, [r7, #24]
 8001a22:	4629      	mov	r1, r5
 8001a24:	eb63 0301 	sbc.w	r3, r3, r1
 8001a28:	61fb      	str	r3, [r7, #28]
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	f04f 0300 	mov.w	r3, #0
 8001a32:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001a36:	4659      	mov	r1, fp
 8001a38:	018b      	lsls	r3, r1, #6
 8001a3a:	4651      	mov	r1, sl
 8001a3c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a40:	4651      	mov	r1, sl
 8001a42:	018a      	lsls	r2, r1, #6
 8001a44:	4651      	mov	r1, sl
 8001a46:	ebb2 0801 	subs.w	r8, r2, r1
 8001a4a:	4659      	mov	r1, fp
 8001a4c:	eb63 0901 	sbc.w	r9, r3, r1
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	f04f 0300 	mov.w	r3, #0
 8001a58:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a5c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a60:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a64:	4690      	mov	r8, r2
 8001a66:	4699      	mov	r9, r3
 8001a68:	4623      	mov	r3, r4
 8001a6a:	eb18 0303 	adds.w	r3, r8, r3
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	462b      	mov	r3, r5
 8001a72:	eb49 0303 	adc.w	r3, r9, r3
 8001a76:	617b      	str	r3, [r7, #20]
 8001a78:	f04f 0200 	mov.w	r2, #0
 8001a7c:	f04f 0300 	mov.w	r3, #0
 8001a80:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001a84:	4629      	mov	r1, r5
 8001a86:	024b      	lsls	r3, r1, #9
 8001a88:	4621      	mov	r1, r4
 8001a8a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a8e:	4621      	mov	r1, r4
 8001a90:	024a      	lsls	r2, r1, #9
 8001a92:	4610      	mov	r0, r2
 8001a94:	4619      	mov	r1, r3
 8001a96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001a9e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001aa0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001aa4:	f7fe fbb6 	bl	8000214 <__aeabi_uldivmod>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4613      	mov	r3, r2
 8001aae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001ab2:	e065      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0x420>
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	00f42400 	.word	0x00f42400
 8001abc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ac0:	4b3d      	ldr	r3, [pc, #244]	@ (8001bb8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	099b      	lsrs	r3, r3, #6
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	4618      	mov	r0, r3
 8001aca:	4611      	mov	r1, r2
 8001acc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ad0:	653b      	str	r3, [r7, #80]	@ 0x50
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	657b      	str	r3, [r7, #84]	@ 0x54
 8001ad6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001ada:	4642      	mov	r2, r8
 8001adc:	464b      	mov	r3, r9
 8001ade:	f04f 0000 	mov.w	r0, #0
 8001ae2:	f04f 0100 	mov.w	r1, #0
 8001ae6:	0159      	lsls	r1, r3, #5
 8001ae8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aec:	0150      	lsls	r0, r2, #5
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4641      	mov	r1, r8
 8001af4:	1a51      	subs	r1, r2, r1
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	4649      	mov	r1, r9
 8001afa:	eb63 0301 	sbc.w	r3, r3, r1
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	f04f 0300 	mov.w	r3, #0
 8001b08:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001b0c:	4659      	mov	r1, fp
 8001b0e:	018b      	lsls	r3, r1, #6
 8001b10:	4651      	mov	r1, sl
 8001b12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b16:	4651      	mov	r1, sl
 8001b18:	018a      	lsls	r2, r1, #6
 8001b1a:	4651      	mov	r1, sl
 8001b1c:	1a54      	subs	r4, r2, r1
 8001b1e:	4659      	mov	r1, fp
 8001b20:	eb63 0501 	sbc.w	r5, r3, r1
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	f04f 0300 	mov.w	r3, #0
 8001b2c:	00eb      	lsls	r3, r5, #3
 8001b2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b32:	00e2      	lsls	r2, r4, #3
 8001b34:	4614      	mov	r4, r2
 8001b36:	461d      	mov	r5, r3
 8001b38:	4643      	mov	r3, r8
 8001b3a:	18e3      	adds	r3, r4, r3
 8001b3c:	603b      	str	r3, [r7, #0]
 8001b3e:	464b      	mov	r3, r9
 8001b40:	eb45 0303 	adc.w	r3, r5, r3
 8001b44:	607b      	str	r3, [r7, #4]
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	f04f 0300 	mov.w	r3, #0
 8001b4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b52:	4629      	mov	r1, r5
 8001b54:	028b      	lsls	r3, r1, #10
 8001b56:	4621      	mov	r1, r4
 8001b58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b5c:	4621      	mov	r1, r4
 8001b5e:	028a      	lsls	r2, r1, #10
 8001b60:	4610      	mov	r0, r2
 8001b62:	4619      	mov	r1, r3
 8001b64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b68:	2200      	movs	r2, #0
 8001b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001b6c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001b6e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001b72:	f7fe fb4f 	bl	8000214 <__aeabi_uldivmod>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001b80:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	0f1b      	lsrs	r3, r3, #28
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001b8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001b92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001b9e:	e003      	b.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ba0:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0x45c>)
 8001ba2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001ba6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ba8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	37b8      	adds	r7, #184	@ 0xb8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	00f42400 	.word	0x00f42400

08001bc0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e28d      	b.n	80020ee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 8083 	beq.w	8001ce6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001be0:	4b94      	ldr	r3, [pc, #592]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 030c 	and.w	r3, r3, #12
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d019      	beq.n	8001c20 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001bec:	4b91      	ldr	r3, [pc, #580]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 030c 	and.w	r3, r3, #12
        || \
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d106      	bne.n	8001c06 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001bf8:	4b8e      	ldr	r3, [pc, #568]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c04:	d00c      	beq.n	8001c20 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c06:	4b8b      	ldr	r3, [pc, #556]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001c0e:	2b0c      	cmp	r3, #12
 8001c10:	d112      	bne.n	8001c38 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c12:	4b88      	ldr	r3, [pc, #544]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c1e:	d10b      	bne.n	8001c38 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c20:	4b84      	ldr	r3, [pc, #528]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d05b      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x124>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d157      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e25a      	b.n	80020ee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c40:	d106      	bne.n	8001c50 <HAL_RCC_OscConfig+0x90>
 8001c42:	4b7c      	ldr	r3, [pc, #496]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a7b      	ldr	r2, [pc, #492]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001c48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	e01d      	b.n	8001c8c <HAL_RCC_OscConfig+0xcc>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c58:	d10c      	bne.n	8001c74 <HAL_RCC_OscConfig+0xb4>
 8001c5a:	4b76      	ldr	r3, [pc, #472]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a75      	ldr	r2, [pc, #468]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001c60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	4b73      	ldr	r3, [pc, #460]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a72      	ldr	r2, [pc, #456]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001c6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	e00b      	b.n	8001c8c <HAL_RCC_OscConfig+0xcc>
 8001c74:	4b6f      	ldr	r3, [pc, #444]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a6e      	ldr	r2, [pc, #440]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001c7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c7e:	6013      	str	r3, [r2, #0]
 8001c80:	4b6c      	ldr	r3, [pc, #432]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a6b      	ldr	r2, [pc, #428]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001c86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d013      	beq.n	8001cbc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c94:	f7ff f986 	bl	8000fa4 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c9c:	f7ff f982 	bl	8000fa4 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b64      	cmp	r3, #100	@ 0x64
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e21f      	b.n	80020ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cae:	4b61      	ldr	r3, [pc, #388]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0f0      	beq.n	8001c9c <HAL_RCC_OscConfig+0xdc>
 8001cba:	e014      	b.n	8001ce6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbc:	f7ff f972 	bl	8000fa4 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc4:	f7ff f96e 	bl	8000fa4 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b64      	cmp	r3, #100	@ 0x64
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e20b      	b.n	80020ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cd6:	4b57      	ldr	r3, [pc, #348]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f0      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x104>
 8001ce2:	e000      	b.n	8001ce6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d06f      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001cf2:	4b50      	ldr	r3, [pc, #320]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 030c 	and.w	r3, r3, #12
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d017      	beq.n	8001d2e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001cfe:	4b4d      	ldr	r3, [pc, #308]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 030c 	and.w	r3, r3, #12
        || \
 8001d06:	2b08      	cmp	r3, #8
 8001d08:	d105      	bne.n	8001d16 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001d0a:	4b4a      	ldr	r3, [pc, #296]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00b      	beq.n	8001d2e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d16:	4b47      	ldr	r3, [pc, #284]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001d1e:	2b0c      	cmp	r3, #12
 8001d20:	d11c      	bne.n	8001d5c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d22:	4b44      	ldr	r3, [pc, #272]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d116      	bne.n	8001d5c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2e:	4b41      	ldr	r3, [pc, #260]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d005      	beq.n	8001d46 <HAL_RCC_OscConfig+0x186>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d001      	beq.n	8001d46 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e1d3      	b.n	80020ee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d46:	4b3b      	ldr	r3, [pc, #236]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	4937      	ldr	r1, [pc, #220]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d5a:	e03a      	b.n	8001dd2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d020      	beq.n	8001da6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d64:	4b34      	ldr	r3, [pc, #208]	@ (8001e38 <HAL_RCC_OscConfig+0x278>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6a:	f7ff f91b 	bl	8000fa4 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d72:	f7ff f917 	bl	8000fa4 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e1b4      	b.n	80020ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d84:	4b2b      	ldr	r3, [pc, #172]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0f0      	beq.n	8001d72 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d90:	4b28      	ldr	r3, [pc, #160]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	4925      	ldr	r1, [pc, #148]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	600b      	str	r3, [r1, #0]
 8001da4:	e015      	b.n	8001dd2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001da6:	4b24      	ldr	r3, [pc, #144]	@ (8001e38 <HAL_RCC_OscConfig+0x278>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dac:	f7ff f8fa 	bl	8000fa4 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001db4:	f7ff f8f6 	bl	8000fa4 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e193      	b.n	80020ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f0      	bne.n	8001db4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d036      	beq.n	8001e4c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d016      	beq.n	8001e14 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001de6:	4b15      	ldr	r3, [pc, #84]	@ (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dec:	f7ff f8da 	bl	8000fa4 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df4:	f7ff f8d6 	bl	8000fa4 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e173      	b.n	80020ee <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e06:	4b0b      	ldr	r3, [pc, #44]	@ (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001e08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0f0      	beq.n	8001df4 <HAL_RCC_OscConfig+0x234>
 8001e12:	e01b      	b.n	8001e4c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e14:	4b09      	ldr	r3, [pc, #36]	@ (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1a:	f7ff f8c3 	bl	8000fa4 <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e20:	e00e      	b.n	8001e40 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e22:	f7ff f8bf 	bl	8000fa4 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d907      	bls.n	8001e40 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e15c      	b.n	80020ee <HAL_RCC_OscConfig+0x52e>
 8001e34:	40023800 	.word	0x40023800
 8001e38:	42470000 	.word	0x42470000
 8001e3c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e40:	4b8a      	ldr	r3, [pc, #552]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001e42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1ea      	bne.n	8001e22 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 8097 	beq.w	8001f88 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e5e:	4b83      	ldr	r3, [pc, #524]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10f      	bne.n	8001e8a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	4b7f      	ldr	r3, [pc, #508]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e72:	4a7e      	ldr	r2, [pc, #504]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001e74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e7a:	4b7c      	ldr	r3, [pc, #496]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e82:	60bb      	str	r3, [r7, #8]
 8001e84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e86:	2301      	movs	r3, #1
 8001e88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8a:	4b79      	ldr	r3, [pc, #484]	@ (8002070 <HAL_RCC_OscConfig+0x4b0>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d118      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e96:	4b76      	ldr	r3, [pc, #472]	@ (8002070 <HAL_RCC_OscConfig+0x4b0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a75      	ldr	r2, [pc, #468]	@ (8002070 <HAL_RCC_OscConfig+0x4b0>)
 8001e9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ea0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ea2:	f7ff f87f 	bl	8000fa4 <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eaa:	f7ff f87b 	bl	8000fa4 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e118      	b.n	80020ee <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ebc:	4b6c      	ldr	r3, [pc, #432]	@ (8002070 <HAL_RCC_OscConfig+0x4b0>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0f0      	beq.n	8001eaa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d106      	bne.n	8001ede <HAL_RCC_OscConfig+0x31e>
 8001ed0:	4b66      	ldr	r3, [pc, #408]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ed4:	4a65      	ldr	r2, [pc, #404]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	6713      	str	r3, [r2, #112]	@ 0x70
 8001edc:	e01c      	b.n	8001f18 <HAL_RCC_OscConfig+0x358>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2b05      	cmp	r3, #5
 8001ee4:	d10c      	bne.n	8001f00 <HAL_RCC_OscConfig+0x340>
 8001ee6:	4b61      	ldr	r3, [pc, #388]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eea:	4a60      	ldr	r2, [pc, #384]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001eec:	f043 0304 	orr.w	r3, r3, #4
 8001ef0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ef2:	4b5e      	ldr	r3, [pc, #376]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ef6:	4a5d      	ldr	r2, [pc, #372]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001efe:	e00b      	b.n	8001f18 <HAL_RCC_OscConfig+0x358>
 8001f00:	4b5a      	ldr	r3, [pc, #360]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001f02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f04:	4a59      	ldr	r2, [pc, #356]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001f06:	f023 0301 	bic.w	r3, r3, #1
 8001f0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f0c:	4b57      	ldr	r3, [pc, #348]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f10:	4a56      	ldr	r2, [pc, #344]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001f12:	f023 0304 	bic.w	r3, r3, #4
 8001f16:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d015      	beq.n	8001f4c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f20:	f7ff f840 	bl	8000fa4 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f26:	e00a      	b.n	8001f3e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f28:	f7ff f83c 	bl	8000fa4 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e0d7      	b.n	80020ee <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f3e:	4b4b      	ldr	r3, [pc, #300]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0ee      	beq.n	8001f28 <HAL_RCC_OscConfig+0x368>
 8001f4a:	e014      	b.n	8001f76 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f4c:	f7ff f82a 	bl	8000fa4 <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f52:	e00a      	b.n	8001f6a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f54:	f7ff f826 	bl	8000fa4 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e0c1      	b.n	80020ee <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f6a:	4b40      	ldr	r3, [pc, #256]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1ee      	bne.n	8001f54 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f76:	7dfb      	ldrb	r3, [r7, #23]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d105      	bne.n	8001f88 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f7c:	4b3b      	ldr	r3, [pc, #236]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f80:	4a3a      	ldr	r2, [pc, #232]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001f82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f86:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f000 80ad 	beq.w	80020ec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f92:	4b36      	ldr	r3, [pc, #216]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 030c 	and.w	r3, r3, #12
 8001f9a:	2b08      	cmp	r3, #8
 8001f9c:	d060      	beq.n	8002060 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d145      	bne.n	8002032 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa6:	4b33      	ldr	r3, [pc, #204]	@ (8002074 <HAL_RCC_OscConfig+0x4b4>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fac:	f7fe fffa 	bl	8000fa4 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb4:	f7fe fff6 	bl	8000fa4 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e093      	b.n	80020ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc6:	4b29      	ldr	r3, [pc, #164]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f0      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69da      	ldr	r2, [r3, #28]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe0:	019b      	lsls	r3, r3, #6
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe8:	085b      	lsrs	r3, r3, #1
 8001fea:	3b01      	subs	r3, #1
 8001fec:	041b      	lsls	r3, r3, #16
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff4:	061b      	lsls	r3, r3, #24
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffc:	071b      	lsls	r3, r3, #28
 8001ffe:	491b      	ldr	r1, [pc, #108]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8002000:	4313      	orrs	r3, r2
 8002002:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002004:	4b1b      	ldr	r3, [pc, #108]	@ (8002074 <HAL_RCC_OscConfig+0x4b4>)
 8002006:	2201      	movs	r2, #1
 8002008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200a:	f7fe ffcb 	bl	8000fa4 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002012:	f7fe ffc7 	bl	8000fa4 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e064      	b.n	80020ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002024:	4b11      	ldr	r3, [pc, #68]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0f0      	beq.n	8002012 <HAL_RCC_OscConfig+0x452>
 8002030:	e05c      	b.n	80020ec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002032:	4b10      	ldr	r3, [pc, #64]	@ (8002074 <HAL_RCC_OscConfig+0x4b4>)
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002038:	f7fe ffb4 	bl	8000fa4 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002040:	f7fe ffb0 	bl	8000fa4 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e04d      	b.n	80020ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002052:	4b06      	ldr	r3, [pc, #24]	@ (800206c <HAL_RCC_OscConfig+0x4ac>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f0      	bne.n	8002040 <HAL_RCC_OscConfig+0x480>
 800205e:	e045      	b.n	80020ec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d107      	bne.n	8002078 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e040      	b.n	80020ee <HAL_RCC_OscConfig+0x52e>
 800206c:	40023800 	.word	0x40023800
 8002070:	40007000 	.word	0x40007000
 8002074:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002078:	4b1f      	ldr	r3, [pc, #124]	@ (80020f8 <HAL_RCC_OscConfig+0x538>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d030      	beq.n	80020e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002090:	429a      	cmp	r2, r3
 8002092:	d129      	bne.n	80020e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800209e:	429a      	cmp	r2, r3
 80020a0:	d122      	bne.n	80020e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80020a8:	4013      	ands	r3, r2
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80020ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d119      	bne.n	80020e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020be:	085b      	lsrs	r3, r3, #1
 80020c0:	3b01      	subs	r3, #1
 80020c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d10f      	bne.n	80020e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d107      	bne.n	80020e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d001      	beq.n	80020ec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e000      	b.n	80020ee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40023800 	.word	0x40023800

080020fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e041      	b.n	8002192 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d106      	bne.n	8002128 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7fe fd16 	bl	8000b54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2202      	movs	r2, #2
 800212c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3304      	adds	r3, #4
 8002138:	4619      	mov	r1, r3
 800213a:	4610      	mov	r0, r2
 800213c:	f000 f9b8 	bl	80024b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
	...

0800219c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d109      	bne.n	80021c0 <HAL_TIM_PWM_Start+0x24>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	bf14      	ite	ne
 80021b8:	2301      	movne	r3, #1
 80021ba:	2300      	moveq	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	e022      	b.n	8002206 <HAL_TIM_PWM_Start+0x6a>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	d109      	bne.n	80021da <HAL_TIM_PWM_Start+0x3e>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	bf14      	ite	ne
 80021d2:	2301      	movne	r3, #1
 80021d4:	2300      	moveq	r3, #0
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	e015      	b.n	8002206 <HAL_TIM_PWM_Start+0x6a>
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	2b08      	cmp	r3, #8
 80021de:	d109      	bne.n	80021f4 <HAL_TIM_PWM_Start+0x58>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	bf14      	ite	ne
 80021ec:	2301      	movne	r3, #1
 80021ee:	2300      	moveq	r3, #0
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	e008      	b.n	8002206 <HAL_TIM_PWM_Start+0x6a>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	bf14      	ite	ne
 8002200:	2301      	movne	r3, #1
 8002202:	2300      	moveq	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e07c      	b.n	8002308 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d104      	bne.n	800221e <HAL_TIM_PWM_Start+0x82>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2202      	movs	r2, #2
 8002218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800221c:	e013      	b.n	8002246 <HAL_TIM_PWM_Start+0xaa>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	2b04      	cmp	r3, #4
 8002222:	d104      	bne.n	800222e <HAL_TIM_PWM_Start+0x92>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2202      	movs	r2, #2
 8002228:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800222c:	e00b      	b.n	8002246 <HAL_TIM_PWM_Start+0xaa>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	2b08      	cmp	r3, #8
 8002232:	d104      	bne.n	800223e <HAL_TIM_PWM_Start+0xa2>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2202      	movs	r2, #2
 8002238:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800223c:	e003      	b.n	8002246 <HAL_TIM_PWM_Start+0xaa>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2202      	movs	r2, #2
 8002242:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2201      	movs	r2, #1
 800224c:	6839      	ldr	r1, [r7, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f000 fb8a 	bl	8002968 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a2d      	ldr	r2, [pc, #180]	@ (8002310 <HAL_TIM_PWM_Start+0x174>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d004      	beq.n	8002268 <HAL_TIM_PWM_Start+0xcc>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a2c      	ldr	r2, [pc, #176]	@ (8002314 <HAL_TIM_PWM_Start+0x178>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d101      	bne.n	800226c <HAL_TIM_PWM_Start+0xd0>
 8002268:	2301      	movs	r3, #1
 800226a:	e000      	b.n	800226e <HAL_TIM_PWM_Start+0xd2>
 800226c:	2300      	movs	r3, #0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d007      	beq.n	8002282 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002280:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a22      	ldr	r2, [pc, #136]	@ (8002310 <HAL_TIM_PWM_Start+0x174>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d022      	beq.n	80022d2 <HAL_TIM_PWM_Start+0x136>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002294:	d01d      	beq.n	80022d2 <HAL_TIM_PWM_Start+0x136>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a1f      	ldr	r2, [pc, #124]	@ (8002318 <HAL_TIM_PWM_Start+0x17c>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d018      	beq.n	80022d2 <HAL_TIM_PWM_Start+0x136>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a1d      	ldr	r2, [pc, #116]	@ (800231c <HAL_TIM_PWM_Start+0x180>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d013      	beq.n	80022d2 <HAL_TIM_PWM_Start+0x136>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a1c      	ldr	r2, [pc, #112]	@ (8002320 <HAL_TIM_PWM_Start+0x184>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d00e      	beq.n	80022d2 <HAL_TIM_PWM_Start+0x136>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a16      	ldr	r2, [pc, #88]	@ (8002314 <HAL_TIM_PWM_Start+0x178>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d009      	beq.n	80022d2 <HAL_TIM_PWM_Start+0x136>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a18      	ldr	r2, [pc, #96]	@ (8002324 <HAL_TIM_PWM_Start+0x188>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d004      	beq.n	80022d2 <HAL_TIM_PWM_Start+0x136>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a16      	ldr	r2, [pc, #88]	@ (8002328 <HAL_TIM_PWM_Start+0x18c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d111      	bne.n	80022f6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2b06      	cmp	r3, #6
 80022e2:	d010      	beq.n	8002306 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0201 	orr.w	r2, r2, #1
 80022f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022f4:	e007      	b.n	8002306 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f042 0201 	orr.w	r2, r2, #1
 8002304:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40010000 	.word	0x40010000
 8002314:	40010400 	.word	0x40010400
 8002318:	40000400 	.word	0x40000400
 800231c:	40000800 	.word	0x40000800
 8002320:	40000c00 	.word	0x40000c00
 8002324:	40014000 	.word	0x40014000
 8002328:	40001800 	.word	0x40001800

0800232c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002338:	2300      	movs	r3, #0
 800233a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002342:	2b01      	cmp	r3, #1
 8002344:	d101      	bne.n	800234a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002346:	2302      	movs	r3, #2
 8002348:	e0ae      	b.n	80024a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b0c      	cmp	r3, #12
 8002356:	f200 809f 	bhi.w	8002498 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800235a:	a201      	add	r2, pc, #4	@ (adr r2, 8002360 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800235c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002360:	08002395 	.word	0x08002395
 8002364:	08002499 	.word	0x08002499
 8002368:	08002499 	.word	0x08002499
 800236c:	08002499 	.word	0x08002499
 8002370:	080023d5 	.word	0x080023d5
 8002374:	08002499 	.word	0x08002499
 8002378:	08002499 	.word	0x08002499
 800237c:	08002499 	.word	0x08002499
 8002380:	08002417 	.word	0x08002417
 8002384:	08002499 	.word	0x08002499
 8002388:	08002499 	.word	0x08002499
 800238c:	08002499 	.word	0x08002499
 8002390:	08002457 	.word	0x08002457
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68b9      	ldr	r1, [r7, #8]
 800239a:	4618      	mov	r0, r3
 800239c:	f000 f934 	bl	8002608 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699a      	ldr	r2, [r3, #24]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 0208 	orr.w	r2, r2, #8
 80023ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	699a      	ldr	r2, [r3, #24]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0204 	bic.w	r2, r2, #4
 80023be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6999      	ldr	r1, [r3, #24]
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	691a      	ldr	r2, [r3, #16]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	619a      	str	r2, [r3, #24]
      break;
 80023d2:	e064      	b.n	800249e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68b9      	ldr	r1, [r7, #8]
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 f984 	bl	80026e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	699a      	ldr	r2, [r3, #24]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	699a      	ldr	r2, [r3, #24]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6999      	ldr	r1, [r3, #24]
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	021a      	lsls	r2, r3, #8
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	619a      	str	r2, [r3, #24]
      break;
 8002414:	e043      	b.n	800249e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68b9      	ldr	r1, [r7, #8]
 800241c:	4618      	mov	r0, r3
 800241e:	f000 f9d9 	bl	80027d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	69da      	ldr	r2, [r3, #28]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f042 0208 	orr.w	r2, r2, #8
 8002430:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	69da      	ldr	r2, [r3, #28]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 0204 	bic.w	r2, r2, #4
 8002440:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	69d9      	ldr	r1, [r3, #28]
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	691a      	ldr	r2, [r3, #16]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	61da      	str	r2, [r3, #28]
      break;
 8002454:	e023      	b.n	800249e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68b9      	ldr	r1, [r7, #8]
 800245c:	4618      	mov	r0, r3
 800245e:	f000 fa2d 	bl	80028bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	69da      	ldr	r2, [r3, #28]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002470:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	69da      	ldr	r2, [r3, #28]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002480:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	69d9      	ldr	r1, [r3, #28]
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	021a      	lsls	r2, r3, #8
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	61da      	str	r2, [r3, #28]
      break;
 8002496:	e002      	b.n	800249e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	75fb      	strb	r3, [r7, #23]
      break;
 800249c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80024a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a46      	ldr	r2, [pc, #280]	@ (80025dc <TIM_Base_SetConfig+0x12c>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d013      	beq.n	80024f0 <TIM_Base_SetConfig+0x40>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024ce:	d00f      	beq.n	80024f0 <TIM_Base_SetConfig+0x40>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a43      	ldr	r2, [pc, #268]	@ (80025e0 <TIM_Base_SetConfig+0x130>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d00b      	beq.n	80024f0 <TIM_Base_SetConfig+0x40>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a42      	ldr	r2, [pc, #264]	@ (80025e4 <TIM_Base_SetConfig+0x134>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d007      	beq.n	80024f0 <TIM_Base_SetConfig+0x40>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a41      	ldr	r2, [pc, #260]	@ (80025e8 <TIM_Base_SetConfig+0x138>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d003      	beq.n	80024f0 <TIM_Base_SetConfig+0x40>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a40      	ldr	r2, [pc, #256]	@ (80025ec <TIM_Base_SetConfig+0x13c>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d108      	bne.n	8002502 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	4313      	orrs	r3, r2
 8002500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a35      	ldr	r2, [pc, #212]	@ (80025dc <TIM_Base_SetConfig+0x12c>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d02b      	beq.n	8002562 <TIM_Base_SetConfig+0xb2>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002510:	d027      	beq.n	8002562 <TIM_Base_SetConfig+0xb2>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a32      	ldr	r2, [pc, #200]	@ (80025e0 <TIM_Base_SetConfig+0x130>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d023      	beq.n	8002562 <TIM_Base_SetConfig+0xb2>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a31      	ldr	r2, [pc, #196]	@ (80025e4 <TIM_Base_SetConfig+0x134>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d01f      	beq.n	8002562 <TIM_Base_SetConfig+0xb2>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a30      	ldr	r2, [pc, #192]	@ (80025e8 <TIM_Base_SetConfig+0x138>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d01b      	beq.n	8002562 <TIM_Base_SetConfig+0xb2>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a2f      	ldr	r2, [pc, #188]	@ (80025ec <TIM_Base_SetConfig+0x13c>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d017      	beq.n	8002562 <TIM_Base_SetConfig+0xb2>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a2e      	ldr	r2, [pc, #184]	@ (80025f0 <TIM_Base_SetConfig+0x140>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d013      	beq.n	8002562 <TIM_Base_SetConfig+0xb2>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a2d      	ldr	r2, [pc, #180]	@ (80025f4 <TIM_Base_SetConfig+0x144>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d00f      	beq.n	8002562 <TIM_Base_SetConfig+0xb2>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a2c      	ldr	r2, [pc, #176]	@ (80025f8 <TIM_Base_SetConfig+0x148>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d00b      	beq.n	8002562 <TIM_Base_SetConfig+0xb2>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a2b      	ldr	r2, [pc, #172]	@ (80025fc <TIM_Base_SetConfig+0x14c>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d007      	beq.n	8002562 <TIM_Base_SetConfig+0xb2>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a2a      	ldr	r2, [pc, #168]	@ (8002600 <TIM_Base_SetConfig+0x150>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d003      	beq.n	8002562 <TIM_Base_SetConfig+0xb2>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a29      	ldr	r2, [pc, #164]	@ (8002604 <TIM_Base_SetConfig+0x154>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d108      	bne.n	8002574 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002568:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	4313      	orrs	r3, r2
 8002572:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	4313      	orrs	r3, r2
 8002580:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a10      	ldr	r2, [pc, #64]	@ (80025dc <TIM_Base_SetConfig+0x12c>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d003      	beq.n	80025a8 <TIM_Base_SetConfig+0xf8>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a12      	ldr	r2, [pc, #72]	@ (80025ec <TIM_Base_SetConfig+0x13c>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d103      	bne.n	80025b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	691a      	ldr	r2, [r3, #16]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d105      	bne.n	80025ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	f023 0201 	bic.w	r2, r3, #1
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	611a      	str	r2, [r3, #16]
  }
}
 80025ce:	bf00      	nop
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	40010000 	.word	0x40010000
 80025e0:	40000400 	.word	0x40000400
 80025e4:	40000800 	.word	0x40000800
 80025e8:	40000c00 	.word	0x40000c00
 80025ec:	40010400 	.word	0x40010400
 80025f0:	40014000 	.word	0x40014000
 80025f4:	40014400 	.word	0x40014400
 80025f8:	40014800 	.word	0x40014800
 80025fc:	40001800 	.word	0x40001800
 8002600:	40001c00 	.word	0x40001c00
 8002604:	40002000 	.word	0x40002000

08002608 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002608:	b480      	push	{r7}
 800260a:	b087      	sub	sp, #28
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	f023 0201 	bic.w	r2, r3, #1
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f023 0303 	bic.w	r3, r3, #3
 800263e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	4313      	orrs	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f023 0302 	bic.w	r3, r3, #2
 8002650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	4313      	orrs	r3, r2
 800265a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a20      	ldr	r2, [pc, #128]	@ (80026e0 <TIM_OC1_SetConfig+0xd8>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d003      	beq.n	800266c <TIM_OC1_SetConfig+0x64>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a1f      	ldr	r2, [pc, #124]	@ (80026e4 <TIM_OC1_SetConfig+0xdc>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d10c      	bne.n	8002686 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f023 0308 	bic.w	r3, r3, #8
 8002672:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	4313      	orrs	r3, r2
 800267c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f023 0304 	bic.w	r3, r3, #4
 8002684:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a15      	ldr	r2, [pc, #84]	@ (80026e0 <TIM_OC1_SetConfig+0xd8>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d003      	beq.n	8002696 <TIM_OC1_SetConfig+0x8e>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a14      	ldr	r2, [pc, #80]	@ (80026e4 <TIM_OC1_SetConfig+0xdc>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d111      	bne.n	80026ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800269c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80026a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	621a      	str	r2, [r3, #32]
}
 80026d4:	bf00      	nop
 80026d6:	371c      	adds	r7, #28
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	40010000 	.word	0x40010000
 80026e4:	40010400 	.word	0x40010400

080026e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b087      	sub	sp, #28
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	f023 0210 	bic.w	r2, r3, #16
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800271e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	021b      	lsls	r3, r3, #8
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	4313      	orrs	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	f023 0320 	bic.w	r3, r3, #32
 8002732:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	011b      	lsls	r3, r3, #4
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	4313      	orrs	r3, r2
 800273e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a22      	ldr	r2, [pc, #136]	@ (80027cc <TIM_OC2_SetConfig+0xe4>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d003      	beq.n	8002750 <TIM_OC2_SetConfig+0x68>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a21      	ldr	r2, [pc, #132]	@ (80027d0 <TIM_OC2_SetConfig+0xe8>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d10d      	bne.n	800276c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	011b      	lsls	r3, r3, #4
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	4313      	orrs	r3, r2
 8002762:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800276a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a17      	ldr	r2, [pc, #92]	@ (80027cc <TIM_OC2_SetConfig+0xe4>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d003      	beq.n	800277c <TIM_OC2_SetConfig+0x94>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a16      	ldr	r2, [pc, #88]	@ (80027d0 <TIM_OC2_SetConfig+0xe8>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d113      	bne.n	80027a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002782:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800278a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	621a      	str	r2, [r3, #32]
}
 80027be:	bf00      	nop
 80027c0:	371c      	adds	r7, #28
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40010000 	.word	0x40010000
 80027d0:	40010400 	.word	0x40010400

080027d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b087      	sub	sp, #28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f023 0303 	bic.w	r3, r3, #3
 800280a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	4313      	orrs	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800281c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	021b      	lsls	r3, r3, #8
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	4313      	orrs	r3, r2
 8002828:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a21      	ldr	r2, [pc, #132]	@ (80028b4 <TIM_OC3_SetConfig+0xe0>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d003      	beq.n	800283a <TIM_OC3_SetConfig+0x66>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a20      	ldr	r2, [pc, #128]	@ (80028b8 <TIM_OC3_SetConfig+0xe4>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d10d      	bne.n	8002856 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002840:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	021b      	lsls	r3, r3, #8
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	4313      	orrs	r3, r2
 800284c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002854:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a16      	ldr	r2, [pc, #88]	@ (80028b4 <TIM_OC3_SetConfig+0xe0>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d003      	beq.n	8002866 <TIM_OC3_SetConfig+0x92>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a15      	ldr	r2, [pc, #84]	@ (80028b8 <TIM_OC3_SetConfig+0xe4>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d113      	bne.n	800288e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800286c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002874:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4313      	orrs	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	011b      	lsls	r3, r3, #4
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	4313      	orrs	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	621a      	str	r2, [r3, #32]
}
 80028a8:	bf00      	nop
 80028aa:	371c      	adds	r7, #28
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	40010000 	.word	0x40010000
 80028b8:	40010400 	.word	0x40010400

080028bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028bc:	b480      	push	{r7}
 80028be:	b087      	sub	sp, #28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80028ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	021b      	lsls	r3, r3, #8
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002906:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	031b      	lsls	r3, r3, #12
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4313      	orrs	r3, r2
 8002912:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a12      	ldr	r2, [pc, #72]	@ (8002960 <TIM_OC4_SetConfig+0xa4>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d003      	beq.n	8002924 <TIM_OC4_SetConfig+0x68>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a11      	ldr	r2, [pc, #68]	@ (8002964 <TIM_OC4_SetConfig+0xa8>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d109      	bne.n	8002938 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800292a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	019b      	lsls	r3, r3, #6
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	4313      	orrs	r3, r2
 8002936:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	621a      	str	r2, [r3, #32]
}
 8002952:	bf00      	nop
 8002954:	371c      	adds	r7, #28
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	40010000 	.word	0x40010000
 8002964:	40010400 	.word	0x40010400

08002968 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002968:	b480      	push	{r7}
 800296a:	b087      	sub	sp, #28
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	f003 031f 	and.w	r3, r3, #31
 800297a:	2201      	movs	r2, #1
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6a1a      	ldr	r2, [r3, #32]
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	43db      	mvns	r3, r3
 800298a:	401a      	ands	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a1a      	ldr	r2, [r3, #32]
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	f003 031f 	and.w	r3, r3, #31
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	fa01 f303 	lsl.w	r3, r1, r3
 80029a0:	431a      	orrs	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	621a      	str	r2, [r3, #32]
}
 80029a6:	bf00      	nop
 80029a8:	371c      	adds	r7, #28
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
	...

080029b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d101      	bne.n	80029cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029c8:	2302      	movs	r3, #2
 80029ca:	e05a      	b.n	8002a82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2202      	movs	r2, #2
 80029d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a21      	ldr	r2, [pc, #132]	@ (8002a90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d022      	beq.n	8002a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a18:	d01d      	beq.n	8002a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a1d      	ldr	r2, [pc, #116]	@ (8002a94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d018      	beq.n	8002a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a1b      	ldr	r2, [pc, #108]	@ (8002a98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d013      	beq.n	8002a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a1a      	ldr	r2, [pc, #104]	@ (8002a9c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d00e      	beq.n	8002a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a18      	ldr	r2, [pc, #96]	@ (8002aa0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d009      	beq.n	8002a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a17      	ldr	r2, [pc, #92]	@ (8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d004      	beq.n	8002a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a15      	ldr	r2, [pc, #84]	@ (8002aa8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d10c      	bne.n	8002a70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40010000 	.word	0x40010000
 8002a94:	40000400 	.word	0x40000400
 8002a98:	40000800 	.word	0x40000800
 8002a9c:	40000c00 	.word	0x40000c00
 8002aa0:	40010400 	.word	0x40010400
 8002aa4:	40014000 	.word	0x40014000
 8002aa8:	40001800 	.word	0x40001800

08002aac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e042      	b.n	8002b44 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d106      	bne.n	8002ad8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7fe f94c 	bl	8000d70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2224      	movs	r2, #36	@ 0x24
 8002adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002aee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 fa09 	bl	8002f08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	691a      	ldr	r2, [r3, #16]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	695a      	ldr	r2, [r3, #20]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2220      	movs	r2, #32
 8002b38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b08a      	sub	sp, #40	@ 0x28
 8002b50:	af02      	add	r7, sp, #8
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	603b      	str	r3, [r7, #0]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b20      	cmp	r3, #32
 8002b6a:	d175      	bne.n	8002c58 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d002      	beq.n	8002b78 <HAL_UART_Transmit+0x2c>
 8002b72:	88fb      	ldrh	r3, [r7, #6]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e06e      	b.n	8002c5a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2221      	movs	r2, #33	@ 0x21
 8002b86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b8a:	f7fe fa0b 	bl	8000fa4 <HAL_GetTick>
 8002b8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	88fa      	ldrh	r2, [r7, #6]
 8002b94:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	88fa      	ldrh	r2, [r7, #6]
 8002b9a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ba4:	d108      	bne.n	8002bb8 <HAL_UART_Transmit+0x6c>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d104      	bne.n	8002bb8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	61bb      	str	r3, [r7, #24]
 8002bb6:	e003      	b.n	8002bc0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002bc0:	e02e      	b.n	8002c20 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	2180      	movs	r1, #128	@ 0x80
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 f8df 	bl	8002d90 <UART_WaitOnFlagUntilTimeout>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d005      	beq.n	8002be4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e03a      	b.n	8002c5a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10b      	bne.n	8002c02 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	881b      	ldrh	r3, [r3, #0]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bf8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	3302      	adds	r3, #2
 8002bfe:	61bb      	str	r3, [r7, #24]
 8002c00:	e007      	b.n	8002c12 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	781a      	ldrb	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1cb      	bne.n	8002bc2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	2200      	movs	r2, #0
 8002c32:	2140      	movs	r1, #64	@ 0x40
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 f8ab 	bl	8002d90 <UART_WaitOnFlagUntilTimeout>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d005      	beq.n	8002c4c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2220      	movs	r2, #32
 8002c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e006      	b.n	8002c5a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	e000      	b.n	8002c5a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002c58:	2302      	movs	r3, #2
  }
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3720      	adds	r7, #32
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b08a      	sub	sp, #40	@ 0x28
 8002c66:	af02      	add	r7, sp, #8
 8002c68:	60f8      	str	r0, [r7, #12]
 8002c6a:	60b9      	str	r1, [r7, #8]
 8002c6c:	603b      	str	r3, [r7, #0]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c72:	2300      	movs	r3, #0
 8002c74:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b20      	cmp	r3, #32
 8002c80:	f040 8081 	bne.w	8002d86 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d002      	beq.n	8002c90 <HAL_UART_Receive+0x2e>
 8002c8a:	88fb      	ldrh	r3, [r7, #6]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e079      	b.n	8002d88 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2222      	movs	r2, #34	@ 0x22
 8002c9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ca8:	f7fe f97c 	bl	8000fa4 <HAL_GetTick>
 8002cac:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	88fa      	ldrh	r2, [r7, #6]
 8002cb2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	88fa      	ldrh	r2, [r7, #6]
 8002cb8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cc2:	d108      	bne.n	8002cd6 <HAL_UART_Receive+0x74>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d104      	bne.n	8002cd6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	61bb      	str	r3, [r7, #24]
 8002cd4:	e003      	b.n	8002cde <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002cde:	e047      	b.n	8002d70 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2120      	movs	r1, #32
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 f850 	bl	8002d90 <UART_WaitOnFlagUntilTimeout>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d005      	beq.n	8002d02 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e042      	b.n	8002d88 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10c      	bne.n	8002d22 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	3302      	adds	r3, #2
 8002d1e:	61bb      	str	r3, [r7, #24]
 8002d20:	e01f      	b.n	8002d62 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d2a:	d007      	beq.n	8002d3c <HAL_UART_Receive+0xda>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10a      	bne.n	8002d4a <HAL_UART_Receive+0xe8>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d106      	bne.n	8002d4a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	701a      	strb	r2, [r3, #0]
 8002d48:	e008      	b.n	8002d5c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1b2      	bne.n	8002ce0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002d82:	2300      	movs	r3, #0
 8002d84:	e000      	b.n	8002d88 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002d86:	2302      	movs	r3, #2
  }
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3720      	adds	r7, #32
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	603b      	str	r3, [r7, #0]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002da0:	e03b      	b.n	8002e1a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da8:	d037      	beq.n	8002e1a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002daa:	f7fe f8fb 	bl	8000fa4 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	6a3a      	ldr	r2, [r7, #32]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d302      	bcc.n	8002dc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e03a      	b.n	8002e3a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	f003 0304 	and.w	r3, r3, #4
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d023      	beq.n	8002e1a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	2b80      	cmp	r3, #128	@ 0x80
 8002dd6:	d020      	beq.n	8002e1a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	2b40      	cmp	r3, #64	@ 0x40
 8002ddc:	d01d      	beq.n	8002e1a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0308 	and.w	r3, r3, #8
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d116      	bne.n	8002e1a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002dec:	2300      	movs	r3, #0
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	617b      	str	r3, [r7, #20]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 f81d 	bl	8002e42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2208      	movs	r2, #8
 8002e0c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e00f      	b.n	8002e3a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	4013      	ands	r3, r2
 8002e24:	68ba      	ldr	r2, [r7, #8]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	bf0c      	ite	eq
 8002e2a:	2301      	moveq	r3, #1
 8002e2c:	2300      	movne	r3, #0
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	461a      	mov	r2, r3
 8002e32:	79fb      	ldrb	r3, [r7, #7]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d0b4      	beq.n	8002da2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3718      	adds	r7, #24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b095      	sub	sp, #84	@ 0x54
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	330c      	adds	r3, #12
 8002e50:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e54:	e853 3f00 	ldrex	r3, [r3]
 8002e58:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	330c      	adds	r3, #12
 8002e68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e6a:	643a      	str	r2, [r7, #64]	@ 0x40
 8002e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e6e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e70:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e72:	e841 2300 	strex	r3, r2, [r1]
 8002e76:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1e5      	bne.n	8002e4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	3314      	adds	r3, #20
 8002e84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e86:	6a3b      	ldr	r3, [r7, #32]
 8002e88:	e853 3f00 	ldrex	r3, [r3]
 8002e8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	f023 0301 	bic.w	r3, r3, #1
 8002e94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	3314      	adds	r3, #20
 8002e9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ea4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ea6:	e841 2300 	strex	r3, r2, [r1]
 8002eaa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1e5      	bne.n	8002e7e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d119      	bne.n	8002eee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	330c      	adds	r3, #12
 8002ec0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	e853 3f00 	ldrex	r3, [r3]
 8002ec8:	60bb      	str	r3, [r7, #8]
   return(result);
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	f023 0310 	bic.w	r3, r3, #16
 8002ed0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	330c      	adds	r3, #12
 8002ed8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002eda:	61ba      	str	r2, [r7, #24]
 8002edc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ede:	6979      	ldr	r1, [r7, #20]
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	e841 2300 	strex	r3, r2, [r1]
 8002ee6:	613b      	str	r3, [r7, #16]
   return(result);
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1e5      	bne.n	8002eba <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002efc:	bf00      	nop
 8002efe:	3754      	adds	r7, #84	@ 0x54
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f0c:	b0c0      	sub	sp, #256	@ 0x100
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f24:	68d9      	ldr	r1, [r3, #12]
 8002f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	ea40 0301 	orr.w	r3, r0, r1
 8002f30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	431a      	orrs	r2, r3
 8002f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002f60:	f021 010c 	bic.w	r1, r1, #12
 8002f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002f6e:	430b      	orrs	r3, r1
 8002f70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f82:	6999      	ldr	r1, [r3, #24]
 8002f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	ea40 0301 	orr.w	r3, r0, r1
 8002f8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	4b8f      	ldr	r3, [pc, #572]	@ (80031d4 <UART_SetConfig+0x2cc>)
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d005      	beq.n	8002fa8 <UART_SetConfig+0xa0>
 8002f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	4b8d      	ldr	r3, [pc, #564]	@ (80031d8 <UART_SetConfig+0x2d0>)
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d104      	bne.n	8002fb2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fa8:	f7fe fbc6 	bl	8001738 <HAL_RCC_GetPCLK2Freq>
 8002fac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002fb0:	e003      	b.n	8002fba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fb2:	f7fe fbad 	bl	8001710 <HAL_RCC_GetPCLK1Freq>
 8002fb6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fc4:	f040 810c 	bne.w	80031e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002fd2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002fd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002fda:	4622      	mov	r2, r4
 8002fdc:	462b      	mov	r3, r5
 8002fde:	1891      	adds	r1, r2, r2
 8002fe0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002fe2:	415b      	adcs	r3, r3
 8002fe4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002fe6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002fea:	4621      	mov	r1, r4
 8002fec:	eb12 0801 	adds.w	r8, r2, r1
 8002ff0:	4629      	mov	r1, r5
 8002ff2:	eb43 0901 	adc.w	r9, r3, r1
 8002ff6:	f04f 0200 	mov.w	r2, #0
 8002ffa:	f04f 0300 	mov.w	r3, #0
 8002ffe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003002:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003006:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800300a:	4690      	mov	r8, r2
 800300c:	4699      	mov	r9, r3
 800300e:	4623      	mov	r3, r4
 8003010:	eb18 0303 	adds.w	r3, r8, r3
 8003014:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003018:	462b      	mov	r3, r5
 800301a:	eb49 0303 	adc.w	r3, r9, r3
 800301e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800302e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003032:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003036:	460b      	mov	r3, r1
 8003038:	18db      	adds	r3, r3, r3
 800303a:	653b      	str	r3, [r7, #80]	@ 0x50
 800303c:	4613      	mov	r3, r2
 800303e:	eb42 0303 	adc.w	r3, r2, r3
 8003042:	657b      	str	r3, [r7, #84]	@ 0x54
 8003044:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003048:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800304c:	f7fd f8e2 	bl	8000214 <__aeabi_uldivmod>
 8003050:	4602      	mov	r2, r0
 8003052:	460b      	mov	r3, r1
 8003054:	4b61      	ldr	r3, [pc, #388]	@ (80031dc <UART_SetConfig+0x2d4>)
 8003056:	fba3 2302 	umull	r2, r3, r3, r2
 800305a:	095b      	lsrs	r3, r3, #5
 800305c:	011c      	lsls	r4, r3, #4
 800305e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003062:	2200      	movs	r2, #0
 8003064:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003068:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800306c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003070:	4642      	mov	r2, r8
 8003072:	464b      	mov	r3, r9
 8003074:	1891      	adds	r1, r2, r2
 8003076:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003078:	415b      	adcs	r3, r3
 800307a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800307c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003080:	4641      	mov	r1, r8
 8003082:	eb12 0a01 	adds.w	sl, r2, r1
 8003086:	4649      	mov	r1, r9
 8003088:	eb43 0b01 	adc.w	fp, r3, r1
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	f04f 0300 	mov.w	r3, #0
 8003094:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003098:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800309c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030a0:	4692      	mov	sl, r2
 80030a2:	469b      	mov	fp, r3
 80030a4:	4643      	mov	r3, r8
 80030a6:	eb1a 0303 	adds.w	r3, sl, r3
 80030aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80030ae:	464b      	mov	r3, r9
 80030b0:	eb4b 0303 	adc.w	r3, fp, r3
 80030b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80030b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80030c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80030c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80030cc:	460b      	mov	r3, r1
 80030ce:	18db      	adds	r3, r3, r3
 80030d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80030d2:	4613      	mov	r3, r2
 80030d4:	eb42 0303 	adc.w	r3, r2, r3
 80030d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80030da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80030de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80030e2:	f7fd f897 	bl	8000214 <__aeabi_uldivmod>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	4611      	mov	r1, r2
 80030ec:	4b3b      	ldr	r3, [pc, #236]	@ (80031dc <UART_SetConfig+0x2d4>)
 80030ee:	fba3 2301 	umull	r2, r3, r3, r1
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	2264      	movs	r2, #100	@ 0x64
 80030f6:	fb02 f303 	mul.w	r3, r2, r3
 80030fa:	1acb      	subs	r3, r1, r3
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003102:	4b36      	ldr	r3, [pc, #216]	@ (80031dc <UART_SetConfig+0x2d4>)
 8003104:	fba3 2302 	umull	r2, r3, r3, r2
 8003108:	095b      	lsrs	r3, r3, #5
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003110:	441c      	add	r4, r3
 8003112:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003116:	2200      	movs	r2, #0
 8003118:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800311c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003120:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003124:	4642      	mov	r2, r8
 8003126:	464b      	mov	r3, r9
 8003128:	1891      	adds	r1, r2, r2
 800312a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800312c:	415b      	adcs	r3, r3
 800312e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003130:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003134:	4641      	mov	r1, r8
 8003136:	1851      	adds	r1, r2, r1
 8003138:	6339      	str	r1, [r7, #48]	@ 0x30
 800313a:	4649      	mov	r1, r9
 800313c:	414b      	adcs	r3, r1
 800313e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003140:	f04f 0200 	mov.w	r2, #0
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800314c:	4659      	mov	r1, fp
 800314e:	00cb      	lsls	r3, r1, #3
 8003150:	4651      	mov	r1, sl
 8003152:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003156:	4651      	mov	r1, sl
 8003158:	00ca      	lsls	r2, r1, #3
 800315a:	4610      	mov	r0, r2
 800315c:	4619      	mov	r1, r3
 800315e:	4603      	mov	r3, r0
 8003160:	4642      	mov	r2, r8
 8003162:	189b      	adds	r3, r3, r2
 8003164:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003168:	464b      	mov	r3, r9
 800316a:	460a      	mov	r2, r1
 800316c:	eb42 0303 	adc.w	r3, r2, r3
 8003170:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003180:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003184:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003188:	460b      	mov	r3, r1
 800318a:	18db      	adds	r3, r3, r3
 800318c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800318e:	4613      	mov	r3, r2
 8003190:	eb42 0303 	adc.w	r3, r2, r3
 8003194:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003196:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800319a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800319e:	f7fd f839 	bl	8000214 <__aeabi_uldivmod>
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	4b0d      	ldr	r3, [pc, #52]	@ (80031dc <UART_SetConfig+0x2d4>)
 80031a8:	fba3 1302 	umull	r1, r3, r3, r2
 80031ac:	095b      	lsrs	r3, r3, #5
 80031ae:	2164      	movs	r1, #100	@ 0x64
 80031b0:	fb01 f303 	mul.w	r3, r1, r3
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	3332      	adds	r3, #50	@ 0x32
 80031ba:	4a08      	ldr	r2, [pc, #32]	@ (80031dc <UART_SetConfig+0x2d4>)
 80031bc:	fba2 2303 	umull	r2, r3, r2, r3
 80031c0:	095b      	lsrs	r3, r3, #5
 80031c2:	f003 0207 	and.w	r2, r3, #7
 80031c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4422      	add	r2, r4
 80031ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031d0:	e106      	b.n	80033e0 <UART_SetConfig+0x4d8>
 80031d2:	bf00      	nop
 80031d4:	40011000 	.word	0x40011000
 80031d8:	40011400 	.word	0x40011400
 80031dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031e4:	2200      	movs	r2, #0
 80031e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80031ea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80031ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80031f2:	4642      	mov	r2, r8
 80031f4:	464b      	mov	r3, r9
 80031f6:	1891      	adds	r1, r2, r2
 80031f8:	6239      	str	r1, [r7, #32]
 80031fa:	415b      	adcs	r3, r3
 80031fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80031fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003202:	4641      	mov	r1, r8
 8003204:	1854      	adds	r4, r2, r1
 8003206:	4649      	mov	r1, r9
 8003208:	eb43 0501 	adc.w	r5, r3, r1
 800320c:	f04f 0200 	mov.w	r2, #0
 8003210:	f04f 0300 	mov.w	r3, #0
 8003214:	00eb      	lsls	r3, r5, #3
 8003216:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800321a:	00e2      	lsls	r2, r4, #3
 800321c:	4614      	mov	r4, r2
 800321e:	461d      	mov	r5, r3
 8003220:	4643      	mov	r3, r8
 8003222:	18e3      	adds	r3, r4, r3
 8003224:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003228:	464b      	mov	r3, r9
 800322a:	eb45 0303 	adc.w	r3, r5, r3
 800322e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800323e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003242:	f04f 0200 	mov.w	r2, #0
 8003246:	f04f 0300 	mov.w	r3, #0
 800324a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800324e:	4629      	mov	r1, r5
 8003250:	008b      	lsls	r3, r1, #2
 8003252:	4621      	mov	r1, r4
 8003254:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003258:	4621      	mov	r1, r4
 800325a:	008a      	lsls	r2, r1, #2
 800325c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003260:	f7fc ffd8 	bl	8000214 <__aeabi_uldivmod>
 8003264:	4602      	mov	r2, r0
 8003266:	460b      	mov	r3, r1
 8003268:	4b60      	ldr	r3, [pc, #384]	@ (80033ec <UART_SetConfig+0x4e4>)
 800326a:	fba3 2302 	umull	r2, r3, r3, r2
 800326e:	095b      	lsrs	r3, r3, #5
 8003270:	011c      	lsls	r4, r3, #4
 8003272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003276:	2200      	movs	r2, #0
 8003278:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800327c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003280:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003284:	4642      	mov	r2, r8
 8003286:	464b      	mov	r3, r9
 8003288:	1891      	adds	r1, r2, r2
 800328a:	61b9      	str	r1, [r7, #24]
 800328c:	415b      	adcs	r3, r3
 800328e:	61fb      	str	r3, [r7, #28]
 8003290:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003294:	4641      	mov	r1, r8
 8003296:	1851      	adds	r1, r2, r1
 8003298:	6139      	str	r1, [r7, #16]
 800329a:	4649      	mov	r1, r9
 800329c:	414b      	adcs	r3, r1
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032ac:	4659      	mov	r1, fp
 80032ae:	00cb      	lsls	r3, r1, #3
 80032b0:	4651      	mov	r1, sl
 80032b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032b6:	4651      	mov	r1, sl
 80032b8:	00ca      	lsls	r2, r1, #3
 80032ba:	4610      	mov	r0, r2
 80032bc:	4619      	mov	r1, r3
 80032be:	4603      	mov	r3, r0
 80032c0:	4642      	mov	r2, r8
 80032c2:	189b      	adds	r3, r3, r2
 80032c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80032c8:	464b      	mov	r3, r9
 80032ca:	460a      	mov	r2, r1
 80032cc:	eb42 0303 	adc.w	r3, r2, r3
 80032d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80032d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80032de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80032e0:	f04f 0200 	mov.w	r2, #0
 80032e4:	f04f 0300 	mov.w	r3, #0
 80032e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80032ec:	4649      	mov	r1, r9
 80032ee:	008b      	lsls	r3, r1, #2
 80032f0:	4641      	mov	r1, r8
 80032f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032f6:	4641      	mov	r1, r8
 80032f8:	008a      	lsls	r2, r1, #2
 80032fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80032fe:	f7fc ff89 	bl	8000214 <__aeabi_uldivmod>
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	4611      	mov	r1, r2
 8003308:	4b38      	ldr	r3, [pc, #224]	@ (80033ec <UART_SetConfig+0x4e4>)
 800330a:	fba3 2301 	umull	r2, r3, r3, r1
 800330e:	095b      	lsrs	r3, r3, #5
 8003310:	2264      	movs	r2, #100	@ 0x64
 8003312:	fb02 f303 	mul.w	r3, r2, r3
 8003316:	1acb      	subs	r3, r1, r3
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	3332      	adds	r3, #50	@ 0x32
 800331c:	4a33      	ldr	r2, [pc, #204]	@ (80033ec <UART_SetConfig+0x4e4>)
 800331e:	fba2 2303 	umull	r2, r3, r2, r3
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003328:	441c      	add	r4, r3
 800332a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800332e:	2200      	movs	r2, #0
 8003330:	673b      	str	r3, [r7, #112]	@ 0x70
 8003332:	677a      	str	r2, [r7, #116]	@ 0x74
 8003334:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003338:	4642      	mov	r2, r8
 800333a:	464b      	mov	r3, r9
 800333c:	1891      	adds	r1, r2, r2
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	415b      	adcs	r3, r3
 8003342:	60fb      	str	r3, [r7, #12]
 8003344:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003348:	4641      	mov	r1, r8
 800334a:	1851      	adds	r1, r2, r1
 800334c:	6039      	str	r1, [r7, #0]
 800334e:	4649      	mov	r1, r9
 8003350:	414b      	adcs	r3, r1
 8003352:	607b      	str	r3, [r7, #4]
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003360:	4659      	mov	r1, fp
 8003362:	00cb      	lsls	r3, r1, #3
 8003364:	4651      	mov	r1, sl
 8003366:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800336a:	4651      	mov	r1, sl
 800336c:	00ca      	lsls	r2, r1, #3
 800336e:	4610      	mov	r0, r2
 8003370:	4619      	mov	r1, r3
 8003372:	4603      	mov	r3, r0
 8003374:	4642      	mov	r2, r8
 8003376:	189b      	adds	r3, r3, r2
 8003378:	66bb      	str	r3, [r7, #104]	@ 0x68
 800337a:	464b      	mov	r3, r9
 800337c:	460a      	mov	r2, r1
 800337e:	eb42 0303 	adc.w	r3, r2, r3
 8003382:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	663b      	str	r3, [r7, #96]	@ 0x60
 800338e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003390:	f04f 0200 	mov.w	r2, #0
 8003394:	f04f 0300 	mov.w	r3, #0
 8003398:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800339c:	4649      	mov	r1, r9
 800339e:	008b      	lsls	r3, r1, #2
 80033a0:	4641      	mov	r1, r8
 80033a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033a6:	4641      	mov	r1, r8
 80033a8:	008a      	lsls	r2, r1, #2
 80033aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80033ae:	f7fc ff31 	bl	8000214 <__aeabi_uldivmod>
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	4b0d      	ldr	r3, [pc, #52]	@ (80033ec <UART_SetConfig+0x4e4>)
 80033b8:	fba3 1302 	umull	r1, r3, r3, r2
 80033bc:	095b      	lsrs	r3, r3, #5
 80033be:	2164      	movs	r1, #100	@ 0x64
 80033c0:	fb01 f303 	mul.w	r3, r1, r3
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	3332      	adds	r3, #50	@ 0x32
 80033ca:	4a08      	ldr	r2, [pc, #32]	@ (80033ec <UART_SetConfig+0x4e4>)
 80033cc:	fba2 2303 	umull	r2, r3, r2, r3
 80033d0:	095b      	lsrs	r3, r3, #5
 80033d2:	f003 020f 	and.w	r2, r3, #15
 80033d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4422      	add	r2, r4
 80033de:	609a      	str	r2, [r3, #8]
}
 80033e0:	bf00      	nop
 80033e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80033e6:	46bd      	mov	sp, r7
 80033e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ec:	51eb851f 	.word	0x51eb851f

080033f0 <memset>:
 80033f0:	4402      	add	r2, r0
 80033f2:	4603      	mov	r3, r0
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d100      	bne.n	80033fa <memset+0xa>
 80033f8:	4770      	bx	lr
 80033fa:	f803 1b01 	strb.w	r1, [r3], #1
 80033fe:	e7f9      	b.n	80033f4 <memset+0x4>

08003400 <__libc_init_array>:
 8003400:	b570      	push	{r4, r5, r6, lr}
 8003402:	4d0d      	ldr	r5, [pc, #52]	@ (8003438 <__libc_init_array+0x38>)
 8003404:	4c0d      	ldr	r4, [pc, #52]	@ (800343c <__libc_init_array+0x3c>)
 8003406:	1b64      	subs	r4, r4, r5
 8003408:	10a4      	asrs	r4, r4, #2
 800340a:	2600      	movs	r6, #0
 800340c:	42a6      	cmp	r6, r4
 800340e:	d109      	bne.n	8003424 <__libc_init_array+0x24>
 8003410:	4d0b      	ldr	r5, [pc, #44]	@ (8003440 <__libc_init_array+0x40>)
 8003412:	4c0c      	ldr	r4, [pc, #48]	@ (8003444 <__libc_init_array+0x44>)
 8003414:	f000 f818 	bl	8003448 <_init>
 8003418:	1b64      	subs	r4, r4, r5
 800341a:	10a4      	asrs	r4, r4, #2
 800341c:	2600      	movs	r6, #0
 800341e:	42a6      	cmp	r6, r4
 8003420:	d105      	bne.n	800342e <__libc_init_array+0x2e>
 8003422:	bd70      	pop	{r4, r5, r6, pc}
 8003424:	f855 3b04 	ldr.w	r3, [r5], #4
 8003428:	4798      	blx	r3
 800342a:	3601      	adds	r6, #1
 800342c:	e7ee      	b.n	800340c <__libc_init_array+0xc>
 800342e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003432:	4798      	blx	r3
 8003434:	3601      	adds	r6, #1
 8003436:	e7f2      	b.n	800341e <__libc_init_array+0x1e>
 8003438:	08003480 	.word	0x08003480
 800343c:	08003480 	.word	0x08003480
 8003440:	08003480 	.word	0x08003480
 8003444:	08003484 	.word	0x08003484

08003448 <_init>:
 8003448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800344a:	bf00      	nop
 800344c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800344e:	bc08      	pop	{r3}
 8003450:	469e      	mov	lr, r3
 8003452:	4770      	bx	lr

08003454 <_fini>:
 8003454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003456:	bf00      	nop
 8003458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800345a:	bc08      	pop	{r3}
 800345c:	469e      	mov	lr, r3
 800345e:	4770      	bx	lr
